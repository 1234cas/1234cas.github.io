{
    "version": "https://jsonfeed.org/version/1",
    "title": "Sparkle",
    "subtitle": "加油",
    "icon": "https://1234cas.github.io/1234cas.github.io/images/favicon.ico",
    "description": "好好读书",
    "home_page_url": "https://1234cas.github.io/1234cas.github.io",
    "items": [
        {
            "id": "https://1234cas.github.io/1234cas.github.io/Programme/%E5%B0%8F%E7%A8%8B%E5%BA%8F/",
            "url": "https://1234cas.github.io/1234cas.github.io/Programme/%E5%B0%8F%E7%A8%8B%E5%BA%8F/",
            "title": "小程序",
            "date_published": "2023-05-15T02:40:05.224Z",
            "content_html": "<p>vscode 写代码，然后去微信开发工具打空格保存<br />\n逻辑层<br />\n数据绑定<br />\n wxss 样式导入使用 @import 语句可以导入外联样式表，@import 后跟需要导入的外联样式表的相对路径，用；表示语句结束。</p>\n",
            "tags": [
                "编程",
                "编程"
            ]
        },
        {
            "id": "https://1234cas.github.io/1234cas.github.io/Programme/%E7%BC%96%E7%A8%8B/",
            "url": "https://1234cas.github.io/1234cas.github.io/Programme/%E7%BC%96%E7%A8%8B/",
            "title": "编程",
            "date_published": "2023-05-15T02:40:05.224Z",
            "content_html": "<p>a 里面放块级元素 要给 a 转 block 行高继承 padding 要有宽高<br />\n定位的盒子 margin 没用 只有块级元素才有 margin：auto<br />\nflex 盒子、浮动元素、绝对固定定位都不用担心外边距合并问题<br />\n.a:hover .b {} input {outline:none;} textarea {resize:none;}<br />\n object-fit:cover; 这个可以让 img 和 background cover 一样<br />\n opacity</p>\n<p>ctrl+f  ctrl+g  ctrl+h</p>\n<p>p406 4.32<br />\np411 5.50 6.33（笔记 p264）<br />\np427 5.58<br />\np428 9.33<br />\np429 8.33<br />\np435 9.45<br />\np437 3.35<br />\np459 6.27 8.12 圆角设为高度的一半<br />\n p461 5.08<br />\np464 2.30<br />\np466 5.50<br />\np483 2.40<br />\nroot</p>\n<p>js<br />\n 方法<br />\n isNaN<br />\ninstanceof typeof<br />\ntoString String +<br />\nparseInt parseFloat Number -*/<br />\nBoolean<br />\n++ ++ || &amp;&amp; !<br />\nif if else if else if switch case for<br />\nwhile do while<br />\ncontinue break return<br />\nvar arr=[];<br />\nvar arr=new Array();<br />\n 对象三种写法<br />\n var xx={<br />\nname:name,<br />\nage:age}</p>\n<p>var xx = new Object(xx.xx);<br />\nxx.name=name;<br />\nxx.age=age'</p>\n<p>function Star(xxx,xxx){<br />\nthis.name=name;}<br />\nvar xx = new Star(xx.xx);</p>\n<p>for(var k in obj)<br />\nmath.floor(Math.random()*(max-min+1))+min;<br />\nvar date=new Date();<br />\nvar date=+new Date();</p>\n<p>数组的方法 push pop unshift shift reverse sort indexOf lastIndexOf<br />\n 数组转字符串 toString join (' 分隔符 ')</p>\n<p>字符串的方法 根据字符返位置 indexOf ('xx',xx) lastIndexOf<br />\n 根据位置返字符 charAt () charCodeAt () str [index]<br />\n 字符串 concat substr slice substring<br />\nreplace ('xx','xx') 字符串转数组 split (' 分隔符 ')</p>\n<p>typeof 判断类型 但是对 array 或者其他会返回 object 这是局限性<br />\n instanceof 判断一个变量是否某个对象的实例 返回 true 或者 false<br />\n 通过数组索引来加数组元素<br />\n基本包装类型 字符串的不可变性</p>\n<p>p447 this 的指向问题 声明全局变量<br />\n p112 有一个需要转换数组的问题有待解决<br />\n外单内双 引引加加 表达式是有返回值的 return 要写在最后面且只返回一个值<br />\n变量 属性 函数 方法 对象 构造函数 this 指向的是事件函数的调用者 btn<br />\nqueryselect（‘选择器’）选择器就是 css 里面前面的部分比如 .w</p>\n<p>js 暂时学完了 好像还有后续 到时候再看看</p>\n",
            "tags": [
                "编程",
                "编程"
            ]
        },
        {
            "id": "https://1234cas.github.io/1234cas.github.io/Other/%E6%94%B6%E8%97%8F-%E5%AD%97%E9%9D%A2%E8%AE%B0%E5%BD%95/",
            "url": "https://1234cas.github.io/1234cas.github.io/Other/%E6%94%B6%E8%97%8F-%E5%AD%97%E9%9D%A2%E8%AE%B0%E5%BD%95/",
            "title": "收藏",
            "date_published": "2023-05-15T02:40:05.224Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUhiNHkxWDd5WQ==\">https://www.bilibili.com/video/BV1Hb4y1X7yY</span><br />\n 如果喜欢看纸质书的同学，可以试试这个九个：<br />\n1. 某多多<br />\n 2. 孔夫子旧书网<br />\n 3. 多抓鱼<br />\n 4. 漫游鲸<br />\n 5. 中国图书网<br />\n 6. 熊猫格子<br />\n 7. 渔书<br />\n 8. 旧书街<br />\n 9. 小谷吖</p>\n<p>lorefree. 伴读，淘链客，kindle，熊猫搜书，鸠摩搜书，Obook，书享家，拨云搜索</p>\n<p>书享家的很多资源早就失效了，推荐六个常用的电子书网站：<br />\n1.Z—LIBRARY:<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC4xbGliLm9yZy8=\">https://zh.1lib.org/</span><br />\n2.Lorefree:<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lYm9vazIubG9yZWZyZWUuY29tLw==\">https://ebook2.lorefree.com/</span><br />\n3. 鸠摩搜书：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaml1bW9kaWFyeS5jb20v\">https://www.jiumodiary.com/</span><br />\n4.ePUBee:<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5vYm9vay52aXAvYm9va3Mv\">http://www.obook.vip/books/</span><br />\n5.IRead:<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5pcmVhZC5jZi8=\">http://www.iread.cf/</span><br />\n6. 淘链客：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy50b3BsaW5rcy5jYy9zLw==\">http://www.toplinks.cc/s/</span>  复制黏贴</p>\n<p>我是璐不是露<br />\n推荐几个我个人长期使用的免费下载文献的网站 1、<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy51Y2Rycy5zdXBlcmxpYi5uZXQ=\">http://www.ucdrs.superlib.net</span> 不同于知网，它的绝大多数文献是不能直接下载的，需要用邮箱传递，学名就叫做「文献传递服务」也可以下载外文<br />\n 2、<span class=\"exturl\" data-url=\"aHR0cDovL215bGliLm5sYy5jbi93ZWIvZ3Vlc3Q=\">http://mylib.nlc.cn/web/guest</span><br />\n3、Library Genesis<br />\n（网址：<span class=\"exturl\" data-url=\"aHR0cDovL2dlbi5saWIucnVzLmVjLyVFRiVCQyU4OQ==\">http://gen.lib.rus.ec/）</span><br />\n4、Projekt Gutenberg<br />\n（网址：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5ndXRlbmJlcmcub3JnLyVFRiVCQyU4OSVFNiU5QyU4OVBERiVFNyU5QSU4NCVFRiVCQyU4QyVFOCVCRiU5OCVFNiU5QyU4OSVFNCVCOCU5MyVFNCVCRSU5QmtpbmRsZSVFOSU5OCU4NSVFOCVBRiVCQiVFNyU5QSU4NGVwdWIlRUYlQkMlOENhenclRTYlQTAlQkMlRTUlQkMlOEYlRTclOUElODQlRUYlQkMlOEMlRTglQkYlOTklRTQlQkElOUIlRTYlQTAlQkMlRTUlQkMlOEYlRTQlQjklOEIlRTklOTclQjQlRTklODMlQkQlRTUlOEYlQUYlRTQlQkIlQTUlRTclOTQlQTglRTMlODAlOENDYWxpYnJlJUUzJTgwJThEJUU4JUJGJTk5JUU0JUI4JUFBJUU4JUJEJUFGJUU0JUJCJUI2JUU4JUJGJTlCJUU4JUExJThDJUU4JUJEJUFDJUU2JThEJUEyJUUzJTgwJTgyJUU2JTlDJTg5JUU5JTlDJTgwJUU4JUE2JTgxJUU3JTlBJTg0JUU4JTg3JUFBJUU1JUI3JUIxJUU1JThFJUJCJUU2JTg5JUJFJUU1JTkwJUE3JUVGJUJDJThDJUU4JUJGJTk5JUU0JUI4JUFBJUU1JThGJUFBJUU2JThGJTkwJUU0JUJFJTlCJUU3JTk0JUI1JUU1JUFEJTkwJUU1JTlCJUJFJUU0JUI5JUE2JUUzJTgwJTgy\">http://www.gutenberg.org/）有 PDF 的，还有专供 kindle 阅读的 epub，azw 格式的，这些格式之间都可以用「Calibre」这个软件进行转换。有需要的自己去找吧，这个只提供电子图书。</span><br />\n5、Springer（网址：<span class=\"exturl\" data-url=\"aHR0cDovL2xpbmsuc3ByaW5nZXIuY29t\">http://link.springer.com</span>）这个以前是免费的，现在付费，用校园网试试吧，自从疫情混不进去大学了我还没有用校园网试过 [笑哭] 你们在校试试用校园网，可以记得通知我</p>\n<p>知网下全篇 pdf：转英文页面可下</p>\n<p>其实我们心里需要的只是一个仪式，一个完整的带有仪式感的行为来让自己的心得到满足感，来告诉自己，今天已经结束了，我从这件事情上得到了满足感，可以心甘情愿的睡去。记住这个仪式不可以是碎片化的浏览和查看，一定要是一个完整的观看或者聆听。</p>\n<p>热身冷身。运动完后的冷身在夏季尤为重要，在心率回复到正常水平之后，再进行静态拉伸。有助于缓解运动后的酸痛以及避免运动损伤（运动前后拉伸以及放松动作参考：运动前后不拉伸？小心腿变粗。）；<br />\n注意补水。在运动前 2-3 小时，补充 480-260 毫升的水，运动过程中，最好每 10-20 分钟进行一次补水；<br />\n避开阳光较为强烈的时间（10 点 - 15 点）。避开紫外线最为强烈的时间段，防止晒伤的同时，也有助于避免皮肤老化以及降低患皮肤癌的风险；<br />\n涂抹防晒霜以及佩戴遮阳帽（注意散热）。如果运动时间过长，建议两小时重新涂抹一次，出汗较多的情况下，频率可以适当提高；<br />\n适合夏季的着装。尽量选择吸汗排湿性较好的面料，绝对不要选择棉质（了解更多戳这里：「凉感」服饰究竟是怎么凉的？）；<br />\n给予身体适应的时间（1-2 周），运动量循序渐进。循序渐进的运动过程有助于我们降低患热病的概率；<br />\n时刻倾听自己的身体。无论是什么运动，特别是在户外，一旦出现脱水或者不舒服的症状，停下脚步并进行补水，此外你还可以通过尿液来判断缺水状况（深黄色 / 褐黄色，说明需要尽快补水）；</p>\n<p>先给大家介绍一个概念。RM（repetition maximum 最高重复次数）。意思是当你举某个重量的时候，能最多重复的次数。就是这个动作，这个重量的 RM。如果你 100 公斤卧推，只能做一个，那么你的 100 公斤 RM 就是 1。如果你 80 公斤下卧推能做 10 次，那么你的 80 公斤 RM 就是 10。</p>\n<p>根据 RM 和组间休息的时间，可以针对不同目的的训练。</p>\n<p>1、以绝对力量、爆发力为主的训练，主要采取 1-5RM 的训练重量次数，采取 2-5 分钟的组间休息⑤。</p>\n<p>2、以肌肉体积增长、无氧耐力增加的训练，主要采取 6-12RM 的训练重量与次数，采取 30 秒到 90 秒的组间休息⑥</p>\n<p>3、以减少体脂、有氧能力、无氧耐力的训练，主要采取 15RM-20RM 的次数，组间休息 10 秒到 30⑦。（某些实验证明这个次数的运动，有局部减脂效果）。</p>\n",
            "tags": [
                "其他",
                "其他"
            ]
        },
        {
            "id": "https://1234cas.github.io/1234cas.github.io/Reading-minutes/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%AE%B0/",
            "url": "https://1234cas.github.io/1234cas.github.io/Reading-minutes/%E5%85%B3%E4%BA%8E%E7%AC%94%E8%AE%B0/",
            "title": "关于笔记",
            "date_published": "2023-05-15T02:40:05.224Z",
            "content_html": "<p>重要的加粗 重点的一两个词 <code>加红</code> <br />\n<span class=\"label warning\">错误和问题所在统一用这种样式</span></p>\n<p>空格全换中文逗号，空格有时候看起来会意义不明</p>\n<p>用 markdown 加粗的要在前后加空格 因为不加空格 hexo 解析不出来</p>\n",
            "tags": [
                "读书笔记",
                "读书笔记"
            ]
        },
        {
            "id": "https://1234cas.github.io/1234cas.github.io/Reading-minutes/%E5%85%B3%E4%BA%8E%E8%AF%BB%E4%B9%A6/",
            "url": "https://1234cas.github.io/1234cas.github.io/Reading-minutes/%E5%85%B3%E4%BA%8E%E8%AF%BB%E4%B9%A6/",
            "title": "关于读书",
            "date_published": "2023-05-15T02:40:05.224Z",
            "content_html": "<p>TBR:<br />\n1, 卡尔维诺<br />\n《分成两半的子爵》《树上的男爵》《不存在的骑士》《美国讲稿》<br />\n2, 弗朗西斯福山<br />\n《我们的后人类未来：生物技术革命的后果》《身份政治：对尊严与认同的渴求》<br />\n4，纪实 &amp; 人文<br />\n《梦瘾》</p>\n<p>准备笔（铅笔或者其他） 标签贴（ 标记重点或者注意的点）<br />\n便利贴（随时记录自己的想法 也可以贴在第一页来记录阅读感想） 书签 水（多喝水）<br />\n读完回顾 建立读书笔记和感想 （印象笔记）电脑打字或者拍照<br />\n感想贴在首页或者写进读书报告<br />\n BV1VW411d78p</p>\n",
            "tags": [
                "读书笔记",
                "读书笔记"
            ]
        },
        {
            "id": "https://1234cas.github.io/1234cas.github.io/Reading-minutes/js%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D/",
            "url": "https://1234cas.github.io/1234cas.github.io/Reading-minutes/js%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D/",
            "title": "js忍者秘籍",
            "date_published": "2023-05-15T02:40:05.224Z",
            "content_html": "<h1 id=\"第一章\"><a class=\"anchor\" href=\"#第一章\">#</a> 第一章</h1>\n<p>console.time () 计时器 cosole.timeEnd ()</p>\n<h1 id=\"第三章-函数定义\"><a class=\"anchor\" href=\"#第三章-函数定义\">#</a> 第三章 函数定义</h1>\n<h2 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h2>\n<p>JavaScript 中最关键的概念是：函数是第一类对象（first-class objects），或者说它们</p>\n<p>被称作一等公民（first-class citizens）。</p>\n<p>对象能做的任何一件事，函数也都能做。函数也是对象，唯一的特殊之处在于它是</p>\n<p>可调用的（invokable），即函数会被调用以便执行某项动作。</p>\n<p>把函数作为第一类对象是函数式编程（functional programming）的第一步。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>values<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value1<span class=\"token punctuation\">,</span> value2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">return</span> value1 <span class=\"token operator\">-</span> value2<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>任何类型的缓存都必然会为性能牺牲内存</p>\n<h2 id=\"函数定义\"><a class=\"anchor\" href=\"#函数定义\">#</a> 函数定义</h2>\n<p>JavaScript 提供了几种定义函数的方式，可以分为 4 类。</p>\n<ul>\n<li><strong>函数定义（function declarations）和函数表达式（function expressions）</strong></li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">fun</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><strong>箭头函数（通常被叫做 lambda 函数）</strong></li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token parameter\">num</span> <span class=\"token operator\">=></span> num</pre></td></tr></table></figure><ul>\n<li><strong>函数构造函数</strong></li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> fun <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li><strong>生成器函数</strong></li>\n</ul>\n<pre><code>function* gen()&#123; yield 1; &#125;\n</code></pre>\n<p>函数表达式的立即调用，立即调用函数（IIFE）</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>ES6 之前处理默认参数的方法</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">performAction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ninja<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre> action <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> action <span class=\"token operator\">===</span> <span class=\"token string\">\"undefined\"</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"skulking\"</span> <span class=\"token operator\">:</span> action<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">return</span> ninja <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> action<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>每次函数调用时都会从左到右求得参数的值，并且当对后面的默认参数赋值时可以引用前面的默认参数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">performAction</span><span class=\"token punctuation\">(</span>ninja<span class=\"token punctuation\">,</span> action <span class=\"token operator\">=</span> <span class=\"token string\">\"skulking\"</span><span class=\"token punctuation\">,</span> message <span class=\"token operator\">=</span> ninja <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">return</span> message<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"小结\"><a class=\"anchor\" href=\"#小结\">#</a> 小结</h2>\n<blockquote>\n<p>● 把 JavaScript 看作函数式语言你就能书写复杂代码。</p>\n<p>● 作为第一类对象，函数和 JavaScript 中其他对象一样。类似于其他对象类型，函数具有以下功能。</p>\n<p>​\t♦ 通过字面量创建。</p>\n<p>​\t♦ 赋值给变量或属性。</p>\n<p>​\t♦ 作为函数参数传递。</p>\n<p>​\t♦ 作为函数的结果返回。</p>\n<p>​\t♦ 赋值给属性和方法。</p>\n<p>● 回调函数是被代码随后 “回来调用” 的函数，它是一种很常用的函数，特别是在事件处理场景下。</p>\n<p>● 函数具有属性，而且这些属性能够被存储任何信息，我们可以利用这个特性来做很多事情；例如：</p>\n<p>​\t♦ 可以在函数属性中存储另一个函数用于之后的引用和调用。</p>\n<p>​\t♦ 可以用函数属性创建一个缓存（记忆），用于减少不必要的计算。</p>\n<p>● 有很多不同类型的函数：函数声明、函数表达式、箭头函数以及函数生成器等。</p>\n<p>● 函数声明和函数表达式是两种最主要的函数类型。函数声明必须具有函数名，在代码中它也必须作为一个独立的语句存在。函数表达式可以不必有函数名，但此时它就必须作为其他语句的一部分。</p>\n<p>● 箭头函数是 JavaScript 的一个新增特性，这个特性让我们可以使用更简洁的方式来定义函数。</p>\n<p>● 形参是函数定义时列出的变量，而实参是函数调用时传递给函数的值。</p>\n<p>● 函数的形参列表和实参列表长度可以不同。</p>\n<p>​\t♦ 未赋值的形参求值得到 undefined。</p>\n<p>​\t♦ 传入的额外实参不会被赋给任何一个命名形参。</p>\n<p>● 剩余参数和默认参数是 JavaScript 的新特性。</p>\n<p>​\t♦ 剩余参数 —— 不与任何形参名相匹配的额外实参可以通过剩余参数来引用。</p>\n<p>​\t♦ 默认参数 —— 函数调用时，若没传入参数，默认参数可以给函数提供缺省的参数值。</p>\n</blockquote>\n<h1 id=\"第四章-函数调用\"><a class=\"anchor\" href=\"#第四章-函数调用\">#</a> 第四章 函数调用</h1>\n<h2 id=\"函数调用\"><a class=\"anchor\" href=\"#函数调用\">#</a> 函数调用</h2>\n<p>参数 this 表示被调用函数的上下文对象，而 arguments 参数表示函数调用过程中传递的所有参数。</p>\n<p>函数调用：</p>\n<ul>\n<li><strong>作为一个函数 (function)——skulk ()，直接被调用。</strong></li>\n</ul>\n<p>通过全局函数（普通函数、立即执行函数、定时器）调用的 this 指向全局上下文（window 对象）在严格模式下指向 undefined</p>\n<ul>\n<li><strong>作为一个方法 (method)——ninja.skulk ()</strong></li>\n</ul>\n<p>通过方法调用函数时，this 指向该方法所在对象</p>\n<p>（即便调用的是相同的函数，但通过 this 返回的函数上下文依然取决于该函数的调用方式）</p>\n<ul>\n<li><strong>作为一个构造函数 (constructor)——new Ninja ()</strong></li>\n</ul>\n<p>构造函数的目的是创建一个新对象，并初始化，然后将其作为构造函数的返回值</p>\n<p><img data-src=\"js%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D.assets/image-20220506201117776.png\" alt=\"image-20220506201117776\" /></p>\n<p>new 在执行时做的四件事：<strong>1. 在内存中创建一个新的空对象 2. 让 this 指向这个新对象  3. 执行构造函数里面的代码，给这个对象添加属性和方法 4. 返回这个新对象（所以构造函数里面不需要 return）</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> puppet <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre> rules<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Emperor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rules <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">return</span> puppet<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> emperor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Emperor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>emperor <span class=\"token operator\">===</span> puppet<span class=\"token punctuation\">,</span> <span class=\"token string\">\"The emperor is merely a puppet!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>emperor<span class=\"token punctuation\">.</span>rules <span class=\"token operator\">===</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The puppet does not know how to rule!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果构造函数返回一个对象，则该对象将作为整个表达式的值返回，而传入构造函数的 this 将被丢弃。</p>\n<p>但是，如果构造函数返回的是非对象类型，则忽略返回值，返回新创建的对象。</p>\n<ul>\n<li><strong>call 或者 apply 方法 ——skulk.call (ninja)</strong></li>\n</ul>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Click Me!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">function</span> <span class=\"token function\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> \t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clicked <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre> \t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">click</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre> \t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clicked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre> \t\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">.</span>clicked<span class=\"token punctuation\">,</span> <span class=\"token string\">\"The button has been clicked\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre> \t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token keyword\">var</span> button <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Button</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token keyword\">var</span> elem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre> elem<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span> button<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token comment\">// 把 button.click 直接替换成函数就可以很清楚的看到 this 指向问题</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>因此上下文将是 &lt;button&gt; 元素，而非 button 对象。所以我们将单击状态设置到了错误的对象上</p>\n<p>apply 和 call 可以显式的指定任意对象作为函数的上下文</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>上下文<span class=\"token punctuation\">,</span> 实参<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>sparkle<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>解决函数上下文的问题：箭头函数，bind 方法</p>\n<h2 id=\"小结-2\"><a class=\"anchor\" href=\"#小结-2\">#</a> 小结</h2>\n<blockquote>\n<p>● 当调用函数时，除了传入在函数定义中显式声明的参数之外，同时还传入两个</p>\n<p>隐式参数：arguments 与 this。</p>\n<p>- arguments 参数是传入函数的所有参数的集合。具有 length 属性，表示传入</p>\n<p>参数的个数，通过 arguments 参数还可获取那些与函数形参不匹配的参数。</p>\n<p>在非严格模式下，arguments 对象是函数参数的别名，修改 arguments 对象</p>\n<p>会修改函数实参，可以通过严格模式避免修改函数实参。</p>\n<p>- this 表示函数上下文，即与函数调用相关联的对象。函数的定义方式和调用</p>\n<p>方式决定了 this 的取值。</p>\n<p>● 函数的调用方式有 4 种。</p>\n<p>- 作为函数调用：skulk ()。</p>\n<p>- 作为方法调用：ninja.skulk ()。</p>\n<p>- 作为构造函数调用：new Ninja ()。</p>\n<p>- 通过 apply 与 call 方法调用：skulk.apply (ninja) 或 skulk.call (ninja)。</p>\n<p>● 函数的调用方式影响 this 的取值。</p>\n<p>- 如果作为函数调用，在非严格模式下，this 指向全局 window 对象；在严格</p>\n<p>模式下，this 指向 undefined。</p>\n<p>- 作为方法调用，this 通常指向调用的对。</p>\n<p>- 作为构造函数调用，this 指向新创建的对象。</p>\n<p>- 通过 call 或 apply 调用，this 指向 call 或 apply 的第一个参数。</p>\n<p>● 箭头函数没有单独的 this 值，this 在箭头函数创建时确定。</p>\n<p>● 所有函数均可使用 bind 方法，创建新函数，并绑定到 bind 方法传入的参数上。</p>\n<p>被绑定的函数与原始函数具有一致的行为</p>\n</blockquote>\n<h1 id=\"第五章-闭包和作用域\"><a class=\"anchor\" href=\"#第五章-闭包和作用域\">#</a> 第五章 闭包和作用域</h1>\n<h2 id=\"闭包\"><a class=\"anchor\" href=\"#闭包\">#</a> 闭包</h2>\n<p>闭包带来的问题是 JS 的作用域是如何工作的</p>\n<p><strong>闭包允许函数访问并操作函数外部的变量。</strong>（作用域是程序的一部分，特定的名字绑定特定的变量。）</p>\n<p>所声明的函数可以在声明之后的任何时间被调用，甚至当该函数声明的作用域消失之后仍然可以调用。</p>\n<p>当在外部函数中声明内部函数时，不仅定义了函数的声明，而且还创建了一个闭包。该闭包不仅包含了函数的声明，<strong>还包含了在函数声明时该作用域中的所有变量</strong>。当最终执行内部函数时，尽管声明时的作用域已经消失了，但是通过闭包，仍然能够访问到原始作用域</p>\n<p><img data-src=\"js%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D.assets/image-20220506211944366.png\" alt=\"image-20220506211944366\" /></p>\n<p>通过使用闭包，我们可以实现很接近的、可接受的私有变量</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Ninja</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">var</span> feints <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getFeints</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">return</span> feints<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">feint</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> \tfeints<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">var</span> ninja1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Ninja</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>ninja1<span class=\"token punctuation\">.</span><span class=\"token function\">feint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ninja1<span class=\"token punctuation\">.</span>feints <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"And the private data is inaccessible to us.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ninja1<span class=\"token punctuation\">.</span><span class=\"token function\">getFeints</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"We're able to access the internal feint count.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"js%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D.assets/image-20220506212223096.png\" alt=\"image-20220506212223096\" /></p>\n<ul>\n<li>\n<p>通过变量 ninja，对象实例是可见的。</p>\n</li>\n<li>\n<p>因为 feint 方法在闭包内部，因此可以访问变量 feints。</p>\n</li>\n<li>\n<p>在闭包外部，我们无法访问变量 feints。</p>\n</li>\n</ul>\n<p>通过在函数内部定义变量，并基于闭包，使得在计时器的回调函数中可以访问这些变量，每个动画都能够获得属于自己的 “气泡” 中的私有变量。可以一次性做到许多事情。</p>\n<h2 id=\"执行上下文\"><a class=\"anchor\" href=\"#执行上下文\">#</a> 执行上下文</h2>\n<p>JS 引擎执行代码时，每一条语句都处于特定的执行上下文中，全局执行上下文只有一个，当 JavaScript 程序开始执行时就已经创建了全局上下文；而函数执行上下文是在每次调用函数时，就会创建一个新的。</p>\n<p>（执行上下文是内部的 JavaScript 概念，JavaScript 引擎使用执行上下文来跟踪函数的执行。可以在调试器中看到对应的调用栈 (call stack)）</p>\n<p>JavaScript 基于单线程的执行模型：在某个特定的时刻只能执行特定的代码。一旦发生函数调用，当前的执行上下文必须停止执行，并创建新的函数执行上下文来执行函数。当函数执行完成后，将函数执行上下文销毁，并重新回到发生调用时的执行上下文中。所以需要跟踪执行上下文 —— 正在执行的上下文以及正在等待的上下文。最简单的跟踪方法是使用执行上下文栈（或称为调用栈）</p>\n<p><img data-src=\"js%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D.assets/image-20220506213426843.png\" alt=\"image-20220506213426843\" /></p>\n<h2 id=\"词法环境\"><a class=\"anchor\" href=\"#词法环境\">#</a> 词法环境</h2>\n<p><strong>词法环境（lexical environment）是 JavaScript 引擎内部用来跟踪标识符与特定变量之间的映射关系。</strong></p>\n<p>（词法环境是 JavaScript 作用域的内部实现机制，人们通常称为作用域 (scopes)）</p>\n<p>因为我们需要访问外部代码结构中的变量，如果在当前环境中无法找到某一标识符，就会对外部环境进行查找。一旦查找到匹配的变量，或是在全局环境中仍然无法查找到对应的标识符而返回错误，就会停止查找。</p>\n<p><img data-src=\"js%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D.assets/image-20220506213818422.png\" alt=\"image-20220506213818422\" /></p>\n<p>无论何时调用函数，都会创建一个新的执行环境，被推入执行上下文栈。此外，还会创建一个与之相关联的词法环境。现在来看最重要的部分：外部环境与新建的词法环境，JavaScript 引擎将调用函数的内置 [[Environment]] 属性与创建函数时的环境进行关联。</p>\n<h2 id=\"变量类型\"><a class=\"anchor\" href=\"#变量类型\">#</a> 变量类型</h2>\n<p>const 只能在声明时被初始化一次，不允许重新赋值，可以修改 const 变量已经存在的值，但不能重写</p>\n<p>var 在最近的函数或者是全局词法环境中定义变量（无视块级作用域）</p>\n<p>let 和 const 直接在最近的词法环境中定义变量</p>\n<p><strong>JavaScript 代码的执行事实上是分两个阶段进行的。</strong></p>\n<p>一旦创建了新的词法环境，就会执行第一阶段。** 在第一阶段，没有执行代码，但是 JavaScript 引擎会访问并注册在当前词法环境中所声明的变量和函数。**JavaScript 在第一阶段完成之后开始执行第二阶段，具体如何执行取决于变量的类型（let、var、const 和函数声明）以及环境类型（全局环境、函数环境或块级作用域）。</p>\n<p>具体的处理过程如下：</p>\n<p>1．如果是创建一个函数环境，那么创建形参及函数参数的默认值。如果是非函数环境，将跳过此步骤。</p>\n<p>2．如果是创建全局或函数环境，就扫描当前代码进行函数声明（不会扫描其他函数的函数体），但是不会执行函数表达式或箭头函数。对于所找到的函数声明，将创建函数，并绑定到当前环境与函数名相同的标识符上。若该标识符已经存在，那么该标识符的值将被重写。如果是块级作用域，将跳过此步骤。</p>\n<p>3．扫描当前代码进行变量声明。在函数或全局环境中，查找所有当前函数以及其他函数之外通过 var 声明的变量，并查找所有通过 let 或 const 定义的变量。在块级环境中，仅查找当前块中通过 let 或 const 定义的变量。对于所查找到的变量，若该标识符不存在，进行注册并将其初始化为 undefined。若该标识符已经存在，将保留其值</p>\n<p><img data-src=\"js%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D.assets/image-20220506214501998.png\" alt=\"image-20220506214501998\" /></p>\n<p>需要注意的是，变量提升仅针对函数声明有效。函数表达式与箭头函数都不在此过程中，而是在程序执行过程（第二阶段）中执行定义的。</p>\n<p><strong>变量提升 (variable hoisting) ：<strong>变量和函数的声明并没有实际发生移动。只是在</strong>代码执行之前</strong>，先在词法环境中进行注册。</p>\n<h2 id=\"闭包工作原理\"><a class=\"anchor\" href=\"#闭包工作原理\">#</a> 闭包工作原理</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Ninja</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">var</span> feints <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getFeints</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> \t<span class=\"token keyword\">return</span> feints<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">feint</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> \tfeints<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">var</span> ninja1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Ninja</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ninja1<span class=\"token punctuation\">.</span>feints <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"And the private data is inaccessible to us.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>ninja1<span class=\"token punctuation\">.</span><span class=\"token function\">feint</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ninja1<span class=\"token punctuation\">.</span><span class=\"token function\">getFeints</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"We're able to access the internal feint count.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">var</span> ninja2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Ninja</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ninja2<span class=\"token punctuation\">.</span><span class=\"token function\">getFeints</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The second ninja object gets its own feints variable.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在调用 ninja2.getFeints 方法之前，JavaScript 引擎正在执行全局代码。我们的程序处于全局执行上下文状态，是执行栈里的唯一上下文。同时，唯一活跃的词法环境是全局环境，与全局执行上下文关联。</p>\n<p><strong>当调用 ninja2.getFeints () 时，我们调用的是 ninja2 对象的 getFeints 方法。由于每次调用函数时均会创建新的执行上下文，因此创建了新的 getFeints 执行环境并推入执行栈。这同时引起创建新的词法环境，词法环境通常用于保持跟踪函数中定义的变量。另外，getFeints 词法环境包含了 getFeints 函数被创建时所处的环境，当 ninja2 对象构建时，Ninja 环境是活跃的。</strong></p>\n<p>现在我们了解了试图获取 feints 变量时是如何工作的。首先，访问活跃的 getFeints 词法环境。因为在 getFeints 函数内部未定义任何变量，该词法环境是空的，找不到 feints 变量。接下来，在当前词法环境的外部环境进行查找 —— 本例中，当创建 ninja2 对象时，Ninja 环境处于活跃状态。Ninja 环境中具有 feints 变量的引用，完成搜索过程，就是那么简单。</p>\n<p>我们理解了在处理闭包时，执行上下文与词法环境所扮演的角色</p>\n<p><img data-src=\"js%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D.assets/image-20220506215543085.png\" alt=\"image-20220506215543085\" /></p>\n<h2 id=\"小结-3\"><a class=\"anchor\" href=\"#小结-3\">#</a> 小结</h2>\n<blockquote>\n<p>● 通过闭包可以访问创建闭包时所处环境中的全部变量。闭包为函数创建时所处</p>\n<p>​\t的作用域中的函数和变量，创建 “安全气泡”。通过这种的方式，即使创建函数</p>\n<p>​\t时所处的作用域已经消失，但是函数仍然能够获得执行时所需的全部内容。</p>\n<p>● 我们可以使用闭包的这些高级功能：</p>\n<p>​\t- 通过构造函数内的变量以及构造方法来模拟对象的私有属性。</p>\n<p>​\t- 处理回调函数，简化代码。</p>\n<p>● JavaScript 引擎通过执行上下文栈（调用栈）跟踪函数的执行。每次调用函数时，</p>\n<p>​\t都会创建新的函数执行上下文，并推入调用栈顶端。当函数执行完成后，对应</p>\n<p>​\t的执行上下文将从调用栈中推出。</p>\n<p>● JavaScript 引擎通过词法环境跟踪标识符（俗称作用域）。</p>\n<p>● 在 JavaScript 中，我们可以定义全局级别、函数级别甚至块级别的变量。</p>\n<p>● 可以使用关键字 var、let 与 const 定义变量：</p>\n<p>​\t- 关键字 var 定义距离最近的函数级变量或全局变量。</p>\n<p>​\t- 关键字 let 与 const 定义距离最近级别的变量，包括块级变量。块级变量在</p>\n<p>​\tES6 之前版本的 JavaScript 中是无法实现的。此外，通过关键字 const 允许</p>\n<p>​\t定义只能赋值一次的变量。</p>\n<p>● 闭包是 JavaScript 作用域规则的副作用。当函数创建时所在的作用域消失后，仍</p>\n<p>​\t然能够调用函数。</p>\n</blockquote>\n<h1 id=\"第六章-生成器和promise\"><a class=\"anchor\" href=\"#第六章-生成器和promise\">#</a> 第六章 生成器和 promise</h1>\n<h2 id=\"生成器\"><a class=\"anchor\" href=\"#生成器\">#</a> 生成器</h2>\n<p>从服务器中获取数据是一个长时间操作，而 JavaScript 依赖于单线程执行模型，所以一直到长时间的操作结束之前，UI 的渲染都会暂停。随后的应用都会无响应，用户会感到不满。我们可以用回调函数解决这个问题，这样每个任务结束后都调用回调函数，从而不会导致 UI 暂停。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">WeaponGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">yield</span> <span class=\"token string\">\"Katana\"</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">yield</span> <span class=\"token string\">\"Wakizashi\"</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> weaponsIterator <span class=\"token operator\">=</span> <span class=\"token function\">WeaponGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> result1 <span class=\"token operator\">=</span> weaponsIterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> result1 <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token operator\">&amp;&amp;</span> result1<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> <span class=\"token string\">\"Katana\"</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>result1<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre> <span class=\"token string\">\"Katana received!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> result2 <span class=\"token operator\">=</span> weaponsIterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> result2 <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre> <span class=\"token operator\">&amp;&amp;</span> result2<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> <span class=\"token string\">\"Wakizashi\"</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>result2<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre> <span class=\"token string\">\"Wakizashi received!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">const</span> result3 <span class=\"token operator\">=</span> weaponsIterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> result3 <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span> </pre></td></tr><tr><td data-num=\"18\"></td><td><pre> <span class=\"token operator\">&amp;&amp;</span> result3<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre> <span class=\"token operator\">&amp;&amp;</span> result3<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre> <span class=\"token string\">\"There are no more results!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>生成器（generator）函数能生成一组值的序列，但每个值的生成是基于每次请求。</p>\n<p>创建一个生成器函数非常简单：仅仅需要在关键字 function 后面加上一个星号（*）。这样一来生成器函数体内就能够使用新关键字 yield，从而生成独立的值。</p>\n<p>调用生成器后，就会<strong>创建一个迭代器（iterator）</strong>：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> weaponsIterator <span class=\"token operator\">=</span> <span class=\"token function\">WeaponGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>迭代器用于控制生成器的执行。迭代器对象暴露的最基本接口是 next 方法。这个方法可以用来向生成器请求一个值，从而控制生成器：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> result1 <span class=\"token operator\">=</span> weaponsIterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>当第三次执行 next 方法后生成器返回一个结果对象，属性 value 被置为 undefined，属性 done 被置为 true，表明它的工作已经完成了</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=</span> weaponsIterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这就是第一个生成器示例中 for-of 循环的原理。for-of 循环不过是对迭代器进行迭代的语法糖。</p>\n<p>用生成器生成 ID 序列</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>用生成器生成 ID 序列</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">IdGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">let</span> id <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">yield</span> <span class=\"token operator\">++</span>id<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> idIterator <span class=\"token operator\">=</span> <span class=\"token function\">IdGenerator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> ninja1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> id<span class=\"token operator\">:</span> idIterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> ninja2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> id<span class=\"token operator\">:</span> idIterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> ninja3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> id<span class=\"token operator\">:</span> idIterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ninja1<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"First ninja has id 1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ninja2<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Second ninja has id 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ninja3<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Third ninja has id 3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用迭代器遍历 DOM 树</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>使用迭代器遍历 DOM 树</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">DomTraversal</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">yield</span> element<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> element <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>firstElementChild<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">yield</span><span class=\"token operator\">*</span> <span class=\"token function\">DomTraversal</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre> element <span class=\"token operator\">=</span> element<span class=\"token punctuation\">.</span>nextElementSibling<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> subTree <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"subTree\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> element <span class=\"token keyword\">of</span> <span class=\"token function\">DomTraversal</span><span class=\"token punctuation\">(</span>subTree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre> <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>element <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> element<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"与生成器交互\"><a class=\"anchor\" href=\"#与生成器交互\">#</a> 与生成器交互</h3>\n<p>使用 next 方法向生成器发送值</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">NinjaGenerator</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">action</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">const</span> imposter <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Hattori \"</span> <span class=\"token operator\">+</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>imposter <span class=\"token operator\">===</span> <span class=\"token string\">\"Hanzo\"</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token string\">\"The generator has been infiltrated\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token keyword\">yield</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Yoshi (\"</span> <span class=\"token operator\">+</span> imposter <span class=\"token operator\">+</span> <span class=\"token string\">\") \"</span> <span class=\"token operator\">+</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> ninjaIterator <span class=\"token operator\">=</span> <span class=\"token function\">NinjaGenerator</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"skulk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> result1 <span class=\"token operator\">=</span> ninjaIterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> <span class=\"token string\">\"Hattori skulk\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Hattori is skulking\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> result2 <span class=\"token operator\">=</span> ninjaIterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hanzo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> \"<span class=\"token function\">Yoshi</span> <span class=\"token punctuation\">(</span>Ha</pre></td></tr></table></figure><p>我们通过 yield 语句从生成器中返回值，再使用迭代器的 next () 方法把值传回生成器。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> result2 <span class=\"token operator\">=</span> ninjaIterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hanzo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意：next 方法为等待中的 yield 表达式提供了值，所以，如果没有等待中的 yield 表达式，也就没有什么值能应用的。基于这个原因，我们无法通过第一次调用 next 方法来向生成器提供该值。 但记住，如果你需要为生成器提供一个初始值，你可以调用生成器自身，就像 NinjaGenerator (&quot;skulk&quot;)。</p>\n<h3 id=\"生成器内部构造\"><a class=\"anchor\" href=\"#生成器内部构造\">#</a> 生成器内部构造</h3>\n<p>在某种方面来说，生成器的工作更像是一个小程序，一个在状态中运动的状态机</p>\n<ul>\n<li>\n<p>挂起开始 —— 创建了一个生成器后，它最先以这种状态开始。其中的任何代码都未执行。</p>\n</li>\n<li>\n<p>执行 —— 生成器中的代码已执行。执行要么是刚开始，要么是从上次挂起的时候继续的。当生成器对应的迭代器调用了 next 方法，并且当前存在可执行的代码时，生成器都会转移到这个状态。</p>\n</li>\n<li>\n<p>挂起让渡 —— 当生成器在执行过程中遇到了一个 yield 表达式，它会创建一个包含着返回值的新对象，随后再挂起执行。生成器在这个状态暂停并等待继续 执行。</p>\n</li>\n<li>\n<p>完成 —— 在生成器执行期间，如果代码执行到 return 语句或者全部代码执行完毕，生成器就进入该状态。</p>\n</li>\n</ul>\n<p><img data-src=\"js%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D.assets/image-20220507150003674.png\" alt=\"image-20220507150003674\" /></p>\n<h3 id=\"通过执行上下文跟踪生成器函数\"><a class=\"anchor\" href=\"#通过执行上下文跟踪生成器函数\">#</a> 通过执行上下文跟踪生成器函数</h3>\n<p>由于正在执行的是全局代码，故执行上下文栈仅仅包含全局执行上下文，该上下文引用了当前标识符所在的全局环境。而 NinjaGenerator 则仅仅引用了一个函数，此时其他标识符的值都是 undefined。</p>\n<p><img data-src=\"js%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D.assets/image-20220507150211093.png\" alt=\"image-20220507150211093\" /></p>\n<p>当我们调用 NinjaGenerator 函数：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> ninjaIterator <span class=\"token operator\">=</span> <span class=\"token function\">NinjaGenerator</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"skulk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>由于迭代器是用来控制生成器的执行的，故而迭代器中保存着一个在它创建位置处的执行上下文。</p>\n<p>一般情况下，当程序从一个标准函数返回后，对应的执行环境上下文会从栈中弹出，并被完整地销毁。但在生成器中不是这样。</p>\n<p><img data-src=\"js%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D.assets/image-20220507150306016.png\" alt=\"image-20220507150306016\" /></p>\n<p>当调用迭代器的 next 方法时发生了另一件有趣的事：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> result1 <span class=\"token operator\">=</span> ninjaIterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>迭代器保持了一个对当前执行环境的引用，保证只要迭代器还需要它的时候它都存在。</p>\n<p>它会重新激活对应的执行上下文。在这个例子中，是 NinjaGenerator 上下文，并把该上下文放入栈的顶部，从它上次离开的地方继续执行</p>\n<p><img data-src=\"js%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D.assets/image-20220507150539776.png\" alt=\"image-20220507150539776\" /></p>\n<p>当生成器函数运行到这个位置的时候，又会发生一件有趣的事：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">yield</span> <span class=\"token string\">\"Hattori \"</span> <span class=\"token operator\">+</span> action</pre></td></tr></table></figure><p>发生了一件类似前面的事情：NinjaGenerator 上下文离开了调用栈，但由于 ninjaIterator 还持有着对它的引用，故而它并未被销毁。现在生成器挂起了，又在非阻塞的情况下移动到了挂起让渡状态。</p>\n<p><img data-src=\"js%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D.assets/image-20220507150426153.png\" alt=\"image-20220507150426153\" /></p>\n<p>我们深入挖掘生成器的工作原理后可以发现，生成器所有不可思议的特点实际都来源于一点，<strong>即当我们从生成器中取得控制权后，生成器的执行环境上下文一直是保存的，而不是像标准函数一样退出后销毁。</strong></p>\n<h2 id=\"promise\"><a class=\"anchor\" href=\"#promise\">#</a> Promise</h2>\n<p>使用 JavaScript 编写代码会大量的依赖异步计算，计算那些我们现在不需要但将来某时候可能需要的值。</p>\n<p><strong>promise 对象是对我们现在尚未得到但将来会得到值的占位符</strong>；它是对我们最终能够得知异步计算结果的一种保证。如果我们兑现了我们的承诺，那结果会得到一个值。如果发生了问题，结果则是一个错误，一个为什么不能交付的借口。（使用 promise 的一个最佳例子是从服务器获取数据：我们要承诺最终会拿到数据，但其实总有可能发生错误。）</p>\n<p>创建一个简单的 promise</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>创建一个简单的 promise </span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> ninjaPromise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hattori\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token comment\">//reject(\"An error resolving a promise!\"); </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>ninjaPromise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ninja</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre> <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ninja <span class=\"token operator\">===</span> <span class=\"token string\">\"Hattori\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"We were promised Hattori!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"There shouldn't be an error\"</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>创建一个 promise 需要传入一个函数。这个函数被称为执行函数（executor function），它包含两个参数  <code>resolve</code>  和  <code>reject</code> 。<strong>我们可以手动调用 resolve 让承诺兑现，也可以当错误发生时手动调用 reject。</strong></p>\n<h3 id=\"简单回调函数的问题\"><a class=\"anchor\" href=\"#简单回调函数的问题\">#</a> 简单回调函数的问题</h3>\n<p>使用异步代码的原因在于不希望在执行长时间任务的时候，应用程序的执行被阻塞（影响用户体验）。</p>\n<p>第一个问题：错误难以处理。</p>\n<p>第二个问题：执行连续步骤非常棘手。</p>\n<p>第三个问题：执行很多并行任务也很棘手。</p>\n<h3 id=\"深入研究promise\"><a class=\"anchor\" href=\"#深入研究promise\">#</a> 深入研究 Promise</h3>\n<p>一个 promise 对象从等待（pending）状态开始，此时我们对承诺的值一无所知。因此一个等待状态的 promise 对象也称为未实现（unresolved） 的 promise。</p>\n<p>在程序执行的过程中，如果 promise 的 resolve 函数被调用，promise 就会进入完成（fulfilled）状态，在该状态下我们能够成功获取到承诺的值。</p>\n<p>另一方面，如果 promise 的 reject 函数被调用，或者如果一个未处理的异常在 promise 调用的过程中发生了，promise 就会进入到拒绝状态，尽管在该状态下我们无法获取承诺的值，但我们至少知道了原因。</p>\n<p><img data-src=\"js%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D.assets/image-20220507152645117.png\" alt=\"image-20220507152645117\" /></p>\n<p>一旦某个 promise 进入到完成态或者拒绝态，它的状态都不能再切换了（一个 promise 对象无法从完成态再进入拒绝态或者相反）</p>\n<h3 id=\"拒绝promise\"><a class=\"anchor\" href=\"#拒绝promise\">#</a> 拒绝 Promise</h3>\n<p>拒绝一个 promise 有两种方式：显式拒绝，即在一个 promise 的执行函数中调用传入的 reject 方法；隐式拒绝，正处理一个 promise 的过程中抛出了一个异常。</p>\n<p>通过调用传入的 reject 函数可以显式拒绝 promise：reject (&quot;Explicitly reject a promise!&quot;)。如果 promise 被拒绝，则第二个回调函数 error 总会被调用。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Explicitly reject a promise!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>promise<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Happy path, won't be called!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre> <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">pass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Promise was also rejected\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>除此之外可以使用替代预发来处理拒绝 promise，通过使用内置的 catch 方法</p>\n<h3 id=\"promise案例\"><a class=\"anchor\" href=\"#promise案例\">#</a> Promise 案例</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>Promise案例</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      request<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      request<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        request<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        request<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data/ninjas.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ninjas</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ninjas <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ninjas obtained!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Shouldn't be here:\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>本例中有 3 个潜在的错误源：客户端和服务器之间的连接错误、服务器返回错误的数据（无效响应状态码），以及无效的 JSON 代码。但从使用了 getJSON 函数的角度来说，我们不必关心错误源的种类。我们只需提供一个回调函数，当一切正常工作且数据也正确返回时触发该回调函数，并提供另一个回调函数，当任何错误发生时触发该回调函数。这种方式能减轻开发者的工作量。</p>\n<h2 id=\"生成器和promise结合\"><a class=\"anchor\" href=\"#生成器和promise结合\">#</a> 生成器和 Promise 结合</h2>\n<p>async 的大概实现</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">const</span> ninjas <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data/ninjas.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">const</span> missions <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span>ninjas<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>missionsUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">const</span> missionDescription <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span>missions<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>detailsUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\">//Study the mission details </span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\">//Oh no, we weren't able to get the mission details </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token keyword\">async</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">generator</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">var</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">generator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">iteratorResult</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iteratorResult<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">const</span> iteratorValue <span class=\"token operator\">=</span> iteratorResult<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iteratorValue <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        iteratorValue<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">throw</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">throw</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>● 函数是第一类对象 —— 我们向 async 函数传入了一个参数，该参数也是函数。</p>\n<p>● 生成器函数 —— 用它的特性来挂起和恢复执行。</p>\n<p>● promise—— 帮我们处理异步代码。</p>\n<p>● 回调函数 —— 在 promise 对象上注册成功和失败的回调函数。</p>\n<p>● 箭头函数 —— 箭头函数的简洁适合用在回调函数上</p>\n<p>● 闭包 —— 在我们控制生成器的过程中，迭代器在 async 函数内被创建，随之我们</p>\n<p>在 promise 的回调函数内通过闭包来获取该迭代器</p>\n<h2 id=\"小结-4\"><a class=\"anchor\" href=\"#小结-4\">#</a> 小结</h2>\n<blockquote>\n<p>● 生成器是一种不会在同时输出所有值序列的函数，而是基于每次的请求生成值。</p>\n<p>● 不同于标准函数，生成器可以挂起和回复它们的执行状态。当生成器生成了一个值后，它将会在不阻塞主线程的基础上挂起执行，随后静静地等待下次请求。</p>\n<p>● 生成器通过在 function 后面加一个星号（*）来定义。在生成器函数体内，我们可以使用新的关键字 yield 来生成一个值并挂起生成器的执行。如果我们想让渡到另一个生成器中，可以使用 yield 操作符。</p>\n<p>● 在我们控制生成器的执行过程中，通过使用迭代器的 next 方法调用一个生成器，它能够创建一个迭代器对象。除此之外，我们还能够通过 next 函数向生成器中传入值。</p>\n<p>● promise 是计算结果值的一个占位符，它是对我们最终会得到异步计算结果的一个保证。promise 既可以成功也可以失败，一旦设定好了，就不能够有更多改变。</p>\n<p>● promise 显著地简化了我们处理异步代码的过程。通过使用 then 方法来生成 promise 链，我们就能轻易地处理异步时序依赖。并行执行多个异步任务也同样简单：仅使用 Promise.all 方法即可。</p>\n<p>● 通过将生成器和 promise 相结合我们能够使用同步代码来简化异步任务。</p>\n</blockquote>\n<h1 id=\"第七章-面向对象和原型\"><a class=\"anchor\" href=\"#第七章-面向对象和原型\">#</a> 第七章 面向对象和原型</h1>\n<h2 id=\"原型\"><a class=\"anchor\" href=\"#原型\">#</a> 原型</h2>\n<p>在 JavaScript 中，对象的原型属性是内置属性（使用标记 [[prototype]]），无法直接访问。相反，内置的方法 Object.setPrototypeOf 需要传入两个对象作为参数，并将第二个对象设置为第一个对象的原型。例如，执行语句 Object.setPrototypeOf (yoshi, hattori);， 将 yoshi 的原型设置为 hattori。</p>\n<p>当访问对象上不存在的属性时，将查询对象的原型。</p>\n<p><img data-src=\"js%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D.assets/image-20220507154511784.png\" alt=\"image-20220507154511784\" /></p>\n<p>需要特别强调的是，每个对象都可以有一个原型，每个对象的原型也可以拥有一个原型，以此类推，形成一个原型链。查找特定属性将会被委托在整个原型链上，只有当没有更多的原型可以进行查找时，才会停止查找。</p>\n<p>● 每一个函数都具有一个原型对象。</p>\n<p>● 每一个函数的原型都具有一个 constructor 属性，该属性指向函数本身。</p>\n<p>● constructor 对象的原型设置为新创建的对象的原型</p>\n<p><img data-src=\"js%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D.assets/image-20220507154607720.png\" alt=\"image-20220507154607720\" /></p>\n<p>我们创建的每一个函数都具有一个新的原型对象。当我们将一个函数作为构造函数使用时，构造器的原型对象将被设置为函数的原型</p>\n<p><img data-src=\"js%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D.assets/image-20220507154705602.png\" alt=\"image-20220507154705602\" /></p>\n<p>每个 ninja 实例都有自己的属性版本，这些属性在构造器内创建，并且均可访问相同的原型属性。</p>\n<p>只创建几个对象影响不大，但是如果创建大量的对象时就需要引起注意了。因为每个复制的方法都一样，创建大量的无意义复制文件，仅仅是占用内存而已。</p>\n<p>注意：回忆第 5 章中提到的闭包：在构造函数内部定义方法，使得我们可以模仿私有对象变量。如果我们需要私有对象，在构造函数内指定方法是唯一的解决方案</p>\n<p>对象与函数原型之间的引用关系是在对象创建时建立的。新创建的对象将引用新的原型。</p>\n<p>通过使用 constructor 属性，我们可以访问创建该对象时所用的函数。这个特性可以用于类型校验。</p>\n<p><img data-src=\"js%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D.assets/image-20220507154917216.png\" alt=\"image-20220507154917216\" /></p>\n<p>由于 constructor 属性仅仅是原始构造函数的引用，因此我们可以使用该属性创建新的 Ninja 对象。</p>\n<p>通过执行 instanceof 操作符，我们可以判定函数是否继承原型链上的对象功能。</p>\n<p>注意：强烈不建议使用，就是直接使用 Person 的原型对象作为 Ninja 的原型，如 Ninja.prototype = Person.prototype。这样做会导致在 Person 原型上所发生的所有变化都被同步到 Ninja 原型上（Person 原型与 Ninja 原型是同一个对象）。</p>\n<p>尽管 instanceof 操作符最常见的用途就是提供一个清晰的方法来确定一个实例是否是由一个特定的构造函数创建的，但并不完全是这样。事实上，它会检查操作符右边的函数的原型是否存在于操作符左边的对象的原型链上。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">dance</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Ninja</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Ninja</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ninja</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token string\">\"constructor\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre> enumerable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre> value<span class=\"token operator\">:</span> Ninja<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre> writable<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">var</span> ninja <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Ninja</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"小结-5\"><a class=\"anchor\" href=\"#小结-5\">#</a> 小结</h2>\n<blockquote>\n<p>● JavaScript 对象是属性名与属性值的集合。</p>\n<p>● JavaScript 使用原型。</p>\n<p>● 每个对象上都具有原型的引用，搜索指定的属性时，如果对象本身不存在该属性，则可以代理到原型上进行搜索。对象的原型也可以具有原型，以此类推，形成原型链。</p>\n<p>● 可以通过 Object.setPrototypeOf 方法定义对象的原型。</p>\n<p>● 原型与构造函数密切相关。每个函数都具有原型属性，该函数创建的对象的原型，就是函数本身。</p>\n<p>● 函数原型对象具有 constructor 属性，该属性指向函数本身。该函数创建的全部对象均访问该属性，constructor 属性还可用于判断对象是否是由指定的函数创建的。</p>\n<p>● 在 JavaScript 中，几乎所有的内容在运行时都会发生变化，包括对象的原型和函数的原型。</p>\n<p>● 如果我们希望 Ninja 构造函数创建的实例都可以 “继承”（更准确地说，可以访问）Person 构造函数的属性，那么，将 Ninja 构造函数的原型设置为 Person 类的实例。</p>\n<p>● 在 JavaScript 中，原型具有属性（如 configurable、enumerable、writable）。这些属性可通过内置的 Object.defineProperty 方法进行定义。</p>\n<p>● JavaScript ES6 引入关键字 class，使得我们可以更方便地实现模拟类。在底层仍然是使用原型实现的。</p>\n<p>● 使用 extends 可以更优雅地实现继承。</p>\n</blockquote>\n<h1 id=\"第八章-控制对象的访问\"><a class=\"anchor\" href=\"#第八章-控制对象的访问\">#</a> 第八章 控制对象的访问</h1>\n<h2 id=\"getter-和-setter\"><a class=\"anchor\" href=\"#getter-和-setter\">#</a> getter 和 setter</h2>\n<p>用于访问普通数据属性，同时可以计算属性值、校验属性值，或其他我们想做的事</p>\n<p>● 通过对象字面量定义，或在 ES6 的 class 中定义。</p>\n<p>● 通过使用内置的 Object.defineProperty 方法。</p>\n<p>对象字面量定义</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>对象字面量定义</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> ninjaCollection <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    ninjas<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Yoshi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Kuma\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hattori\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">get</span> <span class=\"token function\">firstNinja</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Getting firstNinja\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ninjas<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">set</span> <span class=\"token function\">firstNinja</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Setting firstNinja\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ninjas<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"js%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D.assets/image-20220517195515177.png\" alt=\"image-20220517195515177\" /></p>\n<p>可以通过原生的 getter 和 setter 设置标准属性，但是这些方法是在访问属性时立即执行的。</p>\n<p><img data-src=\"js%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D.assets/image-20220517195704382.png\" alt=\"image-20220517195704382\" /></p>\n<p>针对指定的属性不一定需要同时定义 getter 和 setter。例如，通常我们仅提供 getter。如果在某些情况下需要写入属性值，具体的行为取决于代码是在严格模式还是非严格模式。如果在非严格模式下，对仅有 getter 的属性赋值不起作用，JavaScript 引擎默默地忽略我们的请求。另一方面，如果在严格模式下，JavaScript 引擎将会抛出异常，表明我们试图将给一个仅有 getter 没有 setter 的属性赋值。</p>\n<p>通过 Object.defineProperty 定义 getter 和 setter</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>通过 Object.defineProperty 定义 getter 和 setter</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Ninja</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> _skillLevel <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'skillLevel'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The get method is called\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> _skillLevel<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The set method is called\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        _skillLevel <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">const</span> ninja <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Ninja</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"使用-getter-与-setter-校验属性值\"><a class=\"anchor\" href=\"#使用-getter-与-setter-校验属性值\">#</a> 使用 getter 与 setter 校验属性值</h3>\n<p>校验传入的值是否是整型。如果不是，则抛出异常</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Ninja</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> _skillLevel <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'skillLevel'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _skillLevel<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token parameter\">value</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isInteger</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Skill level should be a number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        _skillLevel <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">const</span> ninja <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Ninja</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这段代码显示了如何规避指定属性发生类型错误异常。当然，这会增加性能开销，但是，在 JavaScript 这种动态类型语言中，为了安全需要付出性能开销</p>\n<h3 id=\"使用-getter-与-setter-定义如何计算属性值\"><a class=\"anchor\" href=\"#使用-getter-与-setter-定义如何计算属性值\">#</a> 使用 getter 与 setter 定义如何计算属性值</h3>\n<p>除了能够控制指定对象属性的访问之外，getter 与 setter 还可以用于定义属性值的计算方法，即每次访问该属性时都会进行计算属性值。计算属性不会存储具体的值</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> shogun <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Yoshiaki\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    clan<span class=\"token operator\">:</span> <span class=\"token string\">\"Ashikaga\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">get</span> <span class=\"token function\">fullTitle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clan<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">set</span> <span class=\"token function\">fullTitle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">const</span> segments <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> segments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>clan <span class=\"token operator\">=</span> segments<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"proxy\"><a class=\"anchor\" href=\"#proxy\">#</a> Proxy</h2>\n<p>代理（proxy）是我们通过代理控制对另一个对象的访问。</p>\n<p>可以将代理理解为通用化的 setter 与 getter，区别是每个 setter 与 getter 仅能控制单个对象属性，而代理可用于对象交互的通用处理，包括调用对象的方法。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> emperor <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Komei\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> representative <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>emperor<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Reading \"</span> <span class=\"token operator\">+</span> key <span class=\"token operator\">+</span> <span class=\"token string\">\" through a proxy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">return</span> key <span class=\"token keyword\">in</span> target <span class=\"token operator\">?</span> target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token operator\">:</span> <span class=\"token string\">\"Don't bother the emperor!\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Writing \"</span> <span class=\"token operator\">+</span> key <span class=\"token operator\">+</span> <span class=\"token string\">\" through a proxy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      target<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们首先创建基础对象 emperor，该对象仅含有 name 属性。然后，通过使用内置的 Proxy 构造函数，将对象 emperor（通常称为目标对象）包装为代理对象 representative。同时向代理构造函数传入第 2 个参数，第 2 个参数是一个对象，该对象内定义了在对象执行特定行为时触发的函数</p>\n<p>若通过目标对象 emperor 直接访问 name 属性，则返回 Komei。但是，若通过代理对象访问，则隐式调用 get 方法。</p>\n<p>需要强调的是，激活代理方法与 getter 和 setter 是一致的。一旦执行交互（如访问代理对象属性），就会隐式调用对应的 get 方法，此时 JavaScript 引擎的执行过程与显示调用的普通函数类似。</p>\n<p><img data-src=\"js%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D.assets/image-20220518081529686.png\" alt=\"image-20220518081529686\" /></p>\n<p>在本例中，我们使用 get 与 set，还有许多其他的内置方法用于定义各种对象的行为（详见 <span class=\"exturl\" data-url=\"aHR0cDovL21uZy5iei9iYTU1JUVGJUJDJTg5JUUzJTgwJTgyJUU0JUJFJThCJUU1JUE2JTgyJUVGJUJDJTlB\">http://mng.bz/ba55）。例如：</span></p>\n<p>● 调用函数时激活 apply，使用 new 操作符时激活 construct。</p>\n<p>● 读取 / 写入属性时激活 get 与 set。</p>\n<p>● 执行 for-in 语句时激活 enumerate。</p>\n<p>● 获取和设置属性值时激活 getPrototypeOf 与 setPropertyOf。</p>\n<h3 id=\"使用代理记录日志\"><a class=\"anchor\" href=\"#使用代理记录日志\">#</a> 使用代理记录日志</h3>\n<p>对代理对象进行读写操作时，均会通过代理方法 report 输出记录日志</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">makeLoggable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> property</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Reading \"</span> <span class=\"token operator\">+</span> property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Writing value \"</span> <span class=\"token operator\">+</span> value <span class=\"token operator\">+</span> <span class=\"token string\">\" to \"</span> <span class=\"token operator\">+</span> property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        target<span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">let</span> ninja <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Yoshi\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  ninja <span class=\"token operator\">=</span> <span class=\"token function\">makeLoggable</span><span class=\"token punctuation\">(</span>ninja<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  ninja<span class=\"token punctuation\">.</span>weapon <span class=\"token operator\">=</span> <span class=\"token string\">\"sword\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  ninja<span class=\"token punctuation\">.</span>weapon</pre></td></tr></table></figure><h3 id=\"使用代理检测性能\"><a class=\"anchor\" href=\"#使用代理检测性能\">#</a> 使用代理检测性能</h3>\n<p>定义 apply 方法，当代理对象作为函数被调用时将会触发该 apply 方法的执行</p>\n<p>每当调用 isPrime 函数时，都会进入代理的 apply 方法，开启内置的 console.time 方法秒表计时，调用原始的 isPrime 函数，记录运行时间，最后返回 isPrime 调用的结果。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> number<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number <span class=\"token operator\">%</span> i <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  isPrime <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>isPrime<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function-variable function\">apply</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> thisArg<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"isPrime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">target</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>thisArg<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"isPrime\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">isPrime</span><span class=\"token punctuation\">(</span><span class=\"token number\">1299827</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"使用代理自动填充属性\"><a class=\"anchor\" href=\"#使用代理自动填充属性\">#</a> 使用代理自动填充属性</h3>\n<p>除了简化日志，代理还可用于自动填充属性。例如，假设需要抽象计算机的文件夹结构模型，一个文件夹对象既可以有属性，也可以是文件夹。现在假设你需要长路径的文件模型，如：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>rootFolder<span class=\"token punctuation\">.</span>ninjasDir<span class=\"token punctuation\">.</span>firstNinjaDir<span class=\"token punctuation\">.</span>ninjaFile <span class=\"token operator\">=</span> <span class=\"token string\">\"yoshi.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>为了创建这个长路径文件模型，你可能会按照以下思路设计代码：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> rootFolder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Folder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>rootFolder<span class=\"token punctuation\">.</span>ninjasDir <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Folder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>rootFolder<span class=\"token punctuation\">.</span>ninjasDir<span class=\"token punctuation\">.</span>firstNinjaDir <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Folder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>rootFolder<span class=\"token punctuation\">.</span>ninjasDir<span class=\"token punctuation\">.</span>firstNinjaDir<span class=\"token punctuation\">.</span>ninjaFile <span class=\"token operator\">=</span> <span class=\"token string\">\"yoshi.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>似乎有点不必要的烦琐，不是吗？这时就需要自动填充属性登场</p>\n<p>我们使用了代理，所以每次访问属性时，代理方法都被激活。如果访问的属性在文件夹对象存在，则直接返回对应的值；如果不存在，将会创建新的文件夹并赋值给该属性。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Folder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> property</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">report</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Reading \"</span> <span class=\"token operator\">+</span> property<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>property <span class=\"token keyword\">in</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          target<span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Folder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">const</span> rootFolder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Folder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    rootFolder<span class=\"token punctuation\">.</span>ninjasDir<span class=\"token punctuation\">.</span>firstNinjaDir<span class=\"token punctuation\">.</span>ninjaFile <span class=\"token operator\">=</span> <span class=\"token string\">\"yoshi.txt\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">pass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"An exception wasn’t raised\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"An exception has occurred\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"使用代理实现负数组索引\"><a class=\"anchor\" href=\"#使用代理实现负数组索引\">#</a> 使用代理实现负数组索引</h3>\n<p>首先，我们使用一元 + 操作符将属性名变成数值 (index = +index)。然后，如果索引值小于 0，则逆向访问数组；如果索引值大于 0 或等于 0，则使用标准的数组元素</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createNegativeArrayProxy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Expected an array'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token function-variable function\">get</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        index <span class=\"token operator\">=</span> <span class=\"token operator\">+</span>index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> target<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> index <span class=\"token operator\">:</span> index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token function-variable function\">set</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> val</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        index <span class=\"token operator\">=</span> <span class=\"token operator\">+</span>index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">[</span>index <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> target<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> index <span class=\"token operator\">:</span> index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>代理最重要的缺点：性能问题。</strong></p>\n<h2 id=\"小结-6\"><a class=\"anchor\" href=\"#小结-6\">#</a> 小结</h2>\n<blockquote>\n<p>● 我们可以使用 getter、setter 和代理监控对象。</p>\n<p>● 通过使用访问器方法（getter 和 setter），我们可以对对象属性的访问进行控制。</p>\n<p>​\t- 可以通过内置的 Object.defineProperty 方法定义访问属性，或在对象字面量中使用 \tget 和 set 语法或 ES6 的 class</p>\n<p>​\t- 当读取对象属性时会隐式调用 get 方法，当写入对象属性时隐式调用 set 方法。</p>\n<p>​\t- 使用 getter 方法可以定义计算属性，在每次读取对象属性时计算属性值；同理 setter \t方法可用于实现数据验证与日志记录。</p>\n<p>● 代理是 JavaScript ES6 中引入的，可用于控制对象。</p>\n<p>​\t- 代理可以定制对象交互时行为（例如，当读取属性或调用方法时）。</p>\n<p>​\t- 所有的交互行为都必须通过代理，指定的行为发生时会调用代理方法。</p>\n<p>● 使用代理可以优雅地实现以下内容。</p>\n<p>​\t- 日志记录。</p>\n<p>​\t- 性能测量。</p>\n<p>​\t- 数据校验。</p>\n<p>​\t- 自动填充对象属性（以此避免讨厌的 null 异常）。</p>\n<p>​\t- 数组负索引。</p>\n<p>● 代理效率不高，所以在需要执行多次的代码中需要谨慎使用。建议进行性能测试。</p>\n</blockquote>\n<h1 id=\"第九章-处理集合\"><a class=\"anchor\" href=\"#第九章-处理集合\">#</a> 第九章 处理集合</h1>\n<h2 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h2>\n<h3 id=\"在数组两端添加-删除元素\"><a class=\"anchor\" href=\"#在数组两端添加-删除元素\">#</a> 在数组两端添加、删除元素</h3>\n<p>● push：在数组末尾添加元素。</p>\n<p>● unshift: 在数组开头添加元素。</p>\n<p>● pop: 从数组末尾删除元素。</p>\n<p>● shift: 从数组开头删除元素</p>\n<p><img data-src=\"js%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D.assets/image-20220518211847201.png\" alt=\"image-20220518211847201\" /></p>\n<p>性能考虑：pop 和 push 与 shift 和 unshift</p>\n<p>pop 和 push 方法只影响数组最后一个元素：pop 移除最后一个元素，push 在数组末尾增加元素。shift 和 unshift 方法修改第一个元素，之后的每一个元素的索引都需要调整。因此，pop 和 push 方法比 shift 和 unshift 要快很多，非特殊情况不建议使用 shift 和 unshift 法。</p>\n<p>**splice 方法：**splice 具有两个参数：起始索引和需要移除的元素个数（这个参数如果不传，会一直删除元素直到数组末尾的元素）</p>\n<p>splice 方法返回被移除的元素数组。在本例，返回的数组只有一个元素：Kuma。使用 splice 方法，也可以实现在数组任意位置插入元素。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>removedItems <span class=\"token operator\">=</span> ninjas<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mochizuki\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Yoshi\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Momochi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//ninjas: [\"Yagyu\", \"Mochizuki\", \"Yoshi\", \"Momochi\"] </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//removedItems: [\"Hattori\", \"Fuma\"]</span></pre></td></tr></table></figure><h3 id=\"数组常用操作\"><a class=\"anchor\" href=\"#数组常用操作\">#</a> 数组常用操作</h3>\n<p>● 遍历数组。foreach</p>\n<p>● 基于现有的数组元素映射创建新数组。map</p>\n<p>● 验证数组元素是否匹配指定的条件。every some</p>\n<p>● 查找特定数组元素。find</p>\n<p>● 聚合数组，基于数组元素计算（例如，计算数组元素之和）。reduce</p>\n<p><strong>map</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> weapons <span class=\"token operator\">=</span> ninjas<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ninja</span> <span class=\"token operator\">=></span> ninja<span class=\"token punctuation\">.</span>weapon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>内置的 map 方法创建了一个全新的数组，然后遍历输入的数组。对输入数组的每个元素，在新建的数组上，都会基于回调函数的执行结果创建一个对应的元素。</p>\n<p><img data-src=\"js%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D.assets/image-20220518214137882.png\" alt=\"image-20220518214137882\" /></p>\n<p><strong>every</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> allNinjasAreNamed <span class=\"token operator\">=</span> ninjas<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ninja</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"name\"</span> <span class=\"token keyword\">in</span> ninja<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>内置的 every 方法接收回调函数作为参数，会对每个元素执行该回调函数。如果所有数组元素的回调结果都返回 true 时，every 方法将返回 true，否则返回 false</p>\n<p>内置的 some 方法接收回调函数作为参数。只要至少有一项元素的回调结果返回 true，some 方法就返回 true，否则返回 false</p>\n<p><img data-src=\"js%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D.assets/image-20220518214648736.png\" alt=\"image-20220518214648736\" /></p>\n<p><strong>some</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> someNinjasAreArmed <span class=\"token operator\">=</span> ninjas<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ninja</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"weapon\"</span> <span class=\"token keyword\">in</span> ninja<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"js%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D.assets/image-20220518221026352.png\" alt=\"image-20220518221026352\" /></p>\n<p><strong>find</strong></p>\n<p>使用内置的 find 方法，传入回调函数，针对集合中的每个元素调用回调函数，直到查找到目标元素。由回调函数返回 true。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ninjaWithKatana <span class=\"token operator\">=</span> ninjas<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ninja</span> <span class=\"token operator\">=></span> ninja<span class=\"token punctuation\">.</span>weapon <span class=\"token operator\">===</span> <span class=\"token string\">\"katana\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果数组中没有一项返回 true 的元素，则查找的结果是 undefined。</p>\n<p><strong>filter</strong></p>\n<p>如果需要查找满足条件的多个元素，可以使用 filter 方法，该方法返回满足条件的多个元素的数组。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> armedNinjas <span class=\"token operator\">=</span> ninjas<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ninja</span> <span class=\"token operator\">=></span> <span class=\"token string\">\"weapon\"</span> <span class=\"token keyword\">in</span> ninja<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"js%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D.assets/image-20220518222605637.png\" alt=\"image-20220518222605637\" /></p>\n<p><img data-src=\"js%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D.assets/image-20220518222617599.png\" alt=\"image-20220518222617599\" /></p>\n<p><strong>indexOf lastIndexOf findIndex</strong></p>\n<p>使用内置的 indexOf 方法查找特定元素的索引，传入目标元素作为参数：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ninjas<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Yoshi\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>有时在数组中具有多个指定的元素（如 Yoshi），查找最后一次 Yoshi 出现的索引，可以使用 lastIndexOf 方法：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ninjas<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Yoshi\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>最后，在大多数情况下，当不具有目标元素的引用时，可以使用 findIndex 方法查找索引：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> yoshiIndex <span class=\"token operator\">=</span> ninjas<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ninja</span> <span class=\"token operator\">=></span> ninja <span class=\"token operator\">===</span> <span class=\"token string\">\"Yoshi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>findIndex 方法接收回调函数，并返回第一个回调函数返回 true 的元素。本质上 findIndex 与 find 方法类似，唯一的区别是 find 方法返回元素本身，而 findIndex 方法返回元素的索引。</p>\n<p><strong>reduce</strong></p>\n<p>代码遍历集合中的所有元素进行求和。JavaScript 引擎也帮助我们解决此类问题：reduce 方法</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> sum <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">aggregated<span class=\"token punctuation\">,</span> number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> aggregated <span class=\"token operator\">+</span> number<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>reduce 方法接收初始值，对数组每个元素执行回调函数，回调函数接收上一次回调结果以及当前的数组元素作为参数。最后一次回调函数的结果作为 reduce 的结果。</p>\n<p><img data-src=\"js%E5%BF%8D%E8%80%85%E7%A7%98%E7%B1%8D.assets/image-20220518223121816.png\" alt=\"image-20220518223121816\" /></p>\n<p>复用 JavaScript 数组的方法：Array.prototype.push，而不是自己编写代码。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function-variable function\">add</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">elem</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"map\"><a class=\"anchor\" href=\"#map\">#</a> Map</h2>\n<p>这种集合，将 key 映射到指定的值上，在不同的编程语言中具有不同的名称，通常称为字典或 Map。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> ninjaIslandMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> ninja1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Yoshi\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> ninja2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Hattori\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> ninja3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">\"Kuma\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  ninjaIslandMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>ninja1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> homeIsland<span class=\"token operator\">:</span> <span class=\"token string\">\"Honshu\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  ninjaIslandMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>ninja2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> homeIsland<span class=\"token operator\">:</span> <span class=\"token string\">\"Hokkaido\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ninjaIslandMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ninja1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>homeIsland <span class=\"token operator\">===</span> <span class=\"token string\">\"Honshu\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token string\">\"The first mapping works\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ninjaIslandMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ninja2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>homeIsland <span class=\"token operator\">===</span> <span class=\"token string\">\"Hokkaido\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token string\">\"The second mapping works\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ninjaIslandMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ninja3<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token string\">\"There is no mapping for the third ninja!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ninjaIslandMap<span class=\"token punctuation\">.</span>size <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token string\">\"We've created two mappings\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ninjaIslandMap<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>ninja1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token operator\">&amp;&amp;</span> ninjaIslandMap<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>ninja2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token string\">\"We have mappings for the first two ninjas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ninjaIslandMap<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>ninja3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token string\">\"But not for the third ninja!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  ninjaIslandMap<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>ninja1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ninjaIslandMap<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>ninja1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token operator\">&amp;&amp;</span> ninjaIslandMap<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token string\">\"There's no first ninja mapping anymore!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  ninjaIslandMap<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ninjaIslandMap<span class=\"token punctuation\">.</span>size <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token string\">\"All mappings have been cleared\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在本例中，我们调用 Map 构造函数创建 map：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> ninjaIslandMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>然后，创建 3 个 ninja 对象，分别命名为 ninja1、ninja2、ninja3。使用 set 方法：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ninjaIslandMap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>ninja1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> homeIsland<span class=\"token operator\">:</span> <span class=\"token string\">\"Honshu\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>通过 get 方法获取前两个 ninja 对象的映射：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>ninjaIslandMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>ninja1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>homeIsland <span class=\"token operator\">===</span> <span class=\"token string\">\"Honshu\"</span><span class=\"token punctuation\">,</span>  <span class=\"token string\">\"The first mapping works\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>除了 get 和 set 方法之外，map 还具有 size 属性以及 has、delete 方法。size 属性告诉我们已经创建了多少个映射。在本例，我们创建了两个映射。</p>\n<p>has 方法用于判断指定的 key 是否存在：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ninjaIslandMap<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>ninja1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ninjaIslandMap<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>ninja3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span></pre></td></tr></table></figure><p>delete 方法可用于删除映射：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ninjaIslandMap<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>ninja1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>map 是键值对的集合，key 可以是任意类型的值，甚至可以是对象</p>\n",
            "tags": [
                "读书笔记",
                "读书笔记"
            ]
        },
        {
            "id": "https://1234cas.github.io/1234cas.github.io/Reading-minutes/%E8%AF%BB%E4%B9%A6%E5%88%97%E8%A1%A8/",
            "url": "https://1234cas.github.io/1234cas.github.io/Reading-minutes/%E8%AF%BB%E4%B9%A6%E5%88%97%E8%A1%A8/",
            "title": "读书列表",
            "date_published": "2023-05-15T02:40:05.224Z",
            "content_html": "<p>待买：《分成两半的子爵》《树上的男爵》《不存在的骑士》《美国讲稿》</p>\n<p>《我们的后人类未来：生物技术革命的后果》</p>\n<p>《梦瘾》</p>\n<p>送给小孩子：</p>\n<p>《大蛇》</p>\n<p>《小猫恰皮》</p>\n<p>《海边的卡夫卡》</p>\n<p>待读：</p>\n<p>《JavaScript 忍者秘籍（第 2 版）》</p>\n<p>《人类群星闪耀时》</p>\n<p>《算法第 4 版》</p>\n<p>《身份政治：对尊严与认同的渴求》</p>\n",
            "tags": [
                "读书笔记",
                "读书笔记"
            ]
        },
        {
            "id": "https://1234cas.github.io/1234cas.github.io/Other/%E4%BA%8C%E6%AC%A1%E5%85%83%E7%BD%91%E7%AB%99/",
            "url": "https://1234cas.github.io/1234cas.github.io/Other/%E4%BA%8C%E6%AC%A1%E5%85%83%E7%BD%91%E7%AB%99/",
            "title": "二次元网站",
            "date_published": "2023-05-15T02:40:05.209Z",
            "content_html": "<p>PixShaft 下载更新地址 https://github.com/CeuiLiSA/Pixiv-Shaft/releases<br />\npixez-flutter 下载更新地址 https://github.com/Notsfsssf/pixez-flutter/releases<br />\nPxView 下载更新地址 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FscGhhc3AvcHh2aWV3L3JlbGVhc2Vz\">https://github.com/alphasp/pxview/releases</span><br />\npivisionM 下载更新地址 https://t.me/PixivChannal<br />\nmaterixiv 下载更新地址 https://t.me/materixiv<br />\nFlexbooru 下载更新地址 https://github.com/flexbooru/<br />\nFlexbooru 订阅源 https://flexbooru.github.io/flexbooru/config.html<br />\nflexbooruFlex/AP 下载更新地址 https://github.com/flexbooru/flexbooru-ap<br />\nSankaku 下载更新地址 https://www.sankakucomplex.com/app/black.html<br />\nH-Viewer 下载更新地址 https://github.com/PureDark/H-Viewer/releases</p>\n<p>在线识图 Ai 仅次二次元图片使用<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hc2NpaTJkLm5ldA==\"> https://ascii2d.net</span><br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3NhdWNlbmFvLmNvbQ==\">http://saucenao.com</span><br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5pcWRiLm9yZw==\">http://www.iqdb.org</span></p>\n<p>图片放大清晰<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93YWlmdTJ4LnByby8=\"> https://waifu2x.pro/</span><br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3dhaWZ1MngudWRwLmpwL2luZGV4LnpoLVRXLmh0bWw=\">http://waifu2x.udp.jp/index.zh-TW.html</span></p>\n<p>以图搜番<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly90cmFjZS5tb2Uv\"> https://trace.moe/</span></p>\n<p>代理工具<br />\n v2ray<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudjJyYXkuY29tL2F3ZXNvbWUvdG9vbHMuaHRtbA==\">https://www.v2ray.com/awesome/tools.html</span><br />\nv2rayNGAndroid<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tLzJkdXN0L3YycmF5TkcvcmVsZWFzZXM=\">https://github.com/2dust/v2rayNG/releases</span><br />\nClashForAndroid<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0tyMzI4L0NsYXNoRm9yQW5kcm9pZC9yZWxlYXNlcw==\">https://github.com/Kr328/ClashForAndroid/releases</span><br />\nClashFor Pc Mac<br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0ZuZHJvaWQvY2xhc2hfZm9yX3dpbmRvd3NfcGtnL3JlbGVhc2Vz\">https://github.com/Fndroid/clash_for_windows_pkg/releases</span></p>\n",
            "tags": [
                "其他",
                "其他"
            ]
        },
        {
            "id": "https://1234cas.github.io/1234cas.github.io/Hexo/Hexo/",
            "url": "https://1234cas.github.io/1234cas.github.io/Hexo/Hexo/",
            "title": "Hexo",
            "date_published": "2023-05-15T02:40:05.209Z",
            "content_html": "<p>hexo clean g s d</p>\n<p>请注意：在_config.yml 文件修改后，一定要执行一下 hexo clean，不然 skip_render 可能不会生效。<br />\nskip_render 跳过渲染</p>\n<p>FATAL {<br />\nerr: Error: Spawn failed<br />\nat ChildProcess.<anonymous> (/usr/local/src/hexo/hanyubolg/node_modules/hexo-util/lib/spawn.js:51:21)<br />\nat ChildProcess.emit (events.js:376:20)<br />\nat Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) {<br />\ncode: 128<br />\n}<br />\n} Something's wrong. Maybe you can find the solution here: %s <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">https://hexo.io/docs/troubleshooting.html</span><br />\n 把.deploy_git 文件夹删了 然后 git config --global core.autocrlf false 再重新部署即可</p>\n",
            "tags": [
                "Hexo"
            ]
        },
        {
            "id": "https://1234cas.github.io/1234cas.github.io/Front-end/Imitation-notes/codingstartup/",
            "url": "https://1234cas.github.io/1234cas.github.io/Front-end/Imitation-notes/codingstartup/",
            "title": "codingstartup",
            "date_published": "2023-05-15T02:40:05.209Z",
            "content_html": "<h1 id=\"codingstartup\"><a class=\"anchor\" href=\"#codingstartup\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcGFjZS5iaWxpYmlsaS5jb20vNDUxMzY4ODQ4L3ZpZGVv\">codingstartup</span></h1>\n<h3 id=\"emphasis\"><a class=\"anchor\" href=\"#emphasis\">#</a> <strong>emphasis</strong></h3>\n<p><strong>这些个页面的基础布局要学习住</strong></p>\n<h4 id=\"cssapp-store-卡片展开效果\"><a class=\"anchor\" href=\"#cssapp-store-卡片展开效果\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3N0ZXZlbmxlaS9wZW4vcG95TkdOUA==\">[CSS] App Store 卡片展开效果</span></h4>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWJDNHkxdDdDWQ==\">https://www.bilibili.com/video/BV1bC4y1t7CY</span></p>\n<p>在 css 中加些注释 /* expanded classes below */ <strong>写代码要记得写注释</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>/* 没有display:block会导致img和h4之间有空缝 应该是行内导致的 */</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> .card img &#123;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      width: 100%;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      object-fit: cover;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      /* 没有display:block会 导致img和h4之间有空缝 应该是行内导致的 */</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      display: block;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      height: var(--img-height);</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      border-top-left-radius: 1rem;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      border-top-right-radius: 1rem;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    &#125;</pre></td></tr></table></figure><p>卡片离顶部距离减去页面滚动距离获得卡片离当前页面顶部的距离然后设置给 card 进行位移</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">.</span>card<span class=\"token punctuation\">.</span>expanded <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      transform<span class=\"token operator\">:</span> <span class=\"token function\">translateY</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>offsetTop<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token number\">480</span><span class=\"token operator\">/</span><span class=\"token number\">420</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      transform<span class=\"token operator\">-</span>origin<span class=\"token operator\">:</span> <span class=\"token number\">50</span><span class=\"token operator\">%</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      border<span class=\"token operator\">-</span>radius<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>card<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--offsetTop'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">.</span>offsetTop <span class=\"token operator\">-</span> window<span class=\"token punctuation\">.</span>pageYOffset<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">px</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"apple官网特效iphone-se-产品网页之-a13-晶片动画特效\"><a class=\"anchor\" href=\"#apple官网特效iphone-se-产品网页之-a13-晶片动画特效\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3N0ZXZlbmxlaS9wZW4vTFlwWmpSSw==\">[Apple 官网特效] iPhone SE 产品网页之 A13 晶片动画特效</span></h4>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUtmNHkxUzdEMQ==\">https://www.bilibili.com/video/BV1Kf4y1S7D1</span></p>\n<p>用 box-shadow 填充四周 然后随着页面滚动放大和降低芯片透明度</p>\n<pre><code>#the-chip &#123;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 100px;\n  height: 100px;\n  box-shadow: 0px 0px 0px 100vw black, 0px 0px 0px 30px black inset;\n  z-index: 10;\n  min-width: 100px;\n  min-height: 100px;\n  background-color: #000;\n&#125;\n</code></pre>\n<p>position：absolute 元素的默认宽度等于内容宽度所以 text-align 无效  设置 width: 100%; 即可</p>\n<pre><code>h1 &#123;\n  position: absolute;\n  top: 0;\n  left: 0;\n  color: #fff;\n  z-index: 20;\n  font-family: Helvetica;\n  font-size: 64px;\n  letter-spacing: -1px;\n  text-align: center;\n  width: 100%;\n  top: 50%;\n  transform: translate(0, -50%);\n  margin: 0;\n&#125;\n</code></pre>\n<p>通过 scrolled&lt;= 0.1 来控制每个部分在页面滚动中的所占的位置 h1 占 1/10</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>scrolled <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    $h1<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.1</span> <span class=\"token operator\">-</span> scrolled<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">0.1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    $h1<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>marginTop <span class=\"token operator\">=</span> scrolled <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token string\">'px'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    $h1<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>scrolled <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    $<span class=\"token constant\">A13</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>scrolled <span class=\"token operator\">-</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">0.1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    $<span class=\"token constant\">A13</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>scrolled <span class=\"token operator\">>=</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    $A13TextBg<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> scrolled<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">0.5</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    $theChip<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'transparent'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    $A13TextBg<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    $theChip<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'transparent'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>scrolled <span class=\"token operator\">>=</span> <span class=\"token number\">0.95</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    $theChip<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> scrolled<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">0.05</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    $theChip<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>opacity <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"apple官网特效iphone-se-产品网页之颜色切换特效\"><a class=\"anchor\" href=\"#apple官网特效iphone-se-产品网页之颜色切换特效\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3N0ZXZlbmxlaS9wZW4vcG9qUkpZcQ==\">[Apple 官网特效] iPhone SE 产品网页之颜色切换特效</span></h4>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXJwNHkxWDdoVA==\">https://www.bilibili.com/video/BV1rp4y1X7hT</span></p>\n<p>通过绝对定位 position:absolute 和遮罩 clip-path 来实现重叠切换</p>\n<pre><code>    section &#123;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      width: 100%;\n      height: 100vh;\n      position: absolute;\n      top: 0;\n      left: 0;\n    &#125;\n    section.white &#123;\n      background-color: var(--iphone-white-bg);\n      z-index: 2;\n      clip-path: inset(100% 0px 0px 0px);\n    &#125;\n</code></pre>\n<p>black 背景中的文字只有一行和下面没对齐 加 br 解决</p>\n<h4 id=\"bilibili-秋-头图景深对焦效果\"><a class=\"anchor\" href=\"#bilibili-秋-头图景深对焦效果\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3N0ZXZlbmxlaS9wZW4vTVdlTEV5eA==\">BiliBili 秋・头图景深对焦效果</span></h4>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMU5aNHkxRzdmTg==\">https://www.bilibili.com/video/BV1NZ4y1G7fN</span></p>\n<p>for of 循环</p>\n<p>object-fit: cover 没这个会导致页面大小随窗口大小动</p>\n<pre><code>for (let [index, image] of images.entries()) &#123;\n      offset *= 1.3\n\n      let blurValue = (Math.pow((index / images.length - percentage), 2) * blur)\n\n      image.style.setProperty('--offset', `$&#123;offset&#125;px`)\n      image.style.setProperty('--blur', `$&#123;blurValue&#125;px`)\n    &#125;\n</code></pre>\n<h4 id=\"bilibili-冬-头图日夜转换视差效果\"><a class=\"anchor\" href=\"#bilibili-冬-头图日夜转换视差效果\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3N0ZXZlbmxlaS9wZW4vVndLUXdOag==\">BiliBili 冬・头图日夜转换视差效果</span></h4>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMThoNDExZjdkWQ==\">https://www.bilibili.com/video/BV18h411f7dY</span></p>\n<p>能交给 CSS 的就交给 CSS</p>\n<p>header.style.setProPerty('--percentage',percentage)</p>\n<pre><code>    header .morning &#123;\n      z-index: 20;\n      opacity: calc(1 - (var(--percentage) - 0.25) / 0.25);\n    &#125;\n\n    header .afternoon &#123;\n      z-index: 10;\n      opacity: calc(1 - (var(--percentage) - 0.5) / 0.5);\n    &#125;\n</code></pre>\n<h4 id=\"apple官网特效iphone-12-页面卷动逐行滑入效果\"><a class=\"anchor\" href=\"#apple官网特效iphone-12-页面卷动逐行滑入效果\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3N0ZXZlbmxlaS9wZW4vRXh5ZFlxcA==\">[Apple 官网特效] iPhone 12 页面卷动逐行滑入效果</span></h4>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWZENHkxOTdOTA==\">https://www.bilibili.com/video/BV1fD4y197NL</span></p>\n<p>动画效果</p>\n<pre><code>      transform: scale(calc(1.8 - (0.8 * var(--progress)))) translateY(calc(-60px * (1 - var(--progress))));\n      opacity: var(--progress);\n</code></pre>\n<p>通过 start 和 end 设置一个区间 滚动到此区间就设置这个 row 的 progress</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> scrolled <span class=\"token operator\">=</span> html<span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">.</span>scrollHeight <span class=\"token operator\">-</span> html<span class=\"token punctuation\">.</span>clientHeight<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> rows<span class=\"token punctuation\">.</span>length</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">,</span> row<span class=\"token punctuation\">]</span> <span class=\"token keyword\">of</span> rows<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">let</span> start <span class=\"token operator\">=</span> total <span class=\"token operator\">*</span> index</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">let</span> end <span class=\"token operator\">=</span> total <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">let</span> progress <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>scrolled <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>progress <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> progress <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>progress <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> progress <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      row<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--progress'</span><span class=\"token punctuation\">,</span> progress<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"apple官网特效苹果homepod页面效果\"><a class=\"anchor\" href=\"#apple官网特效苹果homepod页面效果\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3N0ZXZlbmxlaS9wZW4vV05SanByYg==\">[Apple 官网特效] 苹果 HomePod 页面效果</span></h4>\n<p>背景图片的实现</p>\n<pre><code>.homepod-container &#123;\n  width: 100%;\n  height: 100vh;\n  position: sticky;\n  top: 0;\n  z-index: -1;\n&#125;\n\n.homepod &#123;\n  width: 654px;\n  height: 825px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n&#125;\n\n.homepod div &#123;\n  width: inherit;\n  height: inherit;\n  background-size: contain;\n  background-position: center center;\n  position: absolute;\n  top: 0;\n  left: 0;\n&#125;\n</code></pre>\n<p>滚动区间实现</p>\n<pre><code>const homepodSection = document.querySelector('.homepod-section')\n\nconst sectionHeight = homepodSection.getBoundingClientRect().height\n\nconst html = document.documentElement\n\ndocument.addEventListener('scroll', (e) =&gt; &#123;\n  let scrolled = html.scrollTop / (sectionHeight - html.clientHeight)\n  console.log(`scrolled: $&#123;scrolled&#125;`)\n  \n  homepodSection.style.setProperty('--part-1', calculateOpacity(0.05, 0.15, scrolled))\n  homepodSection.style.setProperty('--part-2', calculateOpacity(0.19, 0.23, scrolled))\n  homepodSection.style.setProperty('--part-3', calculateOpacity(0.35, 0.40, scrolled))\n  homepodSection.style.setProperty('--part-4', calculateOpacity(0.58, 0.63, scrolled))\n  homepodSection.style.setProperty('--ending', calculateOpacity(0.80, 0.85, scrolled))\n  \n&#125;)\n\nfunction calculateOpacity(start, end, percent) &#123;\n  if (percent - start &lt; 0) return 0\n  if (percent - end &gt; 0) return 1\n  \n  return (percent - start) / (end - start)\n&#125;\n</code></pre>\n<h3 id=\"htmlcss-动态显示表单栏位标题\"><a class=\"anchor\" href=\"#htmlcss-动态显示表单栏位标题\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3N0ZXZlbmxlaS9wZW4vRXhqS1pQSw==\">[HTML+CSS] 动态显示表单栏位标题</span></h3>\n<p><strong>:not (:placeholder-shown) 就是当栏位内有文字的状态</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>input<span class=\"token operator\">:</span><span class=\"token function\">not</span><span class=\"token punctuation\">(</span><span class=\"token operator\">:</span>focus<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">not</span><span class=\"token punctuation\">(</span><span class=\"token operator\">:</span>placeholder<span class=\"token operator\">-</span>shown<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"vuejs圆形线条倒数特效\"><a class=\"anchor\" href=\"#vuejs圆形线条倒数特效\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3N0ZXZlbmxlaS9wZW4vWFdiS2d3ag==\">[Vue.js] 圆形线条倒数特效</span></h3>\n<p><strong>circle  stroke-dashoffset 到路径开始的距离和 stroke-dasharray 虚线长度搭配实现动画</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>         <span class=\"token attr-name\">:width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>size<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>         <span class=\"token attr-name\">:height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>size<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>              <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>transparent<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>              <span class=\"token attr-name\">:stroke-width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stroke<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>              <span class=\"token attr-name\">stroke</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#270B58<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>              <span class=\"token attr-name\">:r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>radius<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>              <span class=\"token attr-name\">:cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>circleOffset<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>              <span class=\"token attr-name\">:cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>circleOffset<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>circle</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>              <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>circle<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>              <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>transparent<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>              <span class=\"token attr-name\">:stroke-width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stroke<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>              <span class=\"token attr-name\">stroke</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#F36F21<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>              <span class=\"token attr-name\">:r</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>radius<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>              <span class=\"token attr-name\">:cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>circleOffset<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>              <span class=\"token attr-name\">:cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>circleOffset<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>              <span class=\"token attr-name\">:stroke-dasharray</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>circumference<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>              <span class=\"token attr-name\">:stroke-dashoffset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>progress<span class=\"token punctuation\">\"</span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>              <span class=\"token attr-name\">stroke-linecap</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>round<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>circle</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>percentage <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>percentage <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>percentage <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>seconds <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token operator\">/</span> <span class=\"token number\">100</span> <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"css-聚光灯效果\"><a class=\"anchor\" href=\"#css-聚光灯效果\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3N0ZXZlbmxlaS9wZW4vWkVHdkxnRw==\">[CSS] 聚光灯效果</span></h3>\n<p><strong>data-spolight  content: attr(data-spotlight);</strong></p>\n<p>**clip-path: ellipse (100px 100px at 0% 50%);** 区域内的部分显示，区域外的隐藏</p>\n<p>**background-clip: text;** 区域内的部分显示，区域外的隐藏</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">data-spotlight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>CodingStartup!<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>CodingStartup<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token selector\">h1::after</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token function\">attr</span><span class=\"token punctuation\">(</span>data-spotlight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> transparent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t  <span class=\"token property\">-webkit-clip-path</span><span class=\"token punctuation\">:</span> <span class=\"token function\">ellipse</span><span class=\"token punctuation\">(</span>100px 100px at 0% 50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t  <span class=\"token property\">clip-path</span><span class=\"token punctuation\">:</span> <span class=\"token function\">ellipse</span><span class=\"token punctuation\">(</span>100px 100px at 0% 50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t  <span class=\"token property\">animation</span><span class=\"token punctuation\">:</span> spotlight 5s infinite<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>https://images.unsplash.com/photo-1579547621869-0ddb5f237392?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1500&amp;q=80<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t  <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> 150%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t  <span class=\"token property\">background-position</span><span class=\"token punctuation\">:</span> center center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t  <span class=\"token property\">-webkit-background-clip</span><span class=\"token punctuation\">:</span> text<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t  <span class=\"token property\">background-clip</span><span class=\"token punctuation\">:</span> text<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token atrule\"><span class=\"token rule\">@keyframes</span> spotlight</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token selector\">0% , 100%</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token property\">-webkit-clip-path</span><span class=\"token punctuation\">:</span> <span class=\"token function\">ellipse</span><span class=\"token punctuation\">(</span>100px 100px at 0% 50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token property\">clip-path</span><span class=\"token punctuation\">:</span> <span class=\"token function\">ellipse</span><span class=\"token punctuation\">(</span>100px 100px at 0% 50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token selector\">50%</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token property\">-webkit-clip-path</span><span class=\"token punctuation\">:</span> <span class=\"token function\">ellipse</span><span class=\"token punctuation\">(</span>100px 100px at 100% 50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token property\">clip-path</span><span class=\"token punctuation\">:</span> <span class=\"token function\">ellipse</span><span class=\"token punctuation\">(</span>100px 100px at 100% 50%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"js-实现可调侧栏\"><a class=\"anchor\" href=\"#js-实现可调侧栏\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3N0ZXZlbmxlaS9wZW4vRXhWalZZTQ==\">[JS] 实现可调侧栏</span></h3>\n<p><strong>在鼠标按下 mousedown 时绑定鼠标移动 mousemove 和鼠标抬起事件 mouseup</strong></p>\n<p><strong>在鼠标抬起 mouseup 时解绑 mousemove 和 mouseup</strong></p>\n<p><strong>MouseEvent 的属性 clientX 鼠标指针在  <code>点击元素</code> （DOM）中的 X，Y 坐标</strong></p>\n<p><strong>window.getComputedStyle (left) 类似 left.style 但是返回所有样式</strong></p>\n<p>1.getComputedStyle 是获取元素最终呈现的样式，style 只能拿到行内 style 属性设置的属性，对于类似于的空标签，style 拿不到属性，将返回空字符串。<br />\n2.getComputedStyle 只能获取元素样式，style 可以获取和更改。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>s</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>startWidth <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scalable_width'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">getScalableDivWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.scalabel'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> startWidth <span class=\"token operator\">+</span> <span class=\"token string\">'px'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.separator'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mousedown'</span><span class=\"token punctuation\">,</span> startDrag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">startDrag</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  startX <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>clientX</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  startWidth <span class=\"token operator\">=</span> <span class=\"token function\">getScalableDivWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mousemove'</span><span class=\"token punctuation\">,</span> onDrag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mouseup'</span><span class=\"token punctuation\">,</span> stopDrag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">onDrag</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">let</span> newWidth <span class=\"token operator\">=</span> startWidth <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>clientX <span class=\"token operator\">-</span> startX</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.scalable'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> newWidth <span class=\"token operator\">+</span> <span class=\"token string\">'px'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">stopDrag</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scalable_width'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getScalableDivWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mousemove'</span><span class=\"token punctuation\">,</span> onDrag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mouseup'</span><span class=\"token punctuation\">,</span> stopDrag<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getScalableDivWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span><span class=\"token function\">getComputedStyle</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.scalable'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"iphone-12-网页文字渐入效果\"><a class=\"anchor\" href=\"#iphone-12-网页文字渐入效果\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3N0ZXZlbmxlaS9wZW4vTVdlS1ZxUA==\">iPhone 12 网页文字渐入效果</span></h3>\n<p><strong>linear-gradient 渐变只有 background-image 能用</strong></p>\n<p>先把渐变分 3 部分 然后把渐变放大成 3 部分 然后通过调整 position 来实现渐入渐出</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>h1 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  font<span class=\"token operator\">-</span>family<span class=\"token operator\">:</span> Helvetica<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  margin<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  padding<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  font<span class=\"token operator\">-</span>size<span class=\"token operator\">:</span> <span class=\"token number\">48</span>px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  color<span class=\"token operator\">:</span> #fff<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  letter<span class=\"token operator\">-</span>spacing<span class=\"token operator\">:</span> <span class=\"token operator\">-</span><span class=\"token number\">0.3</span>px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  background<span class=\"token operator\">-</span>image<span class=\"token operator\">:</span> linear<span class=\"token operator\">-</span><span class=\"token function\">gradient</span><span class=\"token punctuation\">(</span><span class=\"token number\">75</span>deg<span class=\"token punctuation\">,</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">0</span><span class=\"token operator\">%</span><span class=\"token punctuation\">,</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token number\">33.33</span><span class=\"token operator\">%</span><span class=\"token punctuation\">,</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">66.67</span><span class=\"token operator\">%</span><span class=\"token punctuation\">,</span> <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  background<span class=\"token operator\">-</span>size<span class=\"token operator\">:</span> <span class=\"token number\">300</span><span class=\"token operator\">%</span> <span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  background<span class=\"token operator\">-</span>position<span class=\"token operator\">-</span>x<span class=\"token operator\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token operator\">%</span> <span class=\"token operator\">-</span> <span class=\"token keyword\">var</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>percentage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  background<span class=\"token operator\">-</span>clip<span class=\"token operator\">:</span> text<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token operator\">-</span>webkit<span class=\"token operator\">-</span>background<span class=\"token operator\">-</span>clip<span class=\"token operator\">:</span> text<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  color<span class=\"token operator\">:</span> transparent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>页面滚动百分比算法</strong></p>\n<p><strong>setProperty</strong> h1.style.<strong>setProperty</strong>('--percentage',  <code>$&#123;scrolled * 100&#125;%</code> )</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> h1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 就是滚动距离除以滚动条总长减去滚动条长度</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//document.documentElement 就是 html 和 body 是有差别的 总高度不同 HTML 大一些 同时 HTML 会被卷去一定部分</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">let</span> scrolled <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>scrollHeight <span class=\"token operator\">-</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>clientHeight<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token keyword\">let</span> scrolled <span class=\"token operator\">=</span> html<span class=\"token punctuation\">.</span>scrollTop <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">.</span>scrollHeight <span class=\"token operator\">-</span> html<span class=\"token punctuation\">.</span>clientHeight<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  h1<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span><span class=\"token function\">setProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'--percentage'</span><span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>scrolled <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">%</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"css-svg滑动放大表情符号效果\"><a class=\"anchor\" href=\"#css-svg滑动放大表情符号效果\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3N0ZXZlbmxlaS9wZW4vYkdlZGJFQg==\">[CSS、SVG] 滑动放大表情符号效果</span></h3>\n<p><code>Element.getBoundingClientRect()</code>  方法返回元素的大小及其相对于视口的位置。</p>\n<p>vscodeF12 可以快速跳转定义</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>svg</span> <span class=\"token attr-name\">viewBox</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0 0 300 162<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>filter</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mix<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>feGaussianBlur</span> <span class=\"token attr-name\">in</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SourceGraphic<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">result</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blur<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">stdDeviation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>5<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>feColorMatrix</span> <span class=\"token attr-name\">in</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>blur<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">mode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>matrix<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">values</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 60 -36<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>filter</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>g</span> <span class=\"token attr-name\">filter</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>url(#mix)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>rect</span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>300<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">y</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>25<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#e3e3e3<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>circle</span> <span class=\"token attr-name\">cx</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>40<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cy</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>75<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">fill</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#e3e3e3<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>pop<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>g</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>svg</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"画个澎湃的心心\"><a class=\"anchor\" href=\"#画个澎湃的心心\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3N0ZXZlbmxlaS9wZW4vWFdkdktqYQ==\">画个澎湃的心心</span></h3>\n<p>用 label 包住所有 通过 input:checked~+ 来控制特效</p>\n<p>阴影来实现特效   box-shadow: 0 -160px 0 red, 0 160px 0 red, -160px 0 0 red, 160px 0 0 red;</p>\n<p>transform 复合写法   transform: translate (-50%, -50%) rotate (45deg) scale (0);</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token selector\">span, span::after</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 24px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 24px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> transparent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">,</span> -50%<span class=\"token punctuation\">)</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 0 -160px 0 red<span class=\"token punctuation\">,</span> 0 160px 0 red<span class=\"token punctuation\">,</span> -160px 0 0 red<span class=\"token punctuation\">,</span> 160px 0 0 red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token selector\">span::after</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span> <span class=\"token function\">translate</span><span class=\"token punctuation\">(</span>-50%<span class=\"token punctuation\">,</span> -50%<span class=\"token punctuation\">)</span> <span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>45deg<span class=\"token punctuation\">)</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"promiseasync和await\"><a class=\"anchor\" href=\"#promiseasync和await\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUNENHkxbzdKQj9zcG1faWRfZnJvbT0zMzMuOTk5LjAuMA==\">Promise，async 和 await</span></h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">//js 原始写法</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">call1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">success</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1打电话中'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">connected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">disconnected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">connected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1电话接通了'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">disconnected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1对方暂时无法接听'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token function\">call1</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// 解耦</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">call2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">success<span class=\"token punctuation\">,</span> connectedCallback<span class=\"token punctuation\">,</span> disconnectedCallback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2打电话中'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> connectedCallback <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">connectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> disconnectedCallback <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">disconnectedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token function\">call2</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2电话接通了'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2对方暂时无法接听'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token comment\">// Promise</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">call3</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">success</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3打电话中'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>          <span class=\"token comment\">// 和上面一样就是简化了 成功就 resolve 调用 then 在 then 里面写成功回调</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>          <span class=\"token comment\">// 失败就 reject 调用 catch 在 catch 里面写失败回调 就是上面解耦写法换个名字</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token function\">call3</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3电话接通了'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3对方暂时无法接听'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  <span class=\"token comment\">//async 和 await</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">call4</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">success</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'4打电话中'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>          <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>          <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>      <span class=\"token keyword\">await</span> <span class=\"token function\">call4</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'4电话接通了'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'4对方暂时无法接听'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>  <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"svg显示隐藏密码手写svg动画\"><a class=\"anchor\" href=\"#svg显示隐藏密码手写svg动画\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3N0ZXZlbmxlaS9wZW4vWXpxUU5CSw==\">[SVG] 显示／隐藏密码｜手写 SVG 动画</span></h3>\n<p>在 style 中设置 svg 的 path 时要这样写</p>\n<pre><code>.hide .eye-top &#123;\n  d: path(&quot;M10,50 Q50,90 90,50&quot;);\n  transition-delay: .2s;\n&#125;\n</code></pre>\n<p><strong>背景渐变两色 背景大小设 200% 然后用定位来调位置</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>background-image: linear-gradient(0deg, #ffffff 0%, #ffffff 50%, #184098 50%, #184098 100%);</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  background-size: 100% 200%;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  background-position: 0% 100%;</pre></td></tr></table></figure><h3 id=\"敲代码的日与夜用css画画\"><a class=\"anchor\" href=\"#敲代码的日与夜用css画画\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3N0ZXZlbmxlaS9wZW4vcG95VmJCUQ==\">敲代码的日与夜｜用 CSS 画画</span></h3>\n<p>clip-path 裁剪 https://blog.csdn.net/weixin_44116302/article/details/98882841</p>\n<pre><code>inset()可以传入5个参数，分别对应top,right,bottom,left的裁剪位置,round radius（可选，圆角）\nclip-path: inset(0px 50% 0px 0px);\n</code></pre>\n<p>box-shadow 做月亮</p>\n<p>backdrop 模糊自己</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>box-shadow: 160px 180px 0px cyan;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>backdrop-filter: blur(100px);</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>-webkit-backdrop-filter: blur(100px);</pre></td></tr></table></figure><h3 id=\"css动态划线效果使用intersectionobserver\"><a class=\"anchor\" href=\"#css动态划线效果使用intersectionobserver\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3N0ZXZlbmxlaS9wZW4vWXp3Z295Tw==\">[CSS] 动态划线效果｜使用 IntersectionObserver</span></h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>background<span class=\"token operator\">-</span>color<span class=\"token operator\">:</span> transparent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  color<span class=\"token operator\">:</span> inherit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  background<span class=\"token operator\">-</span>image<span class=\"token operator\">:</span> linear<span class=\"token operator\">-</span><span class=\"token function\">gradient</span><span class=\"token punctuation\">(</span>#<span class=\"token number\">73</span>FFA0<span class=\"token punctuation\">,</span> #<span class=\"token number\">73</span>FFA0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  background<span class=\"token operator\">-</span>repeat<span class=\"token operator\">:</span> no<span class=\"token operator\">-</span>repeat<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  background<span class=\"token operator\">-</span>size<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token operator\">%</span> <span class=\"token number\">38</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  background<span class=\"token operator\">-</span>position<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token number\">100</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>mark<span class=\"token punctuation\">.</span>animate <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  animation<span class=\"token operator\">:</span> <span class=\"token number\">2</span>s highlight ease<span class=\"token operator\">-</span><span class=\"token keyword\">in</span><span class=\"token operator\">-</span>out forwards<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>@keyframes highlight <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  to <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    background<span class=\"token operator\">-</span>size<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token operator\">%</span> <span class=\"token number\">38</span><span class=\"token operator\">%</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>IntersectionObserver</strong> 接口  提供了一种异步观察目标元素与其祖先元素或顶级文档视窗交叉状态的方法。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0ludGVyc2VjdGlvbk9ic2VydmVyRW50cnk=\">https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserverEntry</span></p>\n<pre><code>let observer = new IntersectionObserver((entries, observer) =&gt; &#123;\n  entries.forEach(entry =&gt; &#123;\n    if (entry.isIntersecting) &#123;\n      entry.target.classList.add('animate')\n      observer.unobserve(entry.target)\n    &#125;\n  &#125;)\n&#125;)\n\ndocument.querySelectorAll('mark').forEach(mark =&gt; &#123;\n  observer.observe(mark)\n&#125;)\n</code></pre>\n<h3 id=\"github错误页的parallax\"><a class=\"anchor\" href=\"#github错误页的parallax\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3N0ZXZlbmxlaS9wZW4vUVd5QnFtcg==\">Github 错误页的 Parallax</span></h3>\n<p>transform 绑定事件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#parallax_wrapper'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mousemove'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> horizontal <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>clientX <span class=\"token operator\">/</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token function\">getComputedStyle</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#parallax_wrapper'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> vertical <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>clientY <span class=\"token operator\">/</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token function\">getComputedStyle</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#parallax_wrapper'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#parallax_bg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token function\">calculateTransform</span><span class=\"token punctuation\">(</span>horizontal<span class=\"token punctuation\">,</span> vertical<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#parallax_error_text'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token function\">calculateTransform</span><span class=\"token punctuation\">(</span>horizontal<span class=\"token punctuation\">,</span> vertical<span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#parallax_octocat'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token function\">calculateTransform</span><span class=\"token punctuation\">(</span>horizontal<span class=\"token punctuation\">,</span> vertical<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#parallax_sign'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">=</span> <span class=\"token function\">calculateTransform</span><span class=\"token punctuation\">(</span>horizontal<span class=\"token punctuation\">,</span> vertical<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 封装函数返回</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">calculateTransform</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">horizontal<span class=\"token punctuation\">,</span> vertical<span class=\"token punctuation\">,</span> offset</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">translate(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>horizontal <span class=\"token operator\">*</span> offset <span class=\"token operator\">/</span> <span class=\"token number\">0.5</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">px, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>vertical <span class=\"token operator\">*</span> offset <span class=\"token operator\">/</span> <span class=\"token number\">0.5</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">px)</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"vue-制作滚动计数器\"><a class=\"anchor\" href=\"#vue-制作滚动计数器\">#</a> [][Vue] <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3N0ZXZlbmxlaS9wZW4vQmFqZHlkQg==\">制作滚动计数器</span></h3>\n<p before:=\"\" isBefore,=\"\" after:=\"\" isAfter=\"\">vue 控制 class :class=&quot;</p>\n<p>js 可以设置 css 属性通过 data-* 自定义属性来实现 attr () 获取</p>\n<pre><code>&lt;span :class=&quot;&#123;before: isBefore, after: isAfter&#125;&quot; :data-before=&quot;countBefore&quot; :data-after=&quot;countAfter&quot;&gt;&#123;&#123; count &#125;&#125;&lt;/span&gt;\n \nspan::before &#123;\n  display: block;\n  content: attr(data-before);\n&#125;\nspan::after &#123;\n  display: block;\n  content: attr(data-after);\n&#125;\ndata:&#123;\n\tcountAfter: 10,\n\tcountBefore: 10\n&#125;\n</code></pre>\n<h3 id=\"vue制作新拟态计算器\"><a class=\"anchor\" href=\"#vue制作新拟态计算器\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3N0ZXZlbmxlaS9wZW4vRXhQYU1LWg==\">[Vue] 制作新拟态计算器</span></h3>\n<p>拟态化风格</p>\n<p>grid 布局</p>\n<pre><code>    .calculator &#123;\n      --button-width: 80px;\n      --button-height: 80px;\n\n      display: grid;\n      grid-template-areas: &quot;result result result result&quot;\n        &quot;ac plus-minus percent divide&quot;\n        &quot;number-7 number-8 number-9 multiply&quot;\n        &quot;number-4 number-5 number-6 subtract&quot;\n        &quot;number-1 number-2 number-3 add&quot;\n        &quot;number-0 number-0 dot equal&quot;;\n      grid-template-columns: repeat(4, var(--button-width));\n      grid-template-rows: repeat(6, var(--button-height));\n\n      box-shadow: -8px -8px 16px -10px rgba(255, 255, 255, 1), 8px 8px 16px -10px rgba(0, 0, 0, .15);\n      padding: 24px;\n      border-radius: 20px;\n    &#125;\n .calculator button:active &#123;\n      box-shadow: -4px -4px 10px -8px rgba(255, 255, 255, 1) inset, 4px 4px 10px -8px rgba(0, 0, 0, .3) inset;\n    &#125;\n</code></pre>\n<p>正则</p>\n<pre><code>let result = this.equation.replace(new RegExp('×', 'g'), '*').replace(new RegExp('÷', 'g'), '/')\n</code></pre>\n<h3 id=\"css-滾筒效果使用-scroll-snap\"><a class=\"anchor\" href=\"#css-滾筒效果使用-scroll-snap\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3N0ZXZlbmxlaS9wZW4vd3ZXbXpQVw==\">CSS 滾筒效果｜使用 Scroll Snap</span></h3>\n<p>scroll-snap 在元素滚动停止时，可以自动滚动停止在指定元素的指定位置</p>\n<p>pointer-events 属性可以指定在什么情况下元素可以成为鼠标事件 常用来取消</p>\n<pre><code>ul&#123;\nscroll-snap-type: y mandatory;\n&#125;\nli&#123;\nscroll-snap-align: start;\n&#125;\nmask&#123;\npointer-events: none;\n&#125;\n</code></pre>\n<h3 id=\"苹果官网新imac文字压缩效果\"><a class=\"anchor\" href=\"#苹果官网新imac文字压缩效果\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3N0ZXZlbmxlaS9wZW4vTFl4d2pRZQ==\">[苹果官网] 新 iMac 文字压缩效果</span></h3>\n<p>clamp 算式设置最大值中间值最小值</p>\n<pre><code>  h2.style.transform = `scale(clamp(0.15,$&#123;scale&#125;,1))`\n</code></pre>\n<p>他的写法感觉太复杂了</p>\n<h3 id=\"前端轮播字效果标题字常见特效\"><a class=\"anchor\" href=\"#前端轮播字效果标题字常见特效\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3N0ZXZlbmxlaS9wZW4vUndwUmd6eQ==\">[前端] 轮播字效果｜标题字常见特效</span></h3>\n<p>绝对定位和对类的控制</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.mask span &#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  display: block;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  box-sizing: border-box;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  position: absolute;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  top: 100px;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  padding-bottom: var(--offset);</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  background-size: 100% 100%;</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  -webkit-background-clip: text;</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  background-clip: text;</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  -webkit-text-fill-color: transparent;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  background-repeat: no-repeat;</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>.mask span[data-show] &#123;</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  transform: translateY(-100%);</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  transition: .5s transform ease-in-out;</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>.mask span[data-up] &#123;</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  transform: translateY(-200%);</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  transition: .5s transform ease-in-out;</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>&#125;</pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> show <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span[data-show]'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> next <span class=\"token operator\">=</span> show<span class=\"token punctuation\">.</span>nextElementSibling <span class=\"token operator\">||</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span:first-child'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> up <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'span[data-up]'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>up<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    up<span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-up'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  show<span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-show'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  show<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-up'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  next<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-show'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"前端制作一个拼图验证码\"><a class=\"anchor\" href=\"#前端制作一个拼图验证码\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3N0ZXZlbmxlaS9wZW4vV05wTG9KTw==\">[前端] 制作一个拼图验证码</span></h3>\n<h3 id=\"前后对比效果只用一行js\"><a class=\"anchor\" href=\"#前后对比效果只用一行js\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3N0ZXZlbmxlaS9wZW4vcG9QeFBSeg==\">“前后对比” 效果｜只用一行 JS</span></h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>comparison<span class=\"token punctuation\">\"</span></span> <span class=\"token special-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value css language-css\"><span class=\"token property\">--slide</span><span class=\"token punctuation\">:</span> 500</span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>range<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">min</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">max</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1000<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>500<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>slider<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">oninput</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>this.parentNode.style.setProperty(<span class=\"token punctuation\">'</span>--slide<span class=\"token punctuation\">'</span>, `$&#123;this.value&#125;`)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">body</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">min-height</span><span class=\"token punctuation\">:</span> 100vh<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">/* https://unsplash.com/photos/qiSGdBYWtSY */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token selector\">.comparison</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token property\">--image</span><span class=\"token punctuation\">:</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>https://images.unsplash.com/photo-1612142186636-3e65d8a446fe?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=2100&amp;q=80<span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token property\">--height</span><span class=\"token punctuation\">:</span> 400px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 600px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 0px 2px 6px <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> .15<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 4px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token selector\">.comparison::before,</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>.comparison::after</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token property\">content</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> block<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> inherit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> inherit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> cover<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token property\">background-image</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--image<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token selector\">.comparison::before</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token property\">filter</span><span class=\"token punctuation\">:</span> <span class=\"token function\">grayscale</span><span class=\"token punctuation\">(</span>100%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token selector\">.comparison::after</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token property\">clip-path</span><span class=\"token punctuation\">:</span> <span class=\"token function\">inset</span><span class=\"token punctuation\">(</span>0 0 0 <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--slide<span class=\"token punctuation\">)</span> / 10<span class=\"token punctuation\">)</span> * 1%<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token selector\">.slider</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  <span class=\"token property\">-webkit-appearance</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>  <span class=\"token property\">appearance</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>  <span class=\"token property\">outline</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> transparent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 100<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token selector\">.slider::-webkit-slider-thumb</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>  <span class=\"token property\">-webkit-appearance</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>  <span class=\"token property\">appearance</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token function\">var</span><span class=\"token punctuation\">(</span>--height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> #000<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>  <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> 0px 0px 6px <span class=\"token function\">rgba</span><span class=\"token punctuation\">(</span>0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> 0<span class=\"token punctuation\">,</span> .5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>  <span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> 2px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> ew-resize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"ins-story立体盒子翻转特效\"><a class=\"anchor\" href=\"#ins-story立体盒子翻转特效\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3N0ZXZlbmxlaS9wZW4vcUJqYU5CUQ==\">ins story 立体盒子翻转特效</span></h3>\n<h3 id=\"用前端向windows致敬\"><a class=\"anchor\" href=\"#用前端向windows致敬\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3N0ZXZlbmxlaS9wZW4vZ094eWpkTA==\">用前端向 Windows 致敬</span></h3>\n<h3 id=\"起码裸眼3d网页的陀螺仪\"><a class=\"anchor\" href=\"#起码裸眼3d网页的陀螺仪\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVF3NDExOTdXdg==\">[起码] 裸眼 3D？网页的陀螺仪</span></h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWNrNHkxQjdQdw==\">https://www.bilibili.com/video/BV1ck4y1B7Pw</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXZENHkxWDdjZQ==\">https://www.bilibili.com/video/BV1vD4y1X7ce</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXY1NDExRzd4Yw==\">https://www.bilibili.com/video/BV1v5411G7xc</span></p>\n<h2 id=\"other\"><a class=\"anchor\" href=\"#other\">#</a> other</h2>\n<h3 id=\"vue快好省\"><a class=\"anchor\" href=\"#vue快好省\">#</a> <a href=\"\">[Vue] 快好省</a></h3>\n<pre><code> &lt;div class=&quot;toggler&quot; :style=&quot;&#123; ...buttonSizeStyles &#125;&quot;&gt;\ncomputed: &#123;\n    buttonSizeStyles() &#123;\n      return &#123;\n        '--button-width': this.buttonWidth * this.size + 'px',\n        '--button-height': this.buttonHeight * this.size + 'px',\n        '--toggle-diameter': this.toggleDiameter * this.size + 'px',\n        '--toggle-wider': this.toggleWider * this.size + 'px',\n      &#125;\n    &#125;\n  &#125;,\n</code></pre>\n<h3 id=\"css-瀑布流效果\"><a class=\"anchor\" href=\"#css-瀑布流效果\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL3N0ZXZlbmxlaS9wZW4vdllOWmFaTg==\">[CSS] 瀑布流效果</span></h3>\n<p>Masonry.js Isotope.js</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>.item &#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  counter-increment: item-counter;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>.item::after &#123;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  content: counter(item-counter);</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&#125;</pre></td></tr></table></figure><h3 id=\"css当红框架你必须认识tailwind-css\"><a class=\"anchor\" href=\"#css当红框架你必须认识tailwind-css\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXZVNHkxaDdNMT9zcG1faWRfZnJvbT0zMzMuOTk5LjAuMA==\">[CSS] 当红框架！你必须认识 Tailwind CSS</span></h3>\n<p>vscode ，tailwindcss 代码提示插件：Tailwind CSS IntelliSense</p>\n<h3 id=\"tailwind-css-安装步骤vanilla-vue-react\"><a class=\"anchor\" href=\"#tailwind-css-安装步骤vanilla-vue-react\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWZwNHkxeDc1Mg==\">Tailwind CSS 安装步骤｜Vanilla Vue React</span></h3>\n<h3 id=\"11ty-静态网页生成工具jamstack\"><a class=\"anchor\" href=\"#11ty-静态网页生成工具jamstack\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXp3NDExOTdOTA==\">11ty 静态网页生成工具｜JAMStack</span></h3>\n<h3 id=\"为了苹果网站的特效写了个js库\"><a class=\"anchor\" href=\"#为了苹果网站的特效写了个js库\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMXhVNHkxYzd1cQ==\">为了苹果网站的特效，写了个 JS 库</span></h3>\n<h3 id=\"挖了个坑用css画iphone-13-pro\"><a class=\"anchor\" href=\"#挖了个坑用css画iphone-13-pro\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMTJ1NDExZjdUTQ==\">挖了个坑，用 CSS 画 iPhone 13 Pro</span></h3>\n<p>box-shadow inset 和 filter:blur</p>\n<h3 id=\"梦境成真我做了一个前端工具从买域名到上线express-js\"><a class=\"anchor\" href=\"#梦境成真我做了一个前端工具从买域名到上线express-js\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWh2NDExRzdpSA==\">[梦境成真] 我做了一个前端工具｜从买域名到上线｜Express JS</span></h3>\n<h3 id=\"netlify免费将reactvue项目上线前端自动化部署服务\"><a class=\"anchor\" href=\"#netlify免费将reactvue项目上线前端自动化部署服务\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWlrNHkxejdNWQ==\">[Netlify] 免费将 React/Vue 项目上线！前端自动化部署服务</span></h3>\n<h2 id=\"居中-窗口大小变动的影响\"><a class=\"anchor\" href=\"#居中-窗口大小变动的影响\">#</a> 居中 窗口大小变动的影响</h2>\n",
            "tags": [
                "前端",
                "模仿笔记",
                "前端",
                "模仿笔记"
            ]
        },
        {
            "id": "https://1234cas.github.io/1234cas.github.io/Front-end/Vue/vue-router/",
            "url": "https://1234cas.github.io/1234cas.github.io/Front-end/Vue/vue-router/",
            "title": "Vue router",
            "date_published": "2023-05-15T02:40:05.209Z",
            "content_html": "<h2 id=\"vue-router\"><a class=\"anchor\" href=\"#vue-router\">#</a> Vue Router</h2>\n<p><strong>官方例子 https://github.com/vuejs/vue-router/tree/dev/examples</strong></p>\n<h3 id=\"基础\"><a class=\"anchor\" href=\"#基础\">#</a> 基础</h3>\n<p><strong>基础的 router/index.js 文件</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> VueRouter <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 导入需要的路由组件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> Home <span class=\"token keyword\">from</span> <span class=\"token string\">'@/views/Home.vue'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>VueRouter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\troutes<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span> path<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> component<span class=\"token operator\">:</span> Home<span class=\"token punctuation\">,</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'home'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span> component<span class=\"token operator\">:</span> Home <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router</pre></td></tr></table></figure><p>必要的内容：</p>\n<ul>\n<li>引入 vue 和 vue-router</li>\n<li>使用 Vue.use (Router)</li>\n<li>配置路由</li>\n<li>对外开放 router</li>\n</ul>\n<p>可以通过 vue-cli 创建项目时一键生成</p>\n<p>还需要在 main.js 入口文件中导入挂载</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> router <span class=\"token keyword\">from</span> <span class=\"token string\">'./router'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  router<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token parameter\">h</span> <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>同样也可以一键生成</p>\n<hr />\n<h4 id=\"动态路由匹配\"><a class=\"anchor\" href=\"#动态路由匹配\">#</a> 动态路由匹配</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'/user/:id'</span><span class=\"token punctuation\">,</span> component<span class=\"token operator\">:</span> User <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>可以通过 <code>$route.params</code>  来获取</p>\n<p>注意，当使用路由参数时，例如从  <code>/user/foo</code>  导航到  <code>/user/bar</code> ，<strong>原来的组件实例会被复用</strong>。因为两个路由都渲染同个组件，比起销毁再创建，复用则显得更加高效。<strong>不过，这也意味着组件的生命周期钩子不会再被调用</strong>。</p>\n<p>可以使用 watch (监测变化)  <code>$route</code>  对象：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>watch<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token function\">$route</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 对路由变化作出响应...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>或者使用 beforeRouterUpadte 导航守卫</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">beforeRouteUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// react to route changes...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// don't forget to call next()</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果想匹配<strong>任意路径</strong>，我们可以使用通配符 ( <code>*</code> )：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'*'</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'user/*'</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>含有<em>通配符</em>的路由应该放在最后。路由  <code>&#123; path: '*' &#125;</code>  通常用于客户端 404 错误。</p>\n<p>当使用一个<em>通配符</em>时， <code>$route.params</code>  内会自动添加一个名为  <code>pathMatch</code>  参数。它包含了 URL 通过<em>通配符</em>被匹配的部分：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 给出一个路由 &#123;path: '/user-*'&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user-admin'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>pathMatch <span class=\"token comment\">// 'admin'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 给出一个路由 &#123;path: '*'&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/non-existing'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>pathMatch <span class=\"token comment\">// '/non-existing'</span></pre></td></tr></table></figure><p><strong> <code>vue-router</code>  使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL3RyZWUvdjEuNy4w\">path-to-regexp (opens new window)</span> 作为路径匹配引擎</strong></p>\n<p><strong>路由定义得越早，优先级就越高。</strong></p>\n<hr />\n<h4 id=\"嵌套路由子路由\"><a class=\"anchor\" href=\"#嵌套路由子路由\">#</a> 嵌套路由 (子路由)</h4>\n<p>在  <code>VueRouter</code>  的参数中使用  <code>children</code>  配置：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>routes<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tpath<span class=\"token operator\">:</span> <span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tcomponent<span class=\"token operator\">:</span> Home<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \tchildren<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    \t\t<span class=\"token punctuation\">&#123;</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'left'</span><span class=\"token punctuation\">,</span> component<span class=\"token operator\">:</span> Left <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">// 基于上面的配置，当我们访问 `/home` 时，不会渲染任何东西，得添加一个空的子路由</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    \t\t<span class=\"token punctuation\">&#123;</span> path<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> component<span class=\"token operator\">:</span> Home <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    \t<span class=\"token punctuation\">]</span>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure><p><strong>注意，以  <code>/</code>  开头的嵌套路径会被当作根路径，因此不要在子路由中用  <code>/</code> </strong></p>\n<p>可套娃</p>\n<hr />\n<h4 id=\"编程式导航\"><a class=\"anchor\" href=\"#编程式导航\">#</a> 编程式导航</h4>\n<p>除了使用  <code>&lt;router-link&gt;</code>  创建 a 标签来定义导航链接，我们还可以借助 router 的实例方法，通过编写代码来实现</p>\n<p><code>router.push(location, onComplete?, onAbort?)</code></p>\n<p>当你点击  <code>&lt;router-link&gt;</code>  时，这个方法会在内部调用，所以说，点击  <code>&lt;router-link :to=&quot;...&quot;&gt;</code>  等同于调用  <code>router.push(...)</code> 。</p>\n<table>\n<thead>\n<tr>\n<th>声明式</th>\n<th>编程式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;router-link :to=&quot;...&quot;&gt;</code></td>\n<td><code>router.push(...)</code></td>\n</tr>\n</tbody>\n</table>\n<p>该方法的参数可以是一个字符串路径，或者一个描述地址的对象。例如</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 字符串</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'home'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'home'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 命名的路由</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">,</span> params<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> userId<span class=\"token operator\">:</span> <span class=\"token string\">'123'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 带查询参数，变成 /register?plan=private</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'register'</span><span class=\"token punctuation\">,</span> query<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> plan<span class=\"token operator\">:</span> <span class=\"token string\">'private'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>注意：如果提供了 <code>path</code> ， <code>params</code>  会被忽略，而查询参数 <code>query</code>  不会</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> userId <span class=\"token operator\">=</span> <span class=\"token string\">'123'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">,</span> params<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> userId <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -> /user/123</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> path<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/user/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>userId<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -> /user/123</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 这里的 params 不生效</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'/user'</span><span class=\"token punctuation\">,</span> params<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> userId <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -> /user</span></pre></td></tr></table></figure><p>所以要么使用 <code>name</code>  加 params 要么 <code>path</code>  用模板字符串手写完整路径</p>\n<p>同样的规则也适用于  <code>router-link</code>  组件的  <code>to</code>  属性。</p>\n<p><code>router.replace(location, onComplete?, onAbort?)</code></p>\n<p>跟  <code>router.push</code>  很像，唯一的不同就是，它不会向 history 添加新记录，而是跟它的方法名一样 —— 替换掉当前的 history 记录。</p>\n<table>\n<thead>\n<tr>\n<th>声明式</th>\n<th>编程式</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&lt;router-link :to=&quot;...&quot; replace&gt;</code></td>\n<td><code>router.replace(...)</code></td>\n</tr>\n</tbody>\n</table>\n<p><code>router.go(n)</code></p>\n<p>这个方法的参数是一个整数，意思是在 history 记录中向前或者后退多少步，类似  <code>window.history.go(n)</code> 。</p>\n<hr />\n<h4 id=\"同级多视图\"><a class=\"anchor\" href=\"#同级多视图\">#</a> 同级多视图</h4>\n<p>用命名视图和命名路由一一对应 components 要带上 s</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-view</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>view one<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-view</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-view</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>view two<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>a<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-view</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-view</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>view three<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>b<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-view</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      path<span class=\"token operator\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      components<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> Foo<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        a<span class=\"token operator\">:</span> Bar<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        b<span class=\"token operator\">:</span> Baz</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><hr />\n<h4 id=\"重定向和别名\"><a class=\"anchor\" href=\"#重定向和别名\">#</a> 重定向和别名</h4>\n<p>当用户访问  <code>/a</code>  时，URL 将会被替换成  <code>/b</code> ，然后匹配路由为  <code>/b</code></p>\n<p>重定向也是通过  <code>routes</code>  配置来完成，下面例子是从  <code>/a</code>  重定向到  <code>/b</code> ：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'/a'</span><span class=\"token punctuation\">,</span> redirect<span class=\"token operator\">:</span> <span class=\"token string\">'/b'</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'/a'</span><span class=\"token punctuation\">,</span> redirect<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'foo'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'/a'</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">redirect</span><span class=\"token operator\">:</span> <span class=\"token parameter\">to</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\">// 方法接收 目标路由 作为参数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">//return 重定向的 字符串路径 / 路径对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>问题？这里加导航守卫是 a 生效还是 b 生效</p>\n<p><code>/a</code>  的别名是  <code>/b</code> ，意味着，当用户访问  <code>/b</code>  时，URL 会保持为  <code>/b</code> ，但是路由匹配则为  <code>/a</code> ，就像用户访问  <code>/a</code>  一样。即实际访问内容被替换问 <code>/a</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'/a'</span><span class=\"token punctuation\">,</span> component<span class=\"token operator\">:</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">,</span> alias<span class=\"token operator\">:</span> <span class=\"token string\">'/b'</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><hr />\n<h4 id=\"路由组件传参\"><a class=\"anchor\" href=\"#路由组件传参\">#</a> 路由组件传参</h4>\n<p>在组件中使用  <code>$route</code>  会使之与其对应路由形成高度耦合 (<span class=\"exturl\" data-url=\"aHR0cDovLyVFNSU4RCVCMyRyb3V0ZS5wYXJhbXMuaWQ=\">即 $route.params.id</span>)，从而使组件只能在某些特定的 URL 上使用，限制了其灵活性。</p>\n<p>使用  <code>props</code>  将组件和路由解耦：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'/user/:id'</span><span class=\"token punctuation\">,</span> component<span class=\"token operator\">:</span> User<span class=\"token punctuation\">,</span> props<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 对于包含命名视图的路由，你必须分别为每个命名视图添加 `props` 选项：</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      path<span class=\"token operator\">:</span> <span class=\"token string\">'/user/:id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      components<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> User<span class=\"token punctuation\">,</span> sidebar<span class=\"token operator\">:</span> Sidebar <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      props<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> sidebar<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h4 id=\"html5-history-模式\"><a class=\"anchor\" href=\"#html5-history-模式\">#</a> HTML5 History 模式</h4>\n<p><code>vue-router</code>  默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。</p>\n<p>如果不想要很丑的 hash，我们可以用路由的 <strong>history 模式</strong>，这种模式充分利用  <code>history.pushState</code>  API 来完成 URL 跳转而无须重新加载页面。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  mode<span class=\"token operator\">:</span> <span class=\"token string\">'history'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><hr />\n<h3 id=\"进阶\"><a class=\"anchor\" href=\"#进阶\">#</a> 进阶</h3>\n<h4 id=\"导航守卫\"><a class=\"anchor\" href=\"#导航守卫\">#</a> 导航守卫</h4>\n<p>记住<strong>参数或查询的改变并不会触发进入 / 离开的导航守卫</strong>。你可以通过<strong> watch <code>$route</code>  对象</strong>来应对这些变化，或使用  <code>beforeRouteUpdate</code>  的组件内守卫</p>\n<p><strong>全局前置守卫</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>当一个导航触发时，全局前置守卫按照创建顺序调用。守卫是异步解析执行，此时导航在所有守卫 resolve 完之前一直处于 <strong>等待中</strong>。即跳转会等到所有守卫结束后进行</p>\n<p>每个守卫方法接收三个参数：</p>\n<ul>\n<li>\n<p><strong> <code>to: Route</code> </strong>: 即将要进入的目标 路由对象</p>\n</li>\n<li>\n<p><strong> <code>from: Route</code> </strong>: 当前导航正要离开的路由</p>\n</li>\n<li>\n<p><strong> <code>next: Function</code> </strong>: 一定要调用该方法来 <strong>resolve</strong> 这个钩子。执行效果依赖  <code>next</code>  方法的调用参数。</p>\n<ul>\n<li><strong> <code>next()</code> </strong>: 进行管道中的下一个钩子，即放行。如果全部钩子执行完了，则导航的状态就是 <strong>confirmed</strong> (确认的)。</li>\n<li><strong> <code>next(false)</code> </strong>: 中断当前的导航，即不动。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按钮)，那么 URL 地址会重置到  <code>from</code>  路由对应的地址。</li>\n<li><strong> <code>next('/')</code>  或者  <code>next(&#123; path: '/' &#125;)</code> </strong>: 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向  <code>next</code>  传递任意位置对象，且允许设置诸如  <code>replace: true</code> 、 <code>name: 'home'</code>  之类的选项以及任何用在 <a href=\"https://router.vuejs.org/zh/api/#to\"> <code>router-link</code>  的  <code>to</code>  prop</a> 或 <a href=\"https://router.vuejs.org/zh/api/#router-push\"> <code>router.push</code> </a> 中的选项。</li>\n</ul>\n</li>\n</ul>\n<p><strong>注意，要确保 <code>next</code>  函数至少能够调用一次，也可以调用多次，但是只能在逻辑路径不重叠的情况下</strong></p>\n<p><strong>全局解析守卫</strong></p>\n<p><code>router.beforeResolve</code>  和  <code>router.beforeEach</code>  类似，区别是在导航被确认之前，<strong>同时在所有组件内守卫和异步路由组件被解析之后</strong>，解析守卫就被调用。即在跳转前最后调用</p>\n<p><strong>全局后置钩子</strong></p>\n<p>这些钩子不会接受  <code>next</code>  函数也不会改变导航本身：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>路由独享的守卫</strong></p>\n<p>可以在路由配置上直接定义  <code>beforeEnter</code>  守卫，和全局前置守卫的方法参数是一样的：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      path<span class=\"token operator\">:</span> <span class=\"token string\">'/foo'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      component<span class=\"token operator\">:</span> Foo<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token function-variable function\">beforeEnter</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>组件内的守卫</strong></p>\n<p>你可以在路由组件内直接定义以下路由导航守卫：</p>\n<ul>\n<li><code>beforeRouteEnter</code></li>\n<li><code>beforeRouteUpdate</code></li>\n<li><code>beforeRouteLeave</code></li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 和 data 同级</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token function\">beforeRouteEnter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 在渲染该组件的对应路由被 confirm 前调用</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 不！能！获取组件实例 `this`</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 因为当守卫执行前，组件实例还没被创建</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">beforeRouteUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 在当前路由改变，但是该组件被复用时调用</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 可以访问组件实例 `this`</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token function\">beforeRouteLeave</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 导航离开该组件的对应路由时调用</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 可以访问组件实例 `this`</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>完整的导航解析流程</strong></p>\n<ol>\n<li>导航被触发。</li>\n<li>在失活的组件里调用  <code>beforeRouteLeave</code>  守卫。</li>\n<li>调用全局的  <code>beforeEach</code>  守卫。</li>\n<li>在重用的组件里调用  <code>beforeRouteUpdate</code>  守卫。</li>\n<li>在路由配置里调用  <code>beforeEnter</code> 。</li>\n<li>解析异步路由组件。</li>\n<li>在被激活的组件里调用  <code>beforeRouteEnter</code> 。</li>\n<li>调用全局的  <code>beforeResolve</code>  守卫。</li>\n<li>导航被确认。</li>\n<li>调用全局的  <code>afterEach</code>  钩子。</li>\n<li>触发 DOM 更新。</li>\n<li>调用  <code>beforeRouteEnter</code>  守卫中传给  <code>next</code>  的回调函数，创建好的组件实例会作为回调函数的参数传入。</li>\n</ol>\n<hr />\n<h4 id=\"路由元信息\"><a class=\"anchor\" href=\"#路由元信息\">#</a> 路由元信息</h4>\n<p>定义路由的时候可以配置  <code>meta</code>  字段：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tpath<span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tcomponent<span class=\"token operator\">:</span> Bar<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// a meta field</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tmeta<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> requiresAuth<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>那么如何访问这个  <code>meta</code>  字段呢？</p>\n<p>一个路由匹配到的所有路由记录会暴露为  <code>$route</code>  对象 (还有在导航守卫中的路由对象) 的  <code>$route.matched</code>  数组。因此，我们需要遍历  <code>$route.matched</code>  来检查路由记录中的  <code>meta</code>  字段。 <code>$route.matched.some(record =&gt; record.meta.requiresAuth)</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">.</span>matched<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">record</span> <span class=\"token operator\">=></span> record<span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>requiresAuth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// this route requires auth, check if logged in</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// if not, redirect to login page.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>auth<span class=\"token punctuation\">.</span><span class=\"token function\">loggedIn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        path<span class=\"token operator\">:</span> <span class=\"token string\">'/login'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        query<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> redirect<span class=\"token operator\">:</span> to<span class=\"token punctuation\">.</span>fullPath <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 确保一定要调用 next ()</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><hr />\n<h4 id=\"过渡动画\"><a class=\"anchor\" href=\"#过渡动画\">#</a> 过渡动画</h4>\n<p><code>&lt;router-view&gt;</code>  是基本的动态组件，所以我们可以用  <code>&lt;transition&gt;</code>  组件给它添加一些过渡效果：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transition</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-view</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-view</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>transition</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>单个路由的过渡</strong></p>\n<p>上面的用法会给所有路由设置一样的过渡效果，如果你想让每个路由组件有各自的过渡效果，可以在各路由组件内使用  <code>&lt;transition&gt;</code>  并设置不同的 name</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>transition name<span class=\"token operator\">=</span><span class=\"token string\">\"slide\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"foo\"</span><span class=\"token operator\">></span><span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>transition<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>transition name<span class=\"token operator\">=</span><span class=\"token string\">\"fade\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"bar\"</span><span class=\"token operator\">></span><span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>transition<span class=\"token operator\">></span></pre></td></tr></table></figure><p><strong>基于路由的动态过渡</strong></p>\n<p>还可以基于当前路由与目标路由的变化关系，动态设置过渡效果：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 使用动态的 transition name --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>transition</span> <span class=\"token attr-name\">:name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>transitionName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>router-view</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>router-view</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>transition</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 接着在父组件内</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//watch $route 决定使用哪种过渡</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>watch<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token string\">'$route'</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> toDepth <span class=\"token operator\">=</span> to<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">const</span> fromDepth <span class=\"token operator\">=</span> from<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>transitionName <span class=\"token operator\">=</span> toDepth <span class=\"token operator\">&lt;</span> fromDepth <span class=\"token operator\">?</span> <span class=\"token string\">'slide-right'</span> <span class=\"token operator\">:</span> <span class=\"token string\">'slide-left'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h4 id=\"数据获取\"><a class=\"anchor\" href=\"#数据获取\">#</a> 数据获取</h4>\n<p>在进入某个路由后，需要从服务器获取数据。例如，在渲染用户信息时，你需要从服务器获取用户的数据。我们可以通过两种方式来实现：</p>\n<ul>\n<li><strong>导航完成之后获取</strong>：先完成导航，然后在接下来的组件生命周期钩子中获取数据。在数据获取期间显示 “加载中” 之类的指示。</li>\n<li><strong>导航完成之前获取</strong>：导航完成前，在路由进入的守卫中获取数据，在数据获取成功后执行导航。</li>\n</ul>\n<p><strong>导航完成后获取数据</strong></p>\n<p>当使用这种方式时，会马上导航和渲染组件，然后在组件的  <code>created</code>  钩子中获取数据。这让我们有机会在数据获取期间展示一个 loading 状态，还可以在不同视图间展示不同的 loading 状态。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      loading<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      post<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      error<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">created</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 组件创建完后获取数据，</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 此时 data 已经被 observed 了</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  watch<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 如果路由有变化，会再次执行该方法</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token string\">'$route'</span><span class=\"token operator\">:</span> <span class=\"token string\">'fetchData'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">fetchData</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>error <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>post <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loading <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token comment\">// replace getPost with your data fetching util / API wrapper</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token function\">getPost</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loading <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>error <span class=\"token operator\">=</span> err<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>post <span class=\"token operator\">=</span> post</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>在导航完成前获取数据</strong></p>\n<p>通过这种方式，我们在导航转入新的路由前获取数据，会在原页面短暂停留。我们可以在接下来的组件的  <code>beforeRouteEnter</code>  守卫中获取数据，当数据获取成功后只调用  <code>next</code>  方法。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">data</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      post<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      error<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">beforeRouteEnter</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">getPost</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">vm</span> <span class=\"token operator\">=></span> vm<span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> post<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// 路由改变前，组件就已经渲染完了</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">// 逻辑稍稍不同</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token function\">beforeRouteUpdate</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>post <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">getPost</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setData</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> post<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token function\">setData</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> post</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>error <span class=\"token operator\">=</span> err<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>post <span class=\"token operator\">=</span> post</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在为后面的视图获取数据时，用户会停留在当前的界面，因此建议在数据获取期间，显示一些进度条或者别的指示。如果数据获取失败，同样有必要展示一些全局的错误提醒。</p>\n<hr />\n<h4 id=\"滚动行为不明白\"><a class=\"anchor\" href=\"#滚动行为不明白\">#</a> 滚动行为（不明白）</h4>\n<p>使用前端路由，当切换到新路由时，想要页面滚到顶部，或者是保持原先的滚动位置，就像重新加载页面那样。  <code>vue-router</code>  能做到，而且更好，它让你可以自定义路由切换时页面如何滚动。</p>\n<p><strong>注意：这个功能只在支持  <code>history.pushState</code>  的浏览器中可用。</strong></p>\n<p>当创建一个 Router 实例，你可以提供一个  <code>scrollBehavior</code>  方法：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">scrollBehavior</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> savedPosition</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//return 期望滚动到哪个的位置</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>scrollBehavior</code>  方法接收  <code>to</code>  和  <code>from</code>  路由对象。第三个参数  <code>savedPosition</code>  当且仅当  <code>popstate</code>  导航 (通过浏览器的 前进 / 后退 按钮触发) 时才可用。</p>\n<p>这个方法返回滚动位置的对象信息，长这样：</p>\n<ul>\n<li><code>&#123; x: number, y: number &#125;</code></li>\n<li><code>&#123; selector: string, offset? : &#123; x: number, y: number &#125;&#125;</code>  (offset 只在 2.6.0+ 支持)</li>\n</ul>\n<p>如果返回一个 falsy (译者注：falsy 不是  <code>false</code> ，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9HbG9zc2FyeS9GYWxzeQ==\">参考这里 (opens new window)</span>) 的值，或者是一个空对象，那么不会发生滚动。</p>\n<p>举例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">scrollBehavior</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> savedPosition</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>对于所有路由导航，简单地让页面滚动到顶部。</p>\n<p>返回  <code>savedPosition</code> ，在按下 后退 / 前进 按钮时，就会像浏览器的原生表现那样：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">scrollBehavior</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> savedPosition</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>savedPosition<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> savedPosition</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span> x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果你要模拟 “滚动到锚点” 的行为：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">scrollBehavior</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> savedPosition</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      selector<span class=\"token operator\">:</span> to<span class=\"token punctuation\">.</span>hash</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>查看完整例子请<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1yb3V0ZXIvYmxvYi9kZXYvZXhhbXBsZXMvc2Nyb2xsLWJlaGF2aW9yL2FwcC5qcw==\">移步这里</span></p>\n<p><strong>异步滚动</strong></p>\n<blockquote>\n<p>2.8.0 新增</p>\n</blockquote>\n<p>你也可以返回一个 Promise 来得出预期的位置描述：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">scrollBehavior</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> savedPosition</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> x<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>将其挂载到从页面级别的过渡组件的事件上，令其滚动行为和页面过渡一起良好运行是可能的。但是考虑到用例的多样性和复杂性，我们仅提供这个原始的接口，以支持不同用户场景的具体实现。</p>\n<p><strong>平滑滚动</strong></p>\n<p>只需将  <code>behavior</code>  选项添加到  <code>scrollBehavior</code>  内部返回的对象中，就可以为<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1Njcm9sbFRvT3B0aW9ucy9iZWhhdmlvcg==\">支持它的浏览器 (opens new window)</span> 启用原生平滑滚动：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">scrollBehavior</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> savedPosition</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      selector<span class=\"token operator\">:</span> to<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      behavior<span class=\"token operator\">:</span> <span class=\"token string\">'smooth'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h4 id=\"路由懒加载不明白\"><a class=\"anchor\" href=\"#路由懒加载不明白\">#</a> 路由懒加载（不明白）</h4>\n<p>当打包构建应用时，JavaScript 包会变得非常大，影响页面加载。如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了</p>\n<pre><code>// 将\n// import UserDetails from './views/UserDetails'\n// 替换成\nconst UserDetails = () =&gt; import('./views/UserDetails')\n\nconst router = createRouter(&#123;\n  // ...\n  routes: [&#123; path: '/users/:id', component: UserDetails &#125;],\n&#125;)\n</code></pre>\n<p>结合 Vue 的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbi52dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy1keW5hbWljLWFzeW5jLmh0bWwjJUU1JUJDJTgyJUU2JUFEJUE1JUU3JUJCJTg0JUU0JUJCJUI2\">异步组件 (opens new window)</span> 和 Webpack 的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2Mud2VicGFjay1jaGluYS5vcmcvZ3VpZGVzL2NvZGUtc3BsaXR0aW5nLWFzeW5jLyNyZXF1aXJlLWVuc3VyZS0v\">代码分割功能 (opens new window)</span>，轻松实现路由组件的懒加载。</p>\n<p>首先，可以将异步组件定义为返回一个 Promise 的工厂函数 (该函数返回的 Promise 应该 resolve 组件本身)：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/* 组件定义对象 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>第二，在 Webpack 2 中，我们可以使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZHluYW1pYy1pbXBvcnQ=\">动态 import (opens new window)</span> 语法来定义代码分块点 (split point)：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./Foo.vue'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 返回 Promise</span></pre></td></tr></table></figure><p>结合这两者，这就是如何定义一个能够被 Webpack 自动代码分割的异步组件。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./Foo.vue'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在路由配置中什么都不需要改变，只需要像往常一样使用  <code>Foo</code> ：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  routes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'/foo'</span><span class=\"token punctuation\">,</span> component<span class=\"token operator\">:</span> Foo <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>把组件按组分块</strong></p>\n<p>有时候我们想把某个路由下的所有组件都打包在同个异步块 (chunk) 中。只需要使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9ndWlkZXMvY29kZS1zcGxpdHRpbmctcmVxdWlyZS8jY2h1bmtuYW1l\">命名 chunk (opens new window)</span>，一个特殊的注释语法来提供 chunk name (需要 Webpack&gt; 2.4)。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* webpackChunkName: \"group-foo\" */</span> <span class=\"token string\">'./Foo.vue'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Bar</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* webpackChunkName: \"group-foo\" */</span> <span class=\"token string\">'./Bar.vue'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Baz</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token comment\">/* webpackChunkName: \"group-foo\" */</span> <span class=\"token string\">'./Baz.vue'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>Webpack 会将任何一个异步模块与相同的块名称组合到相同的异步块中。</p>\n<p>主要参考 Vue Router 官方文档</p>\n",
            "tags": [
                "前端",
                "Vue",
                "前端",
                "Vue"
            ]
        },
        {
            "id": "https://1234cas.github.io/1234cas.github.io/Front-end/Vue/vuex/",
            "url": "https://1234cas.github.io/1234cas.github.io/Front-end/Vue/vuex/",
            "title": "vuex",
            "date_published": "2023-05-15T02:40:05.209Z",
            "content_html": "<h1 id=\"vuex\"><a class=\"anchor\" href=\"#vuex\">#</a> Vuex</h1>\n<p>vuex 是 vue 的<strong>状态管理模式</strong>。集中管理数据。</p>\n<p>为此， <code>Vue</code>  为这些被多个组件频繁使用的值提供了一个统一管理的工具 —— <code>Vuex</code> 。</p>\n<h2 id=\"一-内容\"><a class=\"anchor\" href=\"#一-内容\">#</a> 一、内容</h2>\n<h3 id=\"1state\"><a class=\"anchor\" href=\"#1state\">#</a> <strong>1.State</strong></h3>\n<pre><code>state：&#123; \n\n\tcount：1\n\n\t要设置的全局访问的state对象和初始值\n\n&#125;\n</code></pre>\n<p>this.$store.state.count 来取得 store 中的值</p>\n<p><code>mapState</code>  辅助函数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在单独构建的版本中辅助函数为 Vuex.mapState</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> mapState <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  computed<span class=\"token operator\">:</span> <span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 箭头函数可使代码更简练</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function-variable function\">count</span><span class=\"token operator\">:</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 传字符串参数 'count' 等同于 `state => state.count`</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    countAlias<span class=\"token operator\">:</span> <span class=\"token string\">'count'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 为了能够使用 `this` 获取局部状态，必须使用常规函数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">countPlusLocalState</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>localCount</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>computed<span class=\"token operator\">:</span> <span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 映射 this.count 为 store.state.count</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token string\">'count'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>mapState 函数返回的是一个对象。我们如何将它与局部计算属性混合使用呢？</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>computed<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">localComputed</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* ... */</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 使用对象展开运算符将此对象混入到外部对象中</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token operator\">...</span><span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"2getter\"><a class=\"anchor\" href=\"#2getter\">#</a> <strong>2.Getter</strong></h3>\n<p><strong>相当于 store 的计算属性</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>getter：<span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">+</span><span class=\"token number\">1</span>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>可以对 state 中的成员加工后传递给外界</strong></p>\n<p>Getters 中的方法有两个默认参数</p>\n<ul>\n<li>state 当前 Vuex 对象中的状态对象</li>\n<li>getters 当前 getters 对象，用于将 getters 下的其他 getter 拿来用</li>\n</ul>\n<p><strong>this.$store.getter.add 或者 this.$store.getter.add () 来取得 getter 中的值</strong></p>\n<p><strong> <code>mapGetters</code>  辅助函数</strong></p>\n<p><code>mapGetters</code>  辅助函数仅仅是将 store 中的 getter 映射到局部计算属性：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> mapGetters <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  computed<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 使用对象展开运算符将 getter 混入 computed 对象中</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">...</span><span class=\"token function\">mapGetters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token string\">'doneTodosCount'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token string\">'anotherGetter'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>如果你想将一个 getter 属性另取一个名字，使用对象形式：</pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">...</span><span class=\"token function\">mapGetters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  doneCount<span class=\"token operator\">:</span> <span class=\"token string\">'doneTodosCount'</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>要修改 store 的值只能通过提交 <code>mutations</code>  来修改</strong></p>\n<h3 id=\"3mutations\"><a class=\"anchor\" href=\"#3mutations\">#</a> <strong>3.Mutations</strong></h3>\n<p><strong>Mutation 必须是同步函数</strong></p>\n<p><code>mutations</code>  方法都有默认的形参：</p>\n<p>(<strong>[state]</strong> <strong>[,payload]</strong>)</p>\n<ul>\n<li><code>state</code>  是当前 <code>Vuex</code>  对象中的 <code>state</code></li>\n<li><code>payload</code>  是该方法在被调用时传递参数使用的</li>\n</ul>\n<p><strong>在组件中 this.$store.commit ('edit')</strong></p>\n<p>mutation 里面存放回调函数 里面的方法必须要 store.commit 调用 在 methods 里面定义方法来调用 mutation 的方法</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> mapMutations <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">...</span><span class=\"token function\">mapMutations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token string\">'increment'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 将 `this.increment ()` 映射为 `this.$store.commit ('increment')`</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\">// `mapMutations` 也支持载荷：</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token string\">'incrementBy'</span> <span class=\"token comment\">// 将 `this.incrementBy (amount)` 映射为 `this.$store.commit ('incrementBy', amount)`</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token operator\">...</span><span class=\"token function\">mapMutations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      add<span class=\"token operator\">:</span> <span class=\"token string\">'increment'</span> <span class=\"token comment\">// 将 `this.add ()` 映射为 `this.$store.commit ('increment')`</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"4action\"><a class=\"anchor\" href=\"#4action\">#</a> <strong>4.Action</strong></h3>\n<p>由于直接在 <code>mutation</code>  方法中进行<strong>异步</strong>操作，将会引起数据失效。所以提供了 Actions 来专门进行异步操作，最终提交 <code>mutation</code>  方法。</p>\n<p><code>Actions</code>  中的方法有两个默认参数</p>\n<ul>\n<li><code>context</code>  上下文 (相当于箭头函数中的 this) 对象</li>\n<li><code>payload</code>  挂载参数</li>\n</ul>\n<p><strong>Action 提交的是 mutation，而不是直接变更状态。</strong></p>\n<p>Action 可以包含任意异步操作。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  state<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    count<span class=\"token operator\">:</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  mutations<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">increment</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      state<span class=\"token punctuation\">.</span>count<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">increment</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      context<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>实践中，我们会经常用到 ES2015 的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2x1a2Vob2Jhbi9lczZmZWF0dXJlcyNkZXN0cnVjdHVyaW5n\">参数解构</span>来简化代码（特别是我们需要调用  <code>commit</code>  很多次的时候）：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">increment</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> commit <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'increment'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://upload-images.jianshu.io/upload_images/16550832-20d0ad3c60a99111.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/701/format/webp\" alt=\"img\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> mapActions <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">...</span><span class=\"token function\">mapActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token string\">'increment'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 将 `this.increment ()` 映射为 `this.$store.dispatch ('increment')`</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\">// `mapActions` 也支持载荷：</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token string\">'incrementBy'</span> <span class=\"token comment\">// 将 `this.incrementBy (amount)` 映射为 `this.$store.dispatch ('incrementBy', amount)`</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token operator\">...</span><span class=\"token function\">mapActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      add<span class=\"token operator\">:</span> <span class=\"token string\">'increment'</span> <span class=\"token comment\">// 将 `this.add ()` 映射为 `this.$store.dispatch ('increment')`</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>action 里面也存放着回调函数 里面的方法必须要 store.dispatch 调用 接受一个 context 对象</strong></p>\n<p>我们可以如下组合 action：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 假设 getData () 和 getOtherData () 返回的是 Promise</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">async</span> <span class=\"token function\">actionA</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> commit <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gotData'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">async</span> <span class=\"token function\">actionB</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> dispatch<span class=\"token punctuation\">,</span> commit <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">await</span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'actionA'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 等待 actionA 完成</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gotOtherData'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getOtherData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>详看vuex的actions</pre></td></tr></table></figure><h3 id=\"5module\"><a class=\"anchor\" href=\"#5module\">#</a> <strong>5.Module</strong></h3>\n<ul>\n<li>\n<p>模块中 <code>mutations</code>  和 <code>getters</code>  中的方法接受的第一个参数是自身局部模块内部的 <code>state</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>modules<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    a<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        state<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>key<span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        mutations<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token function\">editKey</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                state<span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> <span class=\"token number\">9</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>getters</code>  中方法的第三个参数是根节点状态</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>modules<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    a<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        state<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>key<span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        getters<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token function\">getKeyCount</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span>getter<span class=\"token punctuation\">,</span>rootState</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">return</span>  rootState<span class=\"token punctuation\">.</span>key <span class=\"token operator\">+</span> state<span class=\"token punctuation\">.</span>key</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>actions</code>  中方法获取局部模块状态是 <code>context.state</code> , 根节点状态是 <code>context.rootState</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>modules<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    a<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        state<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>key<span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        actions<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token function\">aEidtKey</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">context</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>key <span class=\"token operator\">===</span> context<span class=\"token punctuation\">.</span>rootState<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    context<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'editKey'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>更多查看<span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWV4LnZ1ZWpzLm9yZy96aC9ndWlkZS9tb2R1bGVzLmh0bWwjJUU0JUJGJTlEJUU3JTk1JTk5LXN0YXRl\"> vuex 官方文档</span></p>\n<p><strong>vuex 官方文档还有很多看不懂</strong></p>\n<h2 id=\"二-项目结构\"><a class=\"anchor\" href=\"#二-项目结构\">#</a> 二、项目结构</h2>\n<p>Vuex 并不限制你的代码结构。但是，它规定了一些需要遵守的规则：</p>\n<ol>\n<li>应用层级的状态应该集中到单个 store 对象中。</li>\n<li>提交 <strong>mutation</strong> 是更改状态的唯一方法，并且这个过程是同步的。</li>\n<li>异步逻辑都应该封装到 <strong>action</strong> 里面。</li>\n</ol>\n<p>只要你遵守以上规则，如何组织代码随你便。如果你的 store 文件太大，只需将 action、mutation 和 getter 分割到单独的文件。</p>\n<p>对于大型应用，我们会希望把 Vuex 相关代码分割到模块中。下面是项目结构示例：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>├── index.html</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>├── main.js</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>├── api</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>│   └── <span class=\"token punctuation\">..</span>. <span class=\"token comment\"># 抽取出 API 请求</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>├── components</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>│   ├── App.vue</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>│   └── <span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>└── store</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ├── index.js          <span class=\"token comment\"># 我们组装模块并导出 store 的地方</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    ├── actions.js        <span class=\"token comment\"># 根级别的 action</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    ├── mutations.js      <span class=\"token comment\"># 根级别的 mutation</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    └── modules</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        ├── cart.js       <span class=\"token comment\"># 购物车模块</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        └── products.js   <span class=\"token comment\"># 产品模块</span></pre></td></tr></table></figure><h2 id=\"三-例子\"><a class=\"anchor\" href=\"#三-例子\">#</a> 三、例子</h2>\n<p>在 store 中引入 vue 和 vuex vue.use (Vuex)</p>\n<p>在 main.js 中引入并且挂载 stroe</p>\n<p>在 store 中 export default new Vuex.store ({<strong>state</strong>：{要设置的全局访问的 state 对象和初始值}})</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>state</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 在单独构建的版本中辅助函数为 Vuex.mapState</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> mapState <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  computed<span class=\"token operator\">:</span> <span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 箭头函数可使代码更简练</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function-variable function\">count</span><span class=\"token operator\">:</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 传字符串参数 'count' 等同于 `state => state.count`</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    countAlias<span class=\"token operator\">:</span> <span class=\"token string\">'count'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 为了能够使用 `this` 获取局部状态，必须使用常规函数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">countPlusLocalState</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>localCount</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  state<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    todos<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span> id<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> text<span class=\"token operator\">:</span> <span class=\"token string\">'...'</span><span class=\"token punctuation\">,</span> done<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token punctuation\">&#123;</span> id<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> text<span class=\"token operator\">:</span> <span class=\"token string\">'...'</span><span class=\"token punctuation\">,</span> done<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  getters<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function-variable function\">doneTodos</span><span class=\"token operator\">:</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>todos<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">todo</span> <span class=\"token operator\">=></span> todo<span class=\"token punctuation\">.</span>done<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> Vuex <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> getUserInfoAPI<span class=\"token punctuation\">,</span> getUserProfileAPI <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/api/userAPI.js'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>Vuex<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  state<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 用来存储 token 信息的对象，将来这个对象中会包含两个属性 &#123;token, refresh_token&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    tokenInfo<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 用户的基本信息</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    userInfo<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 用户的简介信息</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    userProfile<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  mutations<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 更新 tokenInfo 数据的方法</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">updateTokenInfo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token comment\">// 把提交过来的 payload 对象，作为 tokenInfo 的值</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      state<span class=\"token punctuation\">.</span>tokenInfo <span class=\"token operator\">=</span> payload</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token comment\">// 如果希望在 Mutation A 中调用 Mutation B，需要通过 this.commit () 方法来实现</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token comment\">//this 表示当前的 new 出来的 store 实例对象</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'saveStateToStorage'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 将 state 持久化存储到本地</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">saveStateToStorage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>      localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'state'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">updateUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token comment\">// 1. 把用户信息转存到 state 中</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      state<span class=\"token punctuation\">.</span>userInfo <span class=\"token operator\">=</span> payload</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token comment\">// 2. 将最新的 state 对象持久化存储到本地</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'saveStateToStorage'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token comment\">// 清空 vuex 和本地的数据</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">cleanState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>      <span class=\"token comment\">// 1. 清空 vuex 中的数据</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>      state<span class=\"token punctuation\">.</span>tokenInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>      state<span class=\"token punctuation\">.</span>userInfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>      state<span class=\"token punctuation\">.</span>userProfile <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token comment\">// 2. 将清空后的 state 存储到本地</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'saveStateToStorage'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">// 在 vuex 模块中的 mutations 节点下，定义名为 updateUserProfile 的 Mutation 方法，负责把 Action 请求到的数据转存到 state 中：</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token function\">updateUserProfile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>      state<span class=\"token punctuation\">.</span>userProfile <span class=\"token operator\">=</span> payload</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'saveStateToStorage'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>  actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token keyword\">async</span> <span class=\"token function\">initUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> data<span class=\"token operator\">:</span> res <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getUserInfoAPI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>message <span class=\"token operator\">===</span> <span class=\"token string\">'OK'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'updateUserInfo'</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    <span class=\"token keyword\">async</span> <span class=\"token function\">initUserProfile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ctx</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> data<span class=\"token operator\">:</span> res <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getUserProfileAPI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>message <span class=\"token operator\">===</span> <span class=\"token string\">'OK'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'updateUserProfile'</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>  getters<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    <span class=\"token comment\">// 用户头像的计算属性</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    <span class=\"token function\">userAvatar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>      <span class=\"token comment\">// 默认的头像地址</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>      <span class=\"token keyword\">let</span> imgSrc <span class=\"token operator\">=</span> <span class=\"token string\">'https://img.yzcdn.cn/vant/cat.jpeg'</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>      <span class=\"token comment\">// 如果用户信息对象中包含 photo 属性的值，则为 imgSrc 重新赋值</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>userInfo<span class=\"token punctuation\">.</span>photo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        imgSrc <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>userInfo<span class=\"token punctuation\">.</span>photo</pre></td></tr><tr><td data-num=\"72\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>      <span class=\"token keyword\">return</span> imgSrc</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"四-原版\"><a class=\"anchor\" href=\"#四-原版\">#</a> 四、原版</h2>\n<p>和 store 有相同的方法和属性 可以是任意异步函数 而 mutation 必须是同步函数<br />\n有两种写法和两种使用方法</p>\n<p>通过挂载到 vue 实例上 就可以在全局用 $ 来调用<br />\n组件用到哪个状态就讲哪个声明为计算属性<br />\n可以用 mapState 函数来辅助 mapState 返回的是一个对象 不能和局部计算函数混用 但是用... 可以直接用<br />\n如果一个变量只会在一个组件中就声明局部变量<br />\n getting 就是 state 的计算属性 通过属性来访问<br />\n getting 接受 state 做为第一个参数 其他 getting 作为第二参数 结果缓存<br />\n如果需要传参就通过方法来调用 结果不缓存<br />\n mapGetting 映射 把 store 中的 getter 映射到局部的计算属性中<br />\n mutation 更像是事件注册 由类型和回调函数组成 接受 state 作为第一个参数 调用需要用对应的类型调用 store.commit 方法<br />\n commit 可以传入额外参数 payload 最好是对象<br />\n也可以在 commit 时传对象直接把 type 包括在内<br />\n提前在 store 初始化所有变量 注意添加新属性<br />\n使用常量来替代 mutation 事件类型<br />\n...mapMutation（【映射】）<br />\n...mapMutation（{可以重命名}）<br />\n必须是同步的<br />\n action 是异步的 支持同样的载荷方式和对象形式进行分发 但是接受 context 调用 context.commit 来提交一个 mutation 可以用参数解构来简写<br />\n...mapStation 映射到组件<br />\n action 通过 store.dispatch 来触发 处理 actions 处理函数处理返回的 promise 并且仍然放回 promise</p>\n<p>单元测试 export const mutations={}</p>\n<p>映射之后就不用 this. 调用</p>\n",
            "tags": [
                "前端",
                "Vue",
                "前端",
                "Vue"
            ]
        },
        {
            "id": "https://1234cas.github.io/1234cas.github.io/Front-end/Vue/vue%E7%AC%94%E8%AE%B0/",
            "url": "https://1234cas.github.io/1234cas.github.io/Front-end/Vue/vue%E7%AC%94%E8%AE%B0/",
            "title": "Vue笔记",
            "date_published": "2023-05-15T02:40:05.209Z",
            "content_html": "<h1 id=\"vue笔记\"><a class=\"anchor\" href=\"#vue笔记\">#</a> Vue 笔记</h1>\n<h2 id=\"01\"><a class=\"anchor\" href=\"#01\">#</a> 01</h2>\n<p>前端开发：模块化 组件化 规范化 自动化<br />\n npm run dev 会先去 webpack.config 里面查看配置 然后再执行<br />\n项目源码 在页面中导入的是经 webpack 处理过的代码 所以要修改代码都要 修改源码再 run 页面才会变<br />\n Source Map:1. 省略 devtool 选项 防止暴露源码<br />\n 2. 把 devtool 设置为 nosource-source-map 只定位行数不暴露源码<br />\n 3. 把 devtool 设置为 source-map 定位行数且显示源码<br />\n开发环境第三种 生产环境第一种或者第二种</p>\n<h2 id=\"02\"><a class=\"anchor\" href=\"#02\">#</a> 02</h2>\n<p><strong>数据驱动视图</strong><br />\n<strong>双向数据绑定</strong><br />\n<strong> MVVM  <code>Model</code>   <code>View</code>   <code>ViewModel</code> </strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>基础语法</span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWU=\">参考链接</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>v<span class=\"token operator\">-</span>text <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> v<span class=\"token operator\">-</span>html </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>v<span class=\"token operator\">-</span>on简写@ v<span class=\"token operator\">-</span>bind简写<span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>v<span class=\"token operator\">-</span>model </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token operator\">===</span>vm 在方法中访问data的数据可以用<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>数据名 在data中声明的数据都会挂载到vm的属性上</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function-variable function\">方法add</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token function\">简写为add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>@click<span class=\"token operator\">=</span><span class=\"token string\">\"add(1,$event)\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>@click @closed @submit @keyup</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>只要接收的值被覆盖都可以用$event</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>@click<span class=\"token punctuation\">.</span>prevent<span class=\"token operator\">=</span><span class=\"token string\">\"add\"</span> 事件修饰符 <span class=\"token punctuation\">.</span>stop <span class=\"token punctuation\">.</span>esc <span class=\"token punctuation\">.</span>enter</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>表单元素用v<span class=\"token operator\">-</span>model 修饰符 <span class=\"token punctuation\">.</span>number <span class=\"token punctuation\">.</span>trim <span class=\"token punctuation\">.</span>lazy</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span>和v<span class=\"token operator\">-</span>show一般都用v<span class=\"token operator\">-</span><span class=\"token keyword\">if</span> 还可以搭配<span class=\"token keyword\">if</span><span class=\"token operator\">-</span><span class=\"token keyword\">else</span>或者<span class=\"token keyword\">if</span><span class=\"token operator\">-</span><span class=\"token keyword\">else</span><span class=\"token operator\">-</span><span class=\"token keyword\">if</span> 但是直接写三元就可以</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>在<span class=\"token string\">\"\"</span><span class=\"token function\">里面写字符串要加单引号</span><span class=\"token punctuation\">(</span>就当成在写js<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">&lt;</span>tr v<span class=\"token operator\">-</span><span class=\"token keyword\">for</span><span class=\"token operator\">=</span><span class=\"token string\">\"(item ,index) in list\"</span> <span class=\"token operator\">:</span>title<span class=\"token operator\">=</span><span class=\"token string\">\"item.name+index\"</span> <span class=\"token operator\">:</span>key<span class=\"token operator\">=</span><span class=\"token string\">\"item.id\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>v<span class=\"token operator\">-</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>item <span class=\"token keyword\">in</span> items<span class=\"token punctuation\">)</span>item是每一项 items是被循环的数组 要搭配使用<span class=\"token operator\">:</span>key<span class=\"token operator\">=</span><span class=\"token string\">\"item.id\"</span></pre></td></tr></table></figure><p><code>过滤器filter&#123;&#123;mes | capi | format(arg1) &#125;&#125; 在filters节点定义过滤器 可以连续使用多个过滤器 过滤器的本质是js函数 所以可以接收参数</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>过滤器filters</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>filters<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">capi</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mes</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> mes<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>mes<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>上面定义的是私有过滤器 在入口函数main<span class=\"token punctuation\">.</span>js里面可以定义全局过滤器</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'capi'</span><span class=\"token punctuation\">,</span><span class=\"token parameter\">mes</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> mes<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>mes<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'format'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mes<span class=\"token punctuation\">,</span>arg</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"03\"><a class=\"anchor\" href=\"#03\">#</a> 03</h2>\n<p><strong>监听器 <code>watch</code>  可以用来监听值的变化 并且发起请求 比对值是否可用</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>监听器watch</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>watch<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">async</span> <span class=\"token function\">username</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">oldVal<span class=\"token punctuation\">,</span>newVal</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">console</span><span class=\"token punctuation\">(</span>oldVal<span class=\"token punctuation\">,</span>newVal<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>newVal<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">===</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>data<span class=\"token operator\">:</span>res<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">=</span><span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.escook.cn/api/finduser'</span><span class=\"token operator\">+</span>newVal<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>如果需要immediate或者deep就需要把username改为对象形式</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>username<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function-variable function\">handle</span><span class=\"token operator\">:</span><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newVal</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>newVal<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">===</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>data <span class=\"token operator\">:</span>res<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">=</span><span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.escook.cn/api/finduser'</span><span class=\"token operator\">+</span>newVal<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 如果需要初次加载就立即被调用</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    immediate<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 如果监听的是一个对象 如果对象的属性发生了变化 则无法监听到 这时候需要 deep 选项</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    deep<span class=\"token operator\">:</span><span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>如果只想监听一个属性也可以写成这样</pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token string\">'info.username'</span><span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>计算属性 <code>computed</code> </strong><br />\n<strong> 计算属性指的是通过一系列运算之后 最终得到一个属性值 这个动态计算出来的属性值可以被模板结构或 methods 方法使用。</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>计算属性</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>computed<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">rgb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">rgb(</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>r<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>g<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">,</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>b<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">)</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>计算属性的特点<br />\n① 虽然计算属性在声明的时候被定义为方法，但是<strong>计算属性的本质是一个属性</strong><br />\n② 计算属性会缓存计算的结果，<strong>只有计算属性依赖的数据变化时，才会重新进行运算</strong></p>\n<p>日期格式用 day.js</p>\n<h3 id=\"axios\"><a class=\"anchor\" href=\"#axios\">#</a>  <code>axios</code></h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>axios</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    method<span class=\"token operator\">:</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    url<span class=\"token operator\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//get 参数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    params<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">//post 参数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    data<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>写模板 <span class=\"token keyword\">import</span> Test <span class=\"token keyword\">from</span> <span class=\"token string\">'./Test.vue'</span> 导入 渲染</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span>button id<span class=\"token operator\">=</span><span class=\"token string\">\"btnPost\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span>button id<span class=\"token operator\">=</span><span class=\"token string\">\"btnGet\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://unpkg.com/axios/dist/axios.min.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#btnPost'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> data <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            method<span class=\"token operator\">:</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            url<span class=\"token operator\">:</span> <span class=\"token string\">\"http://www.liulongbin.top:3006/api/post\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                name<span class=\"token operator\">:</span> <span class=\"token string\">\"zs\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                age<span class=\"token operator\">:</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#btnGet'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 解构赋值的时候 使用：进行重命名</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">// 调用 axios, 使用 async/await 进行简化</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token comment\">// 使用解构赋值 从 axios 封装的对象中 把 data 属性解构出来</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 解构出来的属性用：进行重命名 一般都重命名为 &#123;data:res&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> data<span class=\"token operator\">:</span> res <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            method<span class=\"token operator\">:</span> <span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            url<span class=\"token operator\">:</span> <span class=\"token string\">\"http://www.liulongbin.top:3006/api/getbooks\"</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>在 main.js 文件中</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>axios根路径</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 全局配置 axios 的请求根路径</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>baseURL<span class=\"token operator\">=</span><span class=\"token string\">\"请求根路径\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 把 axios 挂载到 Vue.prototype 上 供每个.vue 的实例直接使用</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>$http<span class=\"token operator\">=</span>axios</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 以后再.vue 组件中组件要发起请求 直接调用 this.$http.xxx</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 但是把 axios 挂载到 Vue.prototype 上不利于 API 接口的复用</span></pre></td></tr></table></figure><h3 id=\"vue-cli\"><a class=\"anchor\" href=\"#vue-cli\">#</a>  <code>vue-cli</code></h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>vue-cli</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm install <span class=\"token operator\">-</span>g @vue<span class=\"token operator\">/</span>cli</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>vue create 项目的名称</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//render 函数中，渲染的是哪个 .vue 组件，那么这个组件就叫做 “根组件”</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token parameter\">h</span> <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>和el的作用一样</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">import</span> Left <span class=\"token keyword\">from</span> <span class=\"token string\">'@/components/Left.vue'</span> @指向src目录</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>在webpack<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>js里面的module<span class=\"token punctuation\">.</span>exports<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    resolve<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        alias<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>           @<span class=\"token operator\">:</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span><span class=\"token string\">'./src'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"使用组件三步骤\"><a class=\"anchor\" href=\"#使用组件三步骤\">#</a> 使用组件三步骤</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>使用组件</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 以标签的形式使用注册好的组件 <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token operator\">&lt;</span>Left<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Left<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>导入注册组件</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 导入需要使用的.vue 组件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">import</span> Left <span class=\"token keyword\">from</span> <span class=\"token string\">'@/components/Left.vue'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 注册组件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//.vue 组件中的 data 必须是函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        components<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            Left<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            right</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>上面这种注册的是私有子组件 注册全局组件要在 main.js 里面 通过 Vue.component () 方法</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>全局组件</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 导入需要的全局注册的组件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> Count form <span class=\"token string\">'@/component/Count.vue'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 参数 1: 字符串 声明组件的注册名称 参数 2 需要被全局注册的组件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">'MyCount'</span><span class=\"token punctuation\">,</span>Count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//props 是组件的自定义属性，在封装通用组件的时候，合理地使用 props 可以极大的提高组件的复用性！</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>exports <span class=\"token keyword\">default</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    props<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">'init'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//vue 规定：组件中封装的自定义属性是只读的，程序员不能直接修改 props 的值。否则会直接报错：</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 要想修改 props 的值，可以把 props 的值转存到 data 中，因为 data 中的数据都是可读可写的！</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            count<span class=\"token operator\">:</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>init</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>定义默认值时  <code>props</code>  要改为对象模式</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>props</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    props<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        type<span class=\"token operator\">:</span>Number<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 多个可能的类型</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">//type:[Number,String]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        required<span class=\"token operator\">:</span><span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>vue 文件所有内容都要被解析成 js 才能渲染在浏览器中<br />\n Count 组件只有使用的时候才会生成实例</p>\n<p><strong>组件样式之间会有冲突时 给 style 节点添加 <code>scoped</code>  属性</strong><br />\n给 HTML 的 dom 节点添加一个不重复的 data 属性 (例如: data-v-5558831a) 来唯一标识这个 dom 元素<br />\n在每句 css 选择器的末尾 (编译后生成的 css 语句) 加一个当前组件的 data 属性选择器 (例如：[data-v-5558831a]) 来私有化样式<br />\n<strong>但是 scoped 对子组件是不生效的 要让某些样式对子组件生效 可以在其选择器前面加 <code>/deep/</code> </strong><br />\n 通过 v-html 创建的 DOM 内容不受 scoped 样式影响，但是你仍然可以通过深度作用选择器来为他们设置样式。</p>\n<h2 id=\"04\"><a class=\"anchor\" href=\"#04\">#</a> 04</h2>\n<p>生命周期<br />\n<strong>生命周期（Life Cycle）是指一个组件从创建 -&gt; 运行 -&gt; 销毁的整个阶段，强调的是一个时间段。</strong><br />\n生命周期函数：是由 vue 框架提供的内置函数，会伴随着组件的生命周期，自动按次序执行。<br />\n注意：生命周期强调的是时间段，生命周期函数强调的是时间点。<br />\nbeforeCreate 不重要<br />\n<strong> <code>created</code>  重要 经常在 created 阶段发起 axios 请求 因为可以最早发起请求 然后把请求到的数据转存在 data 里 但是这时不能操作 DOM 因为模板结构尚未创建</strong><br />\n beforeMount 也还操作不了 DOM 不重要<br />\n<strong> <code>mounted</code>  已经把 DOM 结构渲染到页面中了 在这可以最早操作 DOM 结构</strong><br />\n beforeUpdate 这时 DOM 结构还是旧的 但是数据是最新的<br />\n<strong> <code>updated</code>  数据和结构都是最新的 在这可以操作最新的 DOM 结构</strong><br />\n updated 数据变化时就会触发 使用动态组件来回切换组件会触发两次</p>\n<h3 id=\"组件间的数据关系\"><a class=\"anchor\" href=\"#组件间的数据关系\">#</a> 组件间的数据关系</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>组件间的数据关系</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>父组件向子组件共享数据需要使用自定义属性props 不建议修改props的值</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">9</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>子组件向父组件共享数据使用自定义事件 </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>在 vue2<span class=\"token punctuation\">.</span>x 中 兄弟组件之间数据共享的方案是 EventBus</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">04</span><span class=\"token operator\">-</span><span class=\"token number\">11</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>在数据的发送方定义要发送的数据 在数据的接收方定义要接收的数据</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>创建eventBus<span class=\"token punctuation\">.</span>js 就是<span class=\"token keyword\">new</span>一个Vue的实例 然后向外共享</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>发送方和接收方都导入eventBus 发送方绑定$emit 接收方绑定$on事件</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>发送方methods<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">sendMsg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 第一个参数是自定义事件名 第二个是要处理的数据</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        bus<span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'share'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">接收方created</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    bus<span class=\"token punctuation\">.</span><span class=\"token function\">$on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'share'</span><span class=\"token punctuation\">,</span><span class=\"token parameter\">val</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msgFromLeft<span class=\"token operator\">=</span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"ref引用\"><a class=\"anchor\" href=\"#ref引用\">#</a> ref 引用</h3>\n<p>在 vue 中获取 DOM 元素使用 ref</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>ref</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>给想要操作的<span class=\"token constant\">DOM</span>元素添加ref属性 然后可以通过<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>属性值来获取</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ref除了引用<span class=\"token constant\">DOM</span> 还可以引用组件</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>在父组件中要去调子组件的值用ref是最简单的</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>ww<span class=\"token punctuation\">.</span>dialogVisible</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>ipt<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>$nextTick可以解决数据更新都是<span class=\"token constant\">DOM</span>结构还没有更新导致的报错</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$nextTick</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>组件的 <span class=\"token function\">$nextTick</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span> 方法，会把 cb 回调推迟到下一个 <span class=\"token constant\">DOM</span> 更新周期之后执行。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>通俗的理解是：等组件的<span class=\"token constant\">DOM</span> 更新完成之后，再执行 cb 回调函数。从而能保证 cb 回调函数可以操作到最新的 <span class=\"token constant\">DOM</span> 元素。</pre></td></tr></table></figure><h3 id=\"es6中的数组方法\"><a class=\"anchor\" href=\"#es6中的数组方法\">#</a> ES6 中的数组方法</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>数组方法</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>some </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>forEach可以实现查找数组的某一元素但是forEach一旦开始无法停止 性能较差</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span>index</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">===</span><span class=\"token string\">'xx'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>some在找到对应的项之后可以通过<span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>来终止some循环</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>every </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>需求<span class=\"token operator\">:</span>判断数组中 每一项的状态是否都为<span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token operator\">=></span>item<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span>  把item<span class=\"token punctuation\">.</span>state<span class=\"token operator\">===</span><span class=\"token boolean\">true</span>简写</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> item<span class=\"token punctuation\">.</span>id<span class=\"token operator\">==</span><span class=\"token number\">1</span>的</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> 有item<span class=\"token punctuation\">.</span>id这个属性的</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>reduce</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>需求<span class=\"token operator\">:</span>把购物车数组中 已勾选的水果 总价累加起来</pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">let</span> amt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token operator\">=></span>item<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   amt <span class=\"token operator\">+=</span> item<span class=\"token punctuation\">.</span>price <span class=\"token operator\">*</span> item count</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>filter</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token operator\">=></span>item<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">累加的结果<span class=\"token punctuation\">,</span>当前循环项</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>初始值<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token operator\">=></span>item<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">amt<span class=\"token punctuation\">,</span>item</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    retuen amt <span class=\"token operator\">+=</span>item<span class=\"token punctuation\">.</span>price <span class=\"token operator\">*</span> item<span class=\"token punctuation\">.</span>count</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">//return 的值会作为第二次累加的初始值</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token operator\">=></span>item<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">amt<span class=\"token punctuation\">,</span>item</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>amt<span class=\"token operator\">+=</span>item<span class=\"token punctuation\">.</span>price <span class=\"token operator\">*</span> item<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>简写代码会把那一行代码默认作为<span class=\"token keyword\">return</span>的返回值</pre></td></tr></table></figure><h2 id=\"05动态组件\"><a class=\"anchor\" href=\"#05动态组件\">#</a> 05 动态组件</h2>\n<p><strong>vue 提供了一个内置的 <code> &lt;component :is=&quot;comName&quot; include=&quot;aside&quot;&gt;</code>  组件，专门用来实现动态组件的渲染</strong><br />\n通过 &lt;button @click=&quot;comName='Left&quot;&gt;</button>&lt;button @click=&quot;comName='Right&quot;&gt;</button>来切换组件<br />\n<strong>默认情况下，切换动态组件时无法保持组件的状态 - 即会重新加载。此时可以使用 vue 内置的  <code>&lt;keep-alive&gt; </code> 组件保持动态组件的状态。</strong><br />\n用 keep-alive 包住动态组件 keep-alive 对应的生命周期函数<br />\n当组件被缓存时，会自动触发组件的 deactivated 生命周期函数。<br />\n当组件被激活时，会自动触发组件的 activated 生命周期函数。<br />\n<strong>当组件第一次被创建的时候，会先执行 created 生命周期，再会执行 activated 生命周期</strong><br />\n<strong>当组件被激活的时候，只会触发 activated 生命周期，不再触发 created。因为组件没有被重新创建</strong><br />\n include 属性用来指定：只有名称匹配的组件会被缓存，不匹配的会销毁。多个组件名之间使用英文的逗号分隔<br />\n exclude 指定组件不被缓存 两个属性不能同时使用<br />\n如果在 “声明组件” 的时候，没有为组件指定 name 名称，则组件的名称默认就是 “注册时候的名称”<br />\n 当提供了 name 属性之后，组件的名称，就是 name 属性的值 在开发中一般都会指定 name 首字母大写<br />\n根节点就 xxx-container xxx 就组件名<br />\n对比:<br />\n1. 组件的 “注册名称” 的主要应用场景是：以标签的形式，把注册好的组件，渲染和使用到页面结构之中<br />\n 2. 组件声明时候的 “name” 名称的主要应用场景：结合<keep-alive>标签实现组件缓存功能；以及在调试工具中看到组件的 name 名称</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>动态组件</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>keep<span class=\"token operator\">-</span>alive include<span class=\"token operator\">=</span><span class=\"token string\">\"Myleft,Myright\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>component <span class=\"token operator\">:</span>is<span class=\"token operator\">=</span><span class=\"token string\">\"comName\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>component<span class=\"token operator\">>></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>keep<span class=\"token operator\">-</span>alive<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"comName='Left\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"comName='Right\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"插槽slot\"><a class=\"anchor\" href=\"#插槽slot\">#</a> 插槽 slot</h3>\n<p>是在组件里的一部分 可以把插槽认为是组件封装期间，为用户预留的内容的占位符<br />\n可以通过 <strong> <code>&lt;slot&gt;</code> </strong> 元素定义插槽，从而为用户预留内容占位符。<br />\n封装组件时，可以为预留的 <slot> 插槽提供后备内容，直接写在 slot 标签里面。如果组件的使用者没有为插槽提供任何内容，则后备内容会生效。<br />\n如果在封装组件时需要预留多个插槽节点，则需要为每个 <slot> 插槽指定具体的 name 名称。这种带有具体名称的插槽叫做 <strong> <code>具名插槽</code> </strong><br />\n没有指定 name 名称的插槽，会有隐含的名称叫做 “default”<br />\n 在向具名插槽提供内容的时候，我们可以在一个 <template> 元素上使用 v-slot 指令，并以 v-slot 的参数的形式提供其名称。<br />\nv-slot 后面要跟上插槽的名字 v-slot 不能直接使用在元素身上 必须用在 template 或者组件上<br />\n template 只起到一个包裹的作用 不会渲染成任何元素<br />\n<strong> v-slot: 可以简写为 <code>#</code> </strong><br />\n在封装组件的过程中，可以为预留的 <slot> 插槽绑定 props 数据，这种带有 props 数据的 <slot> 叫做 <strong> <code>“作用域插槽”</code> </strong><br />\n 通过 #content=&quot;scope&quot; 接收作用域插槽对外提供的数据 <code> &#123;&#123;scope.msg&#125;&#125;</code> <br />\n 可以在接收的时候直接解构 <code>#content=&quot;&#123;msg,user&#125;&quot; &#123;&#123;msg&#125;&#125;</code> <br />\n 声明组件:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>声明组件</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token operator\">&lt;</span>slot<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>slot<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 具名插槽 <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token operator\">&lt;</span>slot name<span class=\"token operator\">=</span><span class=\"token string\">\"header\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>slot<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 作用域插槽 <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token operator\">&lt;</span>slot <span class=\"token operator\">:</span>user<span class=\"token operator\">=</span><span class=\"token string\">\"username\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>slot<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr></table></figure><p>调用组件:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>调用组件</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>Nav<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 对应默认插槽 <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token number\">123</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 对应具名插槽 <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span>template #header<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token number\">456</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 对应作用域插槽 <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token operator\">&lt;</span>template #<span class=\"token keyword\">default</span><span class=\"token operator\">=</span><span class=\"token string\">\"scope\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>\\<span class=\"token punctuation\">&#123;</span> scope <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Nav<span class=\"token operator\">></span></pre></td></tr></table></figure><p>table 组件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>table组件</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token operator\">&lt;</span>table <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"table table-bordered table-striped\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token operator\">&lt;</span>thead<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token operator\">&lt;</span>tr<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token operator\">&lt;</span>slot name<span class=\"token operator\">=</span><span class=\"token string\">\"header\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>slot<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>tr<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>thead<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 表格的主体区域 <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">&lt;</span>tbody<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 使用 v<span class=\"token operator\">-</span><span class=\"token keyword\">for</span> 指令，循环渲染表格的数据行 <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token operator\">&lt;</span>tr v<span class=\"token operator\">-</span><span class=\"token keyword\">for</span><span class=\"token operator\">=</span><span class=\"token string\">\"(item, index) in data\"</span> <span class=\"token operator\">:</span>key<span class=\"token operator\">=</span><span class=\"token string\">\"item.id\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 为数据行的 td 预留的“作用域插槽” <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token operator\">&lt;</span>slot name<span class=\"token operator\">=</span><span class=\"token string\">\"body\"</span> <span class=\"token operator\">:</span>row<span class=\"token operator\">=</span><span class=\"token string\">\"item\"</span> <span class=\"token operator\">:</span>index<span class=\"token operator\">=</span><span class=\"token string\">\"index\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>slot<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>tr<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>tbody<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>table<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr></table></figure><p>使用表格组件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>使用表格组件</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 使用表格组件 <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 在 MyTable<span class=\"token punctuation\">.</span>vue 组件的 props 节点中声明表格的 data 数据源： <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 在使用 MyTable<span class=\"token punctuation\">.</span>vue 组件时，通过属性绑定的形式为表格指定 data 数据源： <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>my<span class=\"token operator\">-</span>table <span class=\"token operator\">:</span>data<span class=\"token operator\">=</span><span class=\"token string\">\"goodslist\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 表格的标题 <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">&lt;</span>template v<span class=\"token operator\">-</span>slot<span class=\"token operator\">:</span>header<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token operator\">&lt;</span>th<span class=\"token operator\">></span>#<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>th<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">&lt;</span>th<span class=\"token operator\">></span>商品名称<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>th<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token operator\">&lt;</span>th<span class=\"token operator\">></span>价格<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>th<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token operator\">&lt;</span>th<span class=\"token operator\">></span>标签<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>th<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token operator\">&lt;</span>th<span class=\"token operator\">></span>操作<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>th<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>​    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 表格每行的单元格 <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token operator\">&lt;</span>template v<span class=\"token operator\">-</span>slot<span class=\"token operator\">:</span>body<span class=\"token operator\">=</span><span class=\"token string\">\"&#123; row, index &#125;\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token operator\">&lt;</span>td<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>\\<span class=\"token punctuation\">&#123;</span> index <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>td<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token operator\">&lt;</span>td<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>\\<span class=\"token punctuation\">&#123;</span> row<span class=\"token punctuation\">.</span>goods_name <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>td<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token operator\">&lt;</span>td<span class=\"token operator\">></span>￥<span class=\"token punctuation\">&#123;</span>\\<span class=\"token punctuation\">&#123;</span> row<span class=\"token punctuation\">.</span>goods_price <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>td<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token operator\">&lt;</span>td<span class=\"token operator\">></span><span class=\"token punctuation\">&#123;</span>\\<span class=\"token punctuation\">&#123;</span> row<span class=\"token punctuation\">.</span>tags <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>td<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token operator\">&lt;</span>td<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"btn btn-danger btn-sm\"</span><span class=\"token operator\">></span>删除</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>td<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>my<span class=\"token operator\">-</span>table<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"自定义指令\"><a class=\"anchor\" href=\"#自定义指令\">#</a> 自定义指令</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>自定义组件</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在directives节点下声明私有自定义指令</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>v<span class=\"token operator\">-</span>color<span class=\"token operator\">:</span>opacity<span class=\"token operator\">=</span><span class=\"token string\">\"&#123; color: 'white', text: 'hello!' &#125;\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>directives<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    color<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            el<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color<span class=\"token operator\">=</span><span class=\"token string\">'red'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el<span class=\"token punctuation\">,</span>binding</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            el<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color<span class=\"token operator\">=</span>binging<span class=\"token punctuation\">.</span>value</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在使用自定义指令时，需要加上 v- 前缀 声明时不需要<br />\n在 template 结构中使用自定义指令时，可以通过等号（=）的方式，为当前指令动态绑定参数值<br />\n在声明自定义指令时，可以通过形参中的第二个参数 binding 来接收指令的参数值：<br />\n通过 binding 对象的.value 属性获取动态的参数值 el.style.color=binding.value<br />\nbind 函数只调用 1 次：当指令第一次绑定到元素时调用 当 DOM 更新时 bind 函数不会被触发<br />\n update 函数第一次不会调用 但会在每次 DOM 更新时被调用</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>函数简写 bind和update的逻辑相同时 可以简写为以下形式</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el<span class=\"token punctuation\">,</span>binging</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    el<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color<span class=\"token operator\">=</span>binging<span class=\"token punctuation\">.</span>value</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>全局自定义指令 一般都定义全局</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">directive</span><span class=\"token punctuation\">(</span><span class=\"token string\">'color'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el<span class=\"token punctuation\">,</span>binging</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    el<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color<span class=\"token operator\">=</span>binging<span class=\"token punctuation\">.</span>value</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"06\"><a class=\"anchor\" href=\"#06\">#</a> 06</h2>\n<p>location.href 返回 #哈希地址 哈希地址会产生前进后退<br />\n简易路由</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>简易路由</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onhashchange</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token string\">'#/home'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>comName<span class=\"token operator\">=</span><span class=\"token string\">'Home'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">case</span> <span class=\"token string\">'#/movie'</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>comName<span class=\"token operator\">=</span><span class=\"token string\">'movie'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"vuerouter插件\"><a class=\"anchor\" href=\"#vuerouter插件\">#</a> vue.router 插件</h3>\n<p>使用方法:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm i vue<span class=\"token operator\">-</span>router@<span class=\"token number\">3.5</span><span class=\"token number\">.2</span> <span class=\"token operator\">-</span><span class=\"token constant\">S</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1.</span>导入Vue和VueRouter <span class=\"token number\">2.</span>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>VueRouter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">3.</span>new一个实例 <span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">4.</span>向外共享 <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>然后在main<span class=\"token punctuation\">.</span>js中导入router</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span><span class=\"token parameter\">h</span><span class=\"token operator\">=></span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    router</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$app'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>以后使用时可以一键生成<br />\n<strong> <code>this.$route是路由对象</code> <br />\n <code>this.$router是导航对象</code> </strong><br />\n路由链接<br />\n使用 vue-router 提供的 <router-link to=\"/home\">(不用加 #) 和 <router-view> 声明路由链接和占位符：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>路由链接</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    routes<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>path<span class=\"token operator\">:</span><span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span>component<span class=\"token operator\">:</span>Home<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>path<span class=\"token operator\">:</span><span class=\"token string\">'/movie'</span><span class=\"token punctuation\">,</span>component<span class=\"token operator\">:</span>Movie<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>path<span class=\"token operator\">:</span><span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span>component<span class=\"token operator\">:</span>About<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>路由重定向指的是：用户在访问地址 A 的时候，强制用户跳转到地址 C ，从而展示特定的组件页面。<br />\n通过路由规则的 redirect 属性，指定一个新的路由地址，可以很方便地设置路由的重定向 <code>&#123;path:'/',redirect:'/home'&#125;</code></p>\n<p><strong>嵌套路由 套娃</strong><br />\n通过 children 属性声明子路由规则</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>嵌套路由</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    path<span class=\"token operator\">:</span><span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    component<span class=\"token operator\">:</span>About<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> redirect<span class=\"token operator\">:</span><span class=\"token string\">'/about/tab1'</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    children<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 默认子路由 在children数组中如果path为空字符串 则这条路由就是默认子路由 就不用重定向 <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 子路由不用<span class=\"token operator\">/</span>开头 <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>path<span class=\"token operator\">:</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span>component<span class=\"token operator\">:</span>Tab1<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> <span class=\"token punctuation\">&#123;</span>path<span class=\"token operator\">:</span><span class=\"token string\">'tab1'</span><span class=\"token punctuation\">,</span>component<span class=\"token operator\">:</span>Tab1<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span>path<span class=\"token operator\">:</span><span class=\"token string\">'tab2'</span><span class=\"token punctuation\">,</span>component<span class=\"token operator\">:</span>Tab2<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>动态路由 :id</strong><br />\n <code>&#123;path:'/movie/:id',component:Movie&#125;</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>动态路由</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在Movie组件中获取id可以通过$route<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>也可以使用 props 接收路由参数 在组件的props中声明id变量</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span>path<span class=\"token operator\">:</span><span class=\"token string\">'/movie/:id'</span><span class=\"token punctuation\">,</span>component<span class=\"token operator\">:</span>Movie<span class=\"token punctuation\">,</span>props<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>通过$route<span class=\"token punctuation\">.</span>query来获取查询参数 就是url<span class=\"token operator\">?</span>后面的值 fullPath是完整路径</pre></td></tr></table></figure><p>声明式导航 链接 &amp; 编程式导航 (js)</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>编程式导航</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">1</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hash 地址'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>跳转到指定 hash 地址，并增加一条历史记录</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">2</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hash 地址'</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>跳转到指定的 hash 地址，并替换掉当前的历史记录</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">3</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span>数值 n<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>实现导航历史前进、后退 如果超过上限则不动<br />\n在行内使用编程式导航跳转的时候，<strong>this 必要省略</strong>，否则报错</p>\n<p><strong>全局前置守卫</strong><br />\n <code>router.beforeEach((to,from,next)=&gt;&#123;&#125;)</code> <br />\n 每次发生路由的导航跳转时，都会触发全局前置守卫<br />\n<strong>必须调用 next ()</strong></p>\n<ol>\n<li>当前用户拥有后台主页的访问权限，直接放行：next ()</li>\n<li>当前用户没有后台主页的访问权限，强制其跳转到登录页面：next ('/login')</li>\n<li>当前用户没有后台主页的访问权限，不允许跳转到后台主页 停留在当前页面：next (false)</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>全局前置守卫</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span>from<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">.</span>path<span class=\"token operator\">===</span><span class=\"token string\">'/main'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">,</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"07-other\"><a class=\"anchor\" href=\"#07-other\">#</a> 07 other</h2>\n<h3 id=\"vant\"><a class=\"anchor\" href=\"#vant\">#</a> Vant</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>vant</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm install vant <span class=\"token operator\">-</span><span class=\"token constant\">S</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>全引入</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> Vant <span class=\"token keyword\">from</span> <span class=\"token string\">'vant'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'vant/lib/index.css'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>Vant<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token number\">1.</span>创建项目</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token number\">2.</span>初始化</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token number\">3.</span>加组件</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token number\">4.</span>实现功能</pre></td></tr></table></figure><h3 id=\"axios请求改进\"><a class=\"anchor\" href=\"#axios请求改进\">#</a> axios 请求改进</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>axios方法改进</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>导入request模块</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> request <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  baseURL<span class=\"token operator\">:</span> <span class=\"token string\">'https://www.escook.cn'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> request</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>调用方法请求参数</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 改进前</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">async</span> <span class=\"token function\">initArticleList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> data<span class=\"token operator\">:</span> res <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/articles'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            params<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                _page<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>page<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                _limit<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>limit</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token function\">created</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initArticleList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>如果请求多个服务器可以封装request来创建多个axios来对应服务器</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>如果多个页面要调用同一个接口会导致重复</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>就封装一个api 请求就封装到api中</pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token comment\">// 改进后</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\">// 导入 axios</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">import</span> request <span class=\"token keyword\">from</span> <span class=\"token string\">'@/utils/request.js'</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token comment\">// 返回封装的 API</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getArticleListAPI</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_page<span class=\"token punctuation\">,</span> _limit</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token keyword\">return</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/article'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        params<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            _page<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            _limit</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 按需导入 API 接口</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> getArticleListAPI <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/api/articleAPI.js'</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token keyword\">async</span> <span class=\"token function\">initArticleList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> data<span class=\"token operator\">:</span> res <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getArticleListAPI</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>page<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>limit<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h3 id=\"覆盖第三方组件的样式\"><a class=\"anchor\" href=\"#覆盖第三方组件的样式\">#</a> 覆盖第三方组件的样式</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>覆盖样式</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>单页面</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">.</span>home<span class=\"token operator\">-</span>container<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    padding<span class=\"token operator\">:</span> <span class=\"token number\">46</span>px <span class=\"token number\">0</span> <span class=\"token number\">50</span>px <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">*</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        background<span class=\"token operator\">-</span>color<span class=\"token operator\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">/</span>deep<span class=\"token operator\">/</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        color<span class=\"token operator\">:</span> blue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>全局 定制主题</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 覆盖默认的 less 变量</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'vant/lib/index.less'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 这个文件是 vue-cli 创建出来的项目的配置文件</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 在 vue.config.js 这个配置文件中，可以对整个项目的打包、构建进行全局性的配置</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//webpack 在进行打包的时候，底层用到了 node.js</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 因此，在 vue.config.js 配置文件中，可以导入并使用 node.js 中的核心模块</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">const</span> themePath <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./src/theme.less'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    publicPath<span class=\"token operator\">:</span> <span class=\"token string\">'./'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    css<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        loaderOptions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            less<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                modifyVars<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token comment\">// 直接覆盖变量</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token comment\">// 'nav-bar-background-color': 'orange'</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token comment\">// 或者可以通过 less 文件覆盖（文件路径为绝对路径）</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token comment\">// ../ ./ theme.less</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token comment\">// 从盘符开始的路径，叫做绝对路径 C:\\\\Users\\liulongbin\\\\theme.less</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                    hack<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">true; @import \"</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>themePath<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\";</span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"配置vscode\"><a class=\"anchor\" href=\"#配置vscode\">#</a> 配置 vscode</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>eslint</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>下载eslint和prettier插件</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token string\">\"editor.formatOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//ESLint 插件的配置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token string\">\"editor.codeActionsOnSave\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token string\">\"source.fixAll\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//.prettierrc 文件里写 &#123;semi: false, singleQuote: true, printWidth: 300&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token string\">\"prettier.configPath\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"C:\\\\Users\\\\Admin\\\\.prettierrc\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token string\">\"eslint.alwaysShowStatus\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token string\">\"prettier.trailingComma\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token string\">\"prettier.semi\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 每行文字个数超出此限制将会被迫换行</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token string\">\"prettier.printWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 使用单引号替换双引号</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token string\">\"prettier.singleQuote\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token string\">\"prettier.arrowParens\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"avoid\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 设置 .vue 文件中，HTML 代码的格式化插件</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token string\">\"vetur.format.defaultFormatter.html\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"js-beautify-html\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token string\">\"vetur.ignoreProjectWarning\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token string\">\"vetur.format.defaultFormatterOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token string\">\"js-beautify-html\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token string\">\"wrap_attributes\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token string\">\"prettier\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token string\">\"printWidth\"</span><span class=\"token operator\">:</span> <span class=\"token number\">300</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token string\">\"trailingComma\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"none\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token string\">\"semi\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token string\">\"singleQuote\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token string\">\"arrowParens\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"avoid\"</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span>js <span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h2 id=\"notice\"><a class=\"anchor\" href=\"#notice\">#</a> NOTICE</h2>\n<ol>\n<li>views 放路由的组件 component 放其他组件</li>\n<li>路由规则和地址要一一对应</li>\n<li>使用插件或者库想要实现更多功能先查看官方文档 尽量不要手写</li>\n<li>属性值默认值为 false 想改为 true 直接写属性名就可以</li>\n<li>提高 axios 请求的复用性 const axios1=axios.create ({baseURL:'xx'})</li>\n<li>如果重复调用接口 可以封装到模块中 放在 API 文件夹下</li>\n<li>获取数据的函数函数名以 init 开头 API 函数以 API 结尾</li>\n<li>在使用组件的时候，如果某个属性名是 “小驼峰” 形式，则绑定属性的时候，建议改写成 “连字符” 格式</li>\n<li>例如 cmtCount 建议写成 cmt-count props 里面就接着写成 cmtCount</li>\n<li>eslint 在 porps 中有有默认值的对象时 默认值为 {} 会报错 通过不设或者工厂函数来解决</li>\n<li>在 v-for 中没 id 可以用索引 但是前面有复选框时必须用 id</li>\n<li>触发 load 事件时 loading 变为 true 就不会重复触发 在初始化请求数据时也会触发一次</li>\n<li>所以一开始设置为 true 在 created 中重新设为 false</li>\n<li>通过判断请求数据来判断是否到底</li>\n<li>实现上拉加载 1. 加页码 再请求 2.[...arr,...arr1] 数据拼接 3. 判断是否为最后一页</li>\n<li>不在 main.js 中 use (Vuex) 在 store.js 中 use (Vuex) 就不会报错</li>\n</ol>\n<h2 id=\"after\"><a class=\"anchor\" href=\"#after\">#</a> after</h2>\n<p>element-ui</p>\n<p>more axios</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"><span>axios</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 全局配置 axios</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> <span class=\"token string\">'https://www.escook.cn'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>\\$http <span class=\"token operator\">=</span> axios</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>proxy跨域代理</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> <span class=\"token string\">'http://localhost:1245'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    devServer<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        port<span class=\"token operator\">:</span> <span class=\"token number\">1245</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        open<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        proxy<span class=\"token operator\">:</span> <span class=\"token string\">'https://www.escook.cn'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>拦截器</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">let</span> loadingInstance <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    config<span class=\"token punctuation\">.</span>header<span class=\"token punctuation\">.</span>Authorization<span class=\"token operator\">=</span><span class=\"token string\">'Bearer xxx'</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    loadingInstance <span class=\"token operator\">=</span> Loading<span class=\"token punctuation\">.</span><span class=\"token function\">service</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> fullscreen<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> config</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    loadingInstance<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> response</pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "前端",
                "Vue",
                "前端",
                "Vue"
            ]
        },
        {
            "id": "https://1234cas.github.io/1234cas.github.io/Front-end/Vue/%E9%BB%91%E9%A9%AC%E5%A4%B4%E6%9D%A1%E7%AC%94%E8%AE%B0/",
            "url": "https://1234cas.github.io/1234cas.github.io/Front-end/Vue/%E9%BB%91%E9%A9%AC%E5%A4%B4%E6%9D%A1%E7%AC%94%E8%AE%B0/",
            "title": "黑马头条笔记",
            "date_published": "2023-05-15T02:40:05.209Z",
            "content_html": "<h4 id=\"1安装和配置axios\"><a class=\"anchor\" href=\"#1安装和配置axios\">#</a> 1. 安装和配置 axios</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 调用 axios.create () 方法，创建 axios 的实例对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token comment\">// 请求根路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tbaseURL<span class=\"token operator\">:</span> <span class=\"token string\">'http://www.liulongbin.top:8000'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> instance</pre></td></tr></table></figure><h4 id=\"2覆盖默认样式\"><a class=\"anchor\" href=\"#2覆盖默认样式\">#</a> 2. 覆盖默认样式</h4>\n<h4 id=\"3登录功能\"><a class=\"anchor\" href=\"#3登录功能\">#</a> 3. 登录功能</h4>\n<ol>\n<li>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>声明数据</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tname<span class=\"token operator\">:</span> <span class=\"token string\">'Login'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token comment\">// 登录表单的数据，最终要双向绑定到 form 这个数据对象上</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\tform<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t\tmobile<span class=\"token operator\">:</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t\tcode<span class=\"token operator\">:</span><span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 登录的表单 <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token operator\">&lt;</span>van<span class=\"token operator\">-</span>form<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token operator\">&lt;</span>van<span class=\"token operator\">-</span>field v<span class=\"token operator\">-</span>model<span class=\"token operator\">=</span><span class=\"token string\">\"form.mobile\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"tel\"</span> label<span class=\"token operator\">=</span><span class=\"token string\">\"手机号码\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"请输入手机号码\"</span> required<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>van<span class=\"token operator\">-</span>field<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token operator\">&lt;</span>van<span class=\"token operator\">-</span>field v<span class=\"token operator\">-</span>model<span class=\"token operator\">=</span><span class=\"token string\">\"form.code\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> label<span class=\"token operator\">=</span><span class=\"token string\">\"登录密码\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"请输入登录密码\"</span> required<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>van<span class=\"token operator\">-</span>field<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token operator\">&lt;</span>div style<span class=\"token operator\">=</span><span class=\"token string\">\"margin: 16px;\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     <span class=\"token operator\">&lt;</span>van<span class=\"token operator\">-</span>button round block type<span class=\"token operator\">=</span><span class=\"token string\">\"info\"</span> native<span class=\"token operator\">-</span>type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>提交<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>van<span class=\"token operator\">-</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>van<span class=\"token operator\">-</span>form<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>添加非空校验规则</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tname<span class=\"token operator\">:</span> <span class=\"token string\">'Login'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tdata<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token comment\">// 表单的校验规则对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\trules<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t\tmobile<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'请输入'</span><span class=\"token punctuation\">,</span> trigger<span class=\"token operator\">:</span> <span class=\"token string\">'onBlur'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t\tcode<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span> required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'请输入'</span><span class=\"token punctuation\">,</span> trigger<span class=\"token operator\">:</span> <span class=\"token string\">'onBlur'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在 Login<span class=\"token punctuation\">.</span>vue 组件的模板结构中，为每个 <span class=\"token operator\">&lt;</span>van<span class=\"token operator\">-</span>field<span class=\"token operator\">></span> 组件应用对应的校验规则：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 手机号的表单项 <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>van<span class=\"token operator\">-</span>field type<span class=\"token operator\">=</span><span class=\"token string\">\"tel\"</span> v<span class=\"token operator\">-</span>model<span class=\"token operator\">=</span><span class=\"token string\">\"form.mobile\"</span> label<span class=\"token operator\">=</span><span class=\"token string\">\"手机号码\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"请输入手机号码\"</span> required <span class=\"token operator\">:</span>rules<span class=\"token operator\">=</span><span class=\"token string\">\"rules.mobile\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>van<span class=\"token operator\">-</span>field<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 登录密码的表单项 <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span>van<span class=\"token operator\">-</span>field type<span class=\"token operator\">=</span><span class=\"token string\">\"password\"</span> v<span class=\"token operator\">-</span>model<span class=\"token operator\">=</span><span class=\"token string\">\"form.code\"</span> label<span class=\"token operator\">=</span><span class=\"token string\">\"登录密码\"</span> placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"请输入登录密码\"</span> required <span class=\"token operator\">:</span>rules<span class=\"token operator\">=</span><span class=\"token string\">\"rules.code\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>van<span class=\"token operator\">-</span>field<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<pre><code>  通过pattern进行正则校验\n mobile:[\n \t&#123; required: true, message: '1', trigger: 'onBlur' &#125;,\n \t&#123; pattern: /^1\\d&#123;10&#125;$/, message: '2', trigger: 'onBlur' &#125;\n ]\n</code></pre>\n</li>\n<li>\n<pre><code>  监听表单的提交事件\n  &lt;van-form @submit='login'&gt;&lt;/van-form&gt;\n  \n  methods:&#123;\n  \tlogin() &#123;\n  \t\tconsole.log(1)\n  \t&#125;\n  &#125;\n</code></pre>\n</li>\n<li>\n<pre><code>  封装登录的 API 接口\n  import request from '@/utils/request'\n  \n  export const loginAPI = data =&gt; &#123;\n  \treturn request.post('/v1_0/authorizations', data)\n  &#125;\n</code></pre>\n</li>\n<li>\n<pre><code>  调用登录的 API 接口\n  import loginAPI from '@/api/userAPI'\n  \n  methods:&#123;\n  \tasync login() &#123;\n  \t\tconst res = await loginAPI(this.form)\n  \t\tconsole.log(res)\n  \t&#125;\n  &#125;\n</code></pre>\n</li>\n<li>\n<pre><code>   使用解构赋值\n   methods: &#123;\n   \tasync login() &#123;\n   \t\tconst &#123; data: res &#125; = await loginAPI(this.form)\n   \t\tconsole.log(res)\n   \t\t\n   \t\tif (res.message === 'OK') &#123;\n   \t\t\t//\n   \t\t&#125;\n   \t&#125;\n   &#125;\n</code></pre>\n</li>\n</ol>\n<h4 id=\"4token的存储\"><a class=\"anchor\" href=\"#4token的存储\">#</a> 4.token 的存储</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tstate<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\ttokenInfo<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tmutations<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token comment\">// 更新 tokenInfo 数据的方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">updataTokenInfo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token comment\">// 把提交过来的 payload 对象，作为 tokenInfo 的值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\tstate<span class=\"token punctuation\">.</span>tokenInfo <span class=\"token operator\">=</span> payload</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 1. 按需导入辅助方法</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> mapMutations <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tmethods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>         <span class=\"token comment\">// 2. 映射 mutations 中的方法</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\t<span class=\"token operator\">...</span><span class=\"token function\">mapMutation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'updateTokenInfo'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\t<span class=\"token keyword\">async</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t\t\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> data<span class=\"token operator\">:</span> res <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">loginAPI</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\t\t\t</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> <span class=\"token string\">'OK'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token comment\">// 3. 把登录成功的结果，存储到 vuex 中</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>updateTokenInfo <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>data</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token comment\">// 4. 登录成功后，跳转到主页</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"5持久化存储state\"><a class=\"anchor\" href=\"#5持久化存储state\">#</a> 5. 持久化存储 state</h4>\n<blockquote>\n<p>存储在 vuex 中的数据都是<strong>内存数据</strong>，只要浏览器一刷新，vuex 的数据就被清空了。</p>\n<p>为了防止这个问题，我们可以把 vuex 中的数据持久化存储到浏览器的 <strong>localStorage</strong> 中。</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 将 state 持久化存储到本地</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">saveStateToStorage</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tlocalStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'state'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringfy</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">updateTokenInfo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tstate<span class=\"token punctuation\">.</span>tokenInfo <span class=\"token operator\">=</span> payload</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 如果希望在 Mutation A 中调用 Mutation B，需要通过 this.commit () 方法来实现</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  \t<span class=\"token comment\">//this 表示当前传入的 store 实例对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'saveStateToStorage'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>初始化 vuex 时加载本地的 state</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">let</span> initSate <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    tokenInfo<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">const</span> stateStr <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'state'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stateStr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 加载本地的数据</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    initState <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>stateStr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 为 state 赋初值</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    state<span class=\"token operator\">:</span> initState</pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"6axios拦截器\"><a class=\"anchor\" href=\"#6axios拦截器\">#</a> 6.axios 拦截器</h4>\n<p>经典使用场景就是 loading 页面 请求数据和返回数据都会触发拦截器</p>\n<ol>\n<li>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义请求拦截器的固定写法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> config</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义响应拦截器的固定写法：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> response</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<blockquote>\n<p><strong>基于 Vant 的</strong> <span class=\"exturl\" data-url=\"aHR0cHM6Ly92YW50LWNvbnRyaWIuZ2l0ZWUuaW8vdmFudC8jL3poLUNOL3RvYXN0\">Toast 轻提示</span> <strong>组件，可以方便的展示 loading 效果</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> Toast <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vant'</span></pre></td></tr></table></figure></blockquote>\n<pre><code>// 请求拦截器\n// 注意：在我们的项目中，是基于 instance 实例来发起 ajax 请求的，因此一定要为 instance 实例绑定请求拦截器\ninstance.interceptors.request.use(\n\tconfig =&gt; &#123;\n\t\tToast.loading(&#123;\n\t\t\tmessage: 'loading...',\n\t\t\tduration: 0 // 展示时长(ms)，值为 0 时，toast 不会消失\n\t\t&#125;)\n\t\treturn config\n\t&#125;,\n\terror =&gt; &#123;\n\t\treturn Promis.reject(error)\n\t&#125;\n)\n</code></pre>\n</li>\n<li>\n<pre><code>// 响应拦截器（注意：响应拦截器也应该绑定给 instance 实例）\ninstance.interceptors.response.use(\n\tconfig =&gt; &#123;\n\t\tToast.clear()\n\t\treturn response\n\t&#125;,\n\terror =&gt; &#123;\n\t\treturn Promise.reject(error)\n\t&#125;\n)\n</code></pre>\n</li>\n<li>\n<p>基于拦截器添加 token 认证</p>\n</li>\n</ol>\n<blockquote>\n<p>在  <code>request.js</code>  模块中导入 vuex 的模块：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">'@/store/index'</span></pre></td></tr></table></figure></blockquote>\n<pre><code>instance.interceptors.request.use(\n\tconfig =&gt; &#123;\n\t\t// 1. 获取 token 值\n\t\tconst tokenStr = store.state.tokenInfo.token\n\t\t// 2. 判断 tokenStr 的值是否为空\n\t\tif (tokenStr) &#123;\n\t\t\t//3. 如果 tokenStr 的值不为空， 则为这次请求的请求头添加 Authorization 身份认证字段：\n\t\t\tconfig.headers.Authorization = 'Bearer $&#123;tokenStr&#125;'\n\t\t&#125;\n\t\treturn config\n\t&#125;,\n\tfunction(error) &#123;\n\t\treturn Promise.reject(error)\n\t&#125;\n)\n</code></pre>\n<p>tips：Vue 官方建议在绑定 props 时，把 “小驼峰” 的属性名，改造成 “短横线” 的形式使用</p>\n<h4 id=\"7初步封装-artlist-组件\"><a class=\"anchor\" href=\"#7初步封装-artlist-组件\">#</a> 7. 初步封装 ArtList 组件</h4>\n<ol>\n<li>\n<pre><code>&lt;template&gt;\n  &lt;div&gt;文章列表组件&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  name: 'ArtList'\n&#125;\n&lt;/script&gt;\n\n&lt;style lang=&quot;less&quot; scoped&gt;&lt;/style&gt;\n</code></pre>\n</li>\n<li>\n<pre><code>import ArtList from '@/components/ArtList/ArtList.vue'\n</code></pre>\n</li>\n<li>\n<pre><code>components: &#123;\n  ArtList\n&#125;\n&lt;template&gt;\n\n&lt;!-- 频道列表的标签页 --&gt;\n&lt;van-tabs v-model=&quot;active&quot; sticky offset-top=&quot;1.22666667rem&quot;&gt;\n  &lt;!-- 循环渲染用户的频道 --&gt;\n  &lt;van-tab v-for=&quot;item in userChannel&quot; :key=&quot;item.id&quot; :title=&quot;item.name&quot;&gt;\n    &lt;!-- 在每一个用户频道下，渲染出对应的“文章列表组件” --&gt;\n    &lt;art-list&gt;&lt;/art-list&gt;\n  &lt;/van-tab&gt;\n&lt;/van-tabs&gt;\n</code></pre>\n</li>\n</ol>\n<p>封装 channelId 属性 父向子传值 props</p>\n<ol>\n<li>\n<pre><code>export default &#123;\n  name: 'ArtList',\n  props: &#123;\n    // 频道 Id（小驼峰命名法：第一个单词全部小写，后面的单词首字母大写）\n    channelId: &#123;\n      type: Number, // 数值类型\n      required: true // 必填项\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n</li>\n<li>\n<pre><code>&lt;van-tabs v-model=&quot;active&quot; sticky offset-top=&quot;1.22666667rem&quot;&gt;\n  &lt;van-tab v-for=&quot;item in userChannel&quot; :key=&quot;item.id&quot; :title=&quot;item.name&quot;&gt;\n    &lt;!-- 注意：Vue 官方建议在绑定 props 时，把“小驼峰”的属性名，改造成“短横线”的形式使用 --&gt;\n    &lt;art-list :channel-id=&quot;item.id&quot;&gt;&lt;/art-list&gt;\n  &lt;/van-tab&gt;\n&lt;/van-tabs&gt;\n</code></pre>\n</li>\n<li>\n<pre><code>&lt;template&gt;\n  &lt;div&gt;文章列表组件 --- &#123;&#123;channelId&#125;&#125;&lt;/div&gt;\n&lt;/template&gt;\n</code></pre>\n</li>\n</ol>\n<h4 id=\"8上拉加载\"><a class=\"anchor\" href=\"#8上拉加载\">#</a> 8. 上拉加载</h4>\n<ol>\n<li>\n<pre><code>声明数据\ndata() &#123;\n\treturn &#123;\n\t\tloading: false,\n\t\tfinished: false\n\t&#125;\n&#125;\n</code></pre>\n</li>\n<li>\n<pre><code>在 ArtList.vue 组件的模板结构中，使用 &lt;van-list&gt; 组件将 &lt;art-item&gt; 组件包裹起来：\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;van-list v-model=&quot;loading&quot; :finished=&quot;finished&quot; finished-text=&quot;没有更多了&quot; @load=&quot;onLoad&quot;&gt;\n      &lt;!-- 循环渲染文章的列表 --&gt;\n      &lt;art-item v-for=&quot;item in artlist&quot; :key=&quot;item.art_id&quot; :article=&quot;item&quot;&gt;&lt;/art-item&gt;\n    &lt;/van-list&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>\n</li>\n<li>\n<pre><code>methods: &#123;\n  // 加载更多的数据\n  onLoad() &#123;\n    console.log('触发了上拉加载更多')\n  &#125;\n&#125;\n</code></pre>\n</li>\n</ol>\n<p>tips: 经过翻阅 Vant 的官方文档，发现可以为  <code>&lt;van-list&gt;</code>  组件绑定  <code>:immediate-check=&quot;false&quot;</code>  属性，即可防止首次加载时触发 load 事件：</p>\n<ol start=\"4\">\n<li>\n<pre><code>// 调用 initArtList 方法\nonLoad() &#123;\n  console.log('触发了上拉加载更多')\n  this.initArtList()\n&#125;\n</code></pre>\n</li>\n<li>\n<pre><code>// 初始化文章的列表数据\nasync initArtList() &#123;\n  // 请求 API 接口\n  const &#123; data: res &#125; = await getArtListAPI(this.channelId)\n  if (res.message === 'OK') &#123;\n    // 为时间戳重新赋值\n    this.timestamp = res.data.pre_timestamp\n    // 1. 上拉加载更多时，应该是“旧数据”在前，“新数据”在后\n    this.artlist = [...this.artlist, ...res.data.results]\n    // 2. 重置 loading 为 false\n    this.loading = false\n    // 3. 判断所有的数据是否已加载完毕\n    if (res.data.pre_timestamp === null) &#123;\n      this.finished = true\n    &#125;\n  &#125;\n&#125;,\n</code></pre>\n</li>\n</ol>\n<h4 id=\"9下拉刷新\"><a class=\"anchor\" href=\"#9下拉刷新\">#</a> 9. 下拉刷新</h4>\n<ol>\n<li>\n<pre><code>data() &#123;\n  return &#123;\n    // 是否正在进行下拉刷新的请求\n    isLoading: false\n  &#125;\n&#125;\n</code></pre>\n</li>\n<li>\n<pre><code>在 &lt;van-list&gt; 之外包裹实现下拉刷新的 &lt;van-pull-refresh&gt; 组件：\n&lt;template&gt;\n  &lt;div&gt;\n    &lt;!-- 下拉刷新 --&gt;\n    &lt;van-pull-refresh v-model=&quot;isLoading&quot; @refresh=&quot;onRefresh&quot;&gt;\n      &lt;!-- 上拉加载更多 --&gt;\n      &lt;van-list v-model=&quot;loading&quot; :finished=&quot;finished&quot; finished-text=&quot;没有更多了&quot; @load=&quot;onLoad&quot; :immediate-check=&quot;false&quot;&gt;\n        &lt;!-- 循环渲染文章的列表 --&gt;\n        &lt;art-item v-for=&quot;item in artlist&quot; :key=&quot;item.art_id&quot; :article=&quot;item&quot;&gt;&lt;/art-item&gt;\n      &lt;/van-list&gt;\n    &lt;/van-pull-refresh&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>\n</li>\n<li>\n<pre><code>methods: &#123;\n  // 下拉刷新\n  onRefresh() &#123;\n    console.log('触发了下拉刷新')\n    this.initArtList(true)\n  &#125;\n&#125;\n</code></pre>\n</li>\n<li>\n<pre><code>改造 methods 中的 initArtList 函数，通过形参接收调用者传递过来的值：\nmethods: &#123;\n  // 初始化文章的列表数据\n  // 如果 isRefresh 的值为 true，证明是下拉刷新，在最终拼接数据时，应该是“新数据”在前，“旧数据”在后\n  // 如果 isRefresh 的值不为 true，证明不是下拉刷新，则拼接数据时，应该是“旧数据”在前，“新数据”在后\n  async initArtList(isRefresh) &#123;\n    // 省略其它代码...\n  &#125;\n&#125;\n</code></pre>\n</li>\n<li>\n<pre><code>// 初始化文章的列表数据\nasync initArtList(isRefresh) &#123;\n  // 请求 API 接口\n  const &#123; data: res &#125; = await getArtListAPI(this.channelId)\n  if (res.message === 'OK') &#123;\n    // 为时间戳重新赋值\n    this.timestamp = res.data.pre_timestamp\n    // 判断是否为下拉刷新\n    if (isRefresh) &#123;\n      // 下拉刷新\n      // 1. “新数据”在前，“旧数据”在后\n      this.artlist = [...res.data.results, ...this.artlist]\n      // 2. 重置 isLoading 为 false\n      this.isLoading = false\n    &#125; else &#123;\n      // 上拉加载\n      // 1. “旧数据”在前，“新数据”在后\n      this.artlist = [...this.artlist, ...res.data.results]\n      // 2. 重置 loading 为 false\n   this.loading = false\n    &#125;\n\n    // 3. 判断所有的数据是否已加载完毕\n    if (res.data.pre_timestamp === null) &#123;\n      this.finished = true\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n</li>\n<li>\n<pre><code>没有更多数据时，禁用下拉刷新的效果：\n&lt;van-pull-refresh v-model=&quot;isLoading&quot; @refresh=&quot;onRefresh&quot; :disabled=&quot;finished&quot;&gt;&lt;/van-pull-refresh&gt;\n</code></pre>\n</li>\n</ol>\n<h4 id=\"10dayjs\"><a class=\"anchor\" href=\"#10dayjs\">#</a> 10.day.js</h4>\n<ol>\n<li>\n<pre><code>npm install dayjs --save\n</code></pre>\n</li>\n<li>\n<pre><code>// 导入 dayjs 的核心模块\nimport dayjs from 'dayjs'\n// 导入计算相对时间的插件\nimport relativeTime from 'dayjs/plugin/relativeTime'\n// 导入中文语言包\nimport zh from 'dayjs/locale/zh-cn'\n</code></pre>\n</li>\n<li>\n<pre><code>// 配置“计算相对时间”的插件\ndayjs.extend(relativeTime)\n// 配置中文语言包\ndayjs.locale(zh)\n</code></pre>\n</li>\n<li>\n<pre><code>// dt 参数是文章的发表时间\nVue.filter('dateFormat', dt =&gt; &#123;\n  // 调用 dayjs() 得到的是当前的时间\n  // .to() 方法的返回值，是计算出来的“相对时间”\n  return dayjs().to(dt)\n&#125;)\n</code></pre>\n</li>\n</ol>\n<h4 id=\"11懒加载\"><a class=\"anchor\" href=\"#11懒加载\">#</a> 11. 懒加载</h4>\n<ol>\n<li>\n<pre><code>import vant, &#123; Lazyload &#125; from 'vant'\n</code></pre>\n</li>\n<li>\n<pre><code>Vue.use(Lazyload)\n</code></pre>\n</li>\n<li>\n<p>在  <code>ArtItem.vue</code>  组件中，删除  <code>&lt;img&gt;</code>  标签的  <code>src</code>  属性，并应用  <code>v-lazy</code>  指令，指令的值是 <code>要展示的图片地址</code> ：</p>\n<pre><code>&lt;!-- 单张图片 --&gt;\n&lt;img alt=&quot;&quot; class=&quot;thumb&quot; v-if=&quot;article.cover.type === 1&quot; v-lazy=&quot;article.cover.images[0]&quot;&gt;\n\n&lt;!-- 三张图片 --&gt;\n&lt;div class=&quot;thumb-box&quot; v-if=&quot;article.cover.type === 3&quot;&gt;\n  &lt;img alt=&quot;&quot; class=&quot;thumb&quot; v-for=&quot;(item, index) in article.cover.images&quot; :key=&quot;index&quot; v-lazy=&quot;item&quot;&gt;\n&lt;/div&gt;\n</code></pre>\n</li>\n</ol>\n<h4 id=\"12子向父传值\"><a class=\"anchor\" href=\"#12子向父传值\">#</a> 12. 子向父传值</h4>\n<ol>\n<li>\n<pre><code>//在 ArtItem.vue 组件中，通过 this.$emit() 触发自定义事件，把要删除的文章 Id 传递给父组件：\n// 一级选项的点击事件处理函数\nasync onCellClick(name) &#123;\n  if (name === '不感兴趣') &#123;\n    // 调用 API 接口，将文章设置为不感兴趣\n    const &#123; data: res &#125; = await dislikeArticleAPI(this.artId)\n    if (res.message === 'OK') &#123;\n      // TODO：炸楼的操作，触发自定义的事件，将文章 id 发送给父组件\n      this.$emit('remove-article', this.artId)\n    &#125;\n    this.show = false\n  &#125;\n\n  // 省略其它代码...\n&#125;\n</code></pre>\n</li>\n<li>\n<pre><code>在 ArtList.vue 组件中使用 ArtItem.vue 组件时，监听 ArtItem.vue 组件的 @remove-article 事件：\n&lt;!-- 循环渲染文章的列表 --&gt;\n&lt;art-item\n   v-for=&quot;item in artlist&quot;\n   :key=&quot;item.art_id.toString()&quot;\n   :article=&quot;item&quot;\n   @remove-article=&quot;removeArticle&quot;\n  &gt;\n&lt;/art-item&gt;\n</code></pre>\n</li>\n<li>\n<pre><code>在 ArtList.vue 组件的 methods 中，声明 removeArticle 方法如下：\nmethods: &#123;\n\tremoveArticle(id) &#123;\n\t\tthis.artlist = this.artlist.filter(item =&gt; item.art_id.toString() !== id )\n\t&#125;\n&#125;\n</code></pre>\n<blockquote>\n<p>问题描述：炸楼之后，如果文章列表的数据不足以撑满整个屏幕，会导致上拉加载和下拉刷新不生效的问题</p>\n<p>解决方案：每次炸楼之后，判断剩余数据的文章数量是否小于 10，如果小于 10，则主动请求下一页的数据</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 从文章列表中移除指定 id 的文章</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">removeArticle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 1. 炸楼操作</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>artlist <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>artlist<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>art_id<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 2. 判断剩余数据的文章数量是否小于 10</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>artlist<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\">// 主动请求下一页的数据</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initArtList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"13updatechannel-不会\"><a class=\"anchor\" href=\"#13updatechannel-不会\">#</a> 13.updateChannel （不会）</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>动态计算更多频道的数据</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>computed<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 更多频道的数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token function\">moreChannels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 1. 对数组进行 filter 过滤，返回的是符合条件的新数组</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>allChannel<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">// 判断当前循环项，是否在 “我的频道” 列表之中</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userChannel<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\">// 如果不在，则 return true，表示需要把这一项存储到返回的新数组之中</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><pre><code>methods: &#123;\n  // 把用户的频道列表数据提交到后端保存\n  async updateChannel(item) &#123;\n    // 1. 准备要提交到服务器的数据\n    const channels = this.userChannel\n      .filter(item =&gt; item.name !== '推荐') // 将“推荐”从频道列表中过滤出去\n      .map((item, index) =&gt; &#123;               // 调用数组的 map 循环，最终返回一个处理好的新数组\n        return &#123;\n          id: item.id,\n          seq: index + 1\n        &#125;\n      &#125;)\n\n    // 2. 调用 API 接口\n    const &#123; data: res &#125; = await updateUserChannelAPI(channels)\n    if (res.message === 'OK') &#123;\n      // TODO：提示用户更新成功\n    &#125;\n  &#125;\n&#125;\n</code></pre>\n<pre><code>methods: &#123;\n  // 新增频道（形参 item 就是当前用户点击的频道信息对象）\n  // 格式：&#123; id, name &#125;\n  addChannel(item) &#123;\n    // 将用户点击的频道，添加到“用户频道”列表中\n    this.userChannel.push(item)\n\n    // 调用 updateChannel 方法，把最新的频道列表数据提交到后端保存\n    this.updateChannel()\n  &#125;,\n&#125;\n</code></pre>\n<h4 id=\"14实现输入框的防抖\"><a class=\"anchor\" href=\"#14实现输入框的防抖\">#</a> 14. 实现输入框的防抖</h4>\n<blockquote>\n<p><strong>节流</strong>：单位时间内，重复的操作只会触发 1 次</p>\n<p><strong>防抖</strong>：频繁触发某个操作时，仅触发最后 1 次</p>\n</blockquote>\n<pre><code>methods: &#123;\n  // 搜索组件的输入事件\n  onInput() &#123;\n    // 2. 清除上次的延时器\n    clearTimeout(this.timerId)\n    \n    // 3. 如果输入的内容为空，则 return 出去，不开启延时器\n    if (this.kw.length === 0) return\n    \n    // 1. 开启延时器，将延时器的 id 存储到 this.timerId 中\n    this.timerId = setTimeout(() =&gt; &#123;\n      console.log(this.kw)\n    &#125;, 500)\n  &#125;\n&#125;\n</code></pre>\n<pre><code>// 输入的搜索关键词为空\n  if (this.kw.length === 0) &#123;\n    // 清空搜索建议的列表数据\n    this.suggestList = []\n    return\n  &#125;\n</code></pre>\n<h4 id=\"15高亮搜索关键词\"><a class=\"anchor\" href=\"#15高亮搜索关键词\">#</a> 15. 高亮搜索关键词</h4>\n<blockquote>\n<p>要想实现搜索关键词的高亮效果，需要用到 字符串的 replace 方法以及正则表达式</p>\n</blockquote>\n<p>通过  <code>new RegExp()</code>  来<strong>动态创建</strong>正则表达式：</p>\n<pre><code>// 关键词\nconst kw = 'js'\n// 待处理的字符串\nconst str = 'JS ArrayBuffer about js'\n\n// 1. 动态创建正则表达式\nconst reg = new RegExp(kw, 'ig')\n// 2. 调用字符串的 replace 进行替换\nconst newStr = str.replace(reg, 'javascript')\n\n// 3. 替换的结果 javascript ArrayBuffer about javascript\nconsole.log(newStr)\n\n// 缺点：无法拿到每一次正则匹配的结果\n</code></pre>\n<p>将  <code>replace</code>  方法的<strong>第二个参数</strong>指定为<strong>回调函数</strong>：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 关键词</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> kw <span class=\"token operator\">=</span> <span class=\"token string\">'js'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 待处理的字符串</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'JS ArrayBuffer about js'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 1. 动态创建正则表达式</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> reg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span>kw<span class=\"token punctuation\">,</span> <span class=\"token string\">'ig'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 2. 调用字符串的 replace 进行替换，第二个参数为回调函数。其中 val 是匹配到的值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> newStr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">,</span> <span class=\"token parameter\">val</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;span></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>val<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 3. 替换的结果 &lt;span>JS&lt;/span> ArrayBuffer about &lt;span>js&lt;/span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newStr<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>实现关键词的高亮功能</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 高亮搜索关键词的方法，形参中的 arr 是搜索建议的数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">hlightKeywords</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 1. 根据用户输入的 kw，动态创建正则表达式</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> reg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>kw<span class=\"token punctuation\">,</span> <span class=\"token string\">'ig'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 循环数组中的每一项</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 2. 调用字符串的 replace 方法进行关键字的高亮处理</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    arr<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">,</span> <span class=\"token parameter\">val</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;span style=\"color: red; font-weight: bold;\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>val<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/span></span><span class=\"token template-punctuation string\">`</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"16跳转到搜索结果页\"><a class=\"anchor\" href=\"#16跳转到搜索结果页\">#</a> 16. 跳转到搜索结果页</h4>\n<p>e.currentTarget 是当正在触发事件的那个元素</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 跳转到搜索结果页</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">gotoSearchResult</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">//e.currentTarget 是当正在触发事件的那个元素</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// console.log(e.currentTarget.innerText)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 1. 获取用户当前点击的搜索建议项的内容</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">const</span> kw <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>innerText</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 2. 通过编程式导航 API，跳转到搜索结果页</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/search/'</span> <span class=\"token operator\">+</span> kw<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"17-将搜索关键词存为搜索历史\"><a class=\"anchor\" href=\"#17-将搜索关键词存为搜索历史\">#</a> 17. 将搜索关键词存为搜索历史</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 请求搜索建议列表数据的方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token function\">initSuggestList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 调用 API 接口</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> data<span class=\"token operator\">:</span> res <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getSuggestListAPI</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>kw<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>message <span class=\"token operator\">===</span> <span class=\"token string\">'OK'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 高亮搜索建议中的搜索关键词</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hlightKeywords</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 为 suggestList 数据赋值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>suggestList <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>options</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 把搜索关键词加入到搜索历史中</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 先保证没有再加</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">const</span> newHistory <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>kw<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    newHistory<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>kw<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>history <span class=\"token operator\">=</span> newHistory</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h4 id=\"18持久化存储搜索历史\"><a class=\"anchor\" href=\"#18持久化存储搜索历史\">#</a> 18. 持久化存储搜索历史</h4>\n<pre><code>watch: &#123;\n  // 监视历史记录的变化\n  history(newVal) &#123;\n    // 持久化存储到本地\n    localStorage.setItem('history', JSON.stringify(newVal))\n  &#125;\n&#125;\n</code></pre>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 省略其它数据项...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 搜索历史</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    history<span class=\"token operator\">:</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'history'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token string\">'[]'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>19. 评论自动获得焦点</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 展示第二个评论区域</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">showBox2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 隐藏评论区域 1，展示评论区域 2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isShowBox1 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 1. 将回调函数延迟到下次 DOM 更新完毕之后执行</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 2. 通过 ref 获取到 textarea 的引用</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>iptCmt<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h4 id=\"19-初始化用户的基本信息\"><a class=\"anchor\" href=\"#19-初始化用户的基本信息\">#</a> 19. 初始化用户的基本信息</h4>\n<pre><code>action: &#123;\n\tasync initUserInfo(ctx) &#123;\n\t\tconst &#123; data: res &#125; = await getUserInfoAPI()\n\t\tif(res.message === 'OK') &#123;\n\t\tctx.commit('updateUserInfo', res.data)\n\t\t&#125;\n\t&#125;\n&#125;\n</code></pre>\n<h4 id=\"20渲染退出登录的确认提示框\"><a class=\"anchor\" href=\"#20渲染退出登录的确认提示框\">#</a> 20. 渲染退出登录的确认提示框</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 点击了退出登录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token function\">logout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 展示确认的提示框</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> confirmResult <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$dialog</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      title<span class=\"token operator\">:</span> <span class=\"token string\">'提示'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      message<span class=\"token operator\">:</span> <span class=\"token string\">'确认退出登录吗？'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">//err 是错误的结果</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token comment\">// 这里把 err return 给了 confirmResult</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">return</span> err</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 如果点击了取消，则不执行后续的操作</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>confirmResult <span class=\"token operator\">===</span> <span class=\"token string\">'cancel'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">// TODO：实现退出的登录操作：</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">// 1. 清空 vuex 中的数据</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token comment\">// 2. 清空本地的数据</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">cleanState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token comment\">// 3. 跳转到登录页</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"21-更新用户的简介信息\"><a class=\"anchor\" href=\"#21-更新用户的简介信息\">#</a> 21. 更新用户的简介信息</h4>\n<p>如果请求接口失败，且报错的消息是 <code>409 (CONFLICT)</code> ，则证明当前提交的名称被占用了，需要进行  <code>try...catch</code>  的处理：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 更新用户的简介信息</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token function\">updateName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">done</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> data<span class=\"token operator\">:</span> res <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">updateUserProfileAPI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>message <span class=\"token operator\">===</span> <span class=\"token string\">'OK'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\">// 关闭对话框</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">// 重新请求用户的简介信息</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initUserProfile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token comment\">// 提示用户更新成功</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'success'</span><span class=\"token punctuation\">,</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'名称更新成功！'</span><span class=\"token punctuation\">,</span> duration<span class=\"token operator\">:</span> <span class=\"token number\">2000</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">409</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">// 提示用户名称被占用</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'warning'</span><span class=\"token punctuation\">,</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'名称被占用，请更换后重试！'</span><span class=\"token punctuation\">,</span> duration<span class=\"token operator\">:</span> <span class=\"token number\">2000</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token comment\">// 阻止关闭对话框</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token comment\">// 让文本框持续获得焦点</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>nameRef<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token comment\">// 关闭对话框</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>      <span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token comment\">// 提示用户名称被占用</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'danger'</span><span class=\"token punctuation\">,</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'名称更新失败！'</span><span class=\"token punctuation\">,</span> duration<span class=\"token operator\">:</span> <span class=\"token number\">2000</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"22修改头像\"><a class=\"anchor\" href=\"#22修改头像\">#</a> 22. 修改头像</h4>\n<p>点击头像时展示文件选择框</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 文件选择框 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">accept</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/*<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@change</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>onFileChange<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">v-show</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ref</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fileRef<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 用户的头像 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>van-image</span> <span class=\"token attr-name\">round</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>avatar<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>userProfile.photo<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">@click</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$refs.fileRef.click()<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 选中的文件发生了变化</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token function\">onFileChange</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 获取到用户选择的文件列表</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> files <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>files</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 如果没有选择任何文件，则不执行后续的业务逻辑</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>files<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 1.1 创建 FormData 的对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">const</span> fd <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 1.2 向 fd 中追加数据项</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  fd<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'photo'</span><span class=\"token punctuation\">,</span> files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token comment\">// 2. 调用 API 接口，更新头像</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> data<span class=\"token operator\">:</span> res <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">updateUserAvatarAPI</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>message <span class=\"token operator\">===</span> <span class=\"token string\">'OK'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 2.1 更新用户的简介信息</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initUserProfile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 2.2 提示用户更新成功</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$notify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'success'</span><span class=\"token punctuation\">,</span> message<span class=\"token operator\">:</span> <span class=\"token string\">'更新头像成功！'</span><span class=\"token punctuation\">,</span> duration<span class=\"token operator\">:</span> <span class=\"token number\">2000</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"23socketio-client-的基本使用\"><a class=\"anchor\" href=\"#23socketio-client-的基本使用\">#</a> 23.socket.io-client 的基本使用</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i socket.io-client@4.0.0 -S</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 如果 npm 无法成功安装 socket.io-client，可以尝试用 yarn 来装包</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># yarn add socket.io-client@4.0.0</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 按需导入 io 方法：调用 io ('url') 方法，即可创建 websocket 连接的实例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> io <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'socket.io-client'</span></pre></td></tr></table></figure><p>事先定义变量 socket，用来接收 io () 方法创建的 socket 实例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> socket <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr></table></figure><p>在  <code>Chat.vue</code>  组件的  <code>created</code>  生命周期函数中，创建 websocket 实例对象：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">created</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 创建客户端 websocket 的实例</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  socket <span class=\"token operator\">=</span> <span class=\"token function\">io</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ws://www.liulongbin.top:9999'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在  <code>Chat.vue</code>  组件的  <code>beforeDestroy</code>  生命周期函数中，<strong>关闭 websocket 连接</strong>并<strong>销毁 websocket 实例对象</strong>：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 组件被销毁之前，清空 sock 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">beforeDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 关闭连接</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  socket<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 销毁 websocket 实例对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  socket <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在  <code>Chat.vue</code>  组件的  <code>created</code>  生命周期函数中，调用  <code>socket.on('connect', fn)</code>  方法，可以监听到 socket 连接成功的事件：调用  <code>socket.on('disconnect', fn)</code>  方法，可以监听到 socket 连接关闭的事件：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 建立连接的事件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connect'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connect: websocket 连接成功！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 关闭连接的事件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'disconnect'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'disconnect: websocket 连接关闭！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>接收服务器发送的消息</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 接收到消息的事件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">msg</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 接收到消息的事件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>socket<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">msg</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 把服务器发送过来的消息，存储到 list 数组中</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'xs'</span><span class=\"token punctuation\">,</span> msg <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>客户端调用  <code>socket.emit('send', '消息内容')</code>  方法，即可向 websocket 服务器发送消息：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 提交按钮的点击事件处理函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 如果输入的聊天内容为空，则 return 出去</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>word<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 向服务器发送消息</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  socket<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'send'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>word<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 将用户填写的消息存储到 list 数组中</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'me'</span><span class=\"token punctuation\">,</span> msg<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>word <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 清空文本框中的消息内容</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>word <span class=\"token operator\">=</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"24elementscrollintoview\"><a class=\"anchor\" href=\"#24elementscrollintoview\">#</a> 24.Element.scrollIntoView()</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 滚动到页面底部</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">scrollToBottom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 1. 获取到所有的聊天 Item 项</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> chatItem <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.chat-item'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 2. 获取到最后一项对应的 DOM 元素</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">const</span> lastItem <span class=\"token operator\">=</span> chatItem<span class=\"token punctuation\">[</span>chatItem<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 3. 滚动元素的父容器，使被调用 scrollIntoView () 的元素对用户可见</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  lastItem<span class=\"token punctuation\">.</span><span class=\"token function\">scrollIntoView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    behavior<span class=\"token operator\">:</span> <span class=\"token string\">'smooth'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 定义垂直方向的对齐（end 表示元素的底端将和其所在滚动区的可视区域的底端对齐）</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    block<span class=\"token operator\">:</span> <span class=\"token string\">'end'</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在  <code>Chat.vue</code>  组件中定义  <code>watch</code>  侦听器，监视  <code>list</code>  数组的变化，从而自动滚动到页面底部：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>watch<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 监视到 list 数据变化后，等 DOM 更新完毕，再执行滚动到底部的操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$nextTick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">scrollToBottom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"25全局前置守卫\"><a class=\"anchor\" href=\"#25全局前置守卫\">#</a> 25. 全局前置守卫</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 所有有权限页面的路径，都在这个数组之中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> pagePathArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'/user'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/user/edit'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 为路由的实例对象挂载全局前置守卫</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pagePathArr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 访问的是有权限的页面，需要判断用户是否登录</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 访问的是没有权限的页面</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 所有有权限页面的路径，都在这个数组之中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> pagePathArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'/user'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/user/edit'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 为路由的实例对象挂载全局前置守卫</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 访问的是有权限的页面，需要判断用户是否登录</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pagePathArr<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 1. 从 store 中获取 token 的值</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//    注意：store.state.tokenInfo 要么是 &#123;&#125; 空对象，要么是包含 &#123;token, refresh_token&#125; 的对象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">const</span> tokenStr <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>tokenInfo<span class=\"token punctuation\">.</span>token</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tokenStr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token comment\">// 1.1 token 有值，已登录过（操作：直接放行）</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">// 1.2 token 不存在，没有登录（操作：强制跳转到登录页）</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 访问的是没有权限的页面</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"26-记录上次访问未遂的路由地址\"><a class=\"anchor\" href=\"#26-记录上次访问未遂的路由地址\">#</a> 26. 记录上次访问未遂的路由地址</h4>\n<blockquote>\n<p>如果用户没有登录，要访问 /user 地址，则会强制跳转到 /login 登录页</p>\n<p>当用户登录成功之后，应该自动跳转到用户刚才访问未遂的路由地址，即：登录成功之后，跳转到 /user</p>\n</blockquote>\n<p>1. 在路由模块的导航守卫中，修改强制跳转到登录的代码：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//before：没有登录，强制跳转到登录页</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//now：没有登录，强制跳转到登录页，并携带路由的 \"query 查询参数\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">/login?pre=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>to<span class=\"token punctuation\">.</span>fullPath<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>2. 在  <code>/src/views/Login/Login.vue</code>  组件中，进一步改造登录的方法：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token function\">login</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 只有当表单数据校验通过之后，才会调用此 login 函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> data<span class=\"token operator\">:</span> res <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">loginAPI</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>form<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 判断是否登录成功了</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>message <span class=\"token operator\">===</span> <span class=\"token string\">'OK'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 1. 把登录成功的结果，存储到 vuex 中</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateTokenInfo</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 2. 要跳转到首页</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">const</span> navPath <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$route<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>pre <span class=\"token operator\">||</span> <span class=\"token string\">'/'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>navPath<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"27-token-续签\"><a class=\"anchor\" href=\"#27-token-续签\">#</a> 27. Token 续签</h4>\n<blockquote>\n<p>两种主流方案：</p>\n<ol>\n<li>只要发现 Token 过期，则<strong>强制用户跳转到登录页</strong>，并清空<strong>本地</strong>和 <strong>Vuex</strong> 中的关键数据！</li>\n<li>如果发现 Token 过期，则自动基于 refresh_token <strong>无感知地请求一个新 Token 回来</strong>。在替换掉旧 Token 的同时，继续上次未完成的请求！</li>\n</ol>\n</blockquote>\n<p>方案 1：强制跳转到登录页</p>\n<pre><code>// 响应拦截器\ninstance.interceptors.response.use(\n  response =&gt; &#123;\n    // 隐藏 loading 提示效果\n    Toast.clear()\n    return response\n  &#125;,\n  error =&gt; &#123;\n    // 在请求失败的时候，关闭 loading 提示效果\n    Toast.clear()\n\n    // 如果有响应的结果，并且响应的状态码是 401，则证明 Token 过期了\n    if (error.response &amp;&amp; error.response.status === 401) &#123;\n      console.log('token 过期啦')\n      // TODO1：清空 vuex 和 localStorage 中的数据\n      // TODO2：强制跳转到登录页，并通过路由的 query 查询参数，把当前用户访问未遂的路由地址带给登录页\n    &#125;\n    return Promise.reject(error)\n  &#125;\n)\n</code></pre>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 如果有响应的结果，并且响应的状态码是 401，则证明 Token 过期了</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>response <span class=\"token operator\">&amp;&amp;</span> error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">401</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token 过期啦'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// TODO1：清空 vuex 和 localStorage 中的数据</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cleanState'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// TODO2：强制跳转到登录页，并通过路由的 query 查询参数，把当前用户 “访问未遂的路由地址” 带给登录页</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  router<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login?pre='</span> <span class=\"token operator\">+</span> router<span class=\"token punctuation\">.</span>currentRoute<span class=\"token punctuation\">.</span>fullPath<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>方案 2：无感知刷新 Token</p>\n<p><img data-src=\"http://doc.toutiao.liulongbin.top/assets/img/13-1.ccdb8ae9.png\" alt=\"img\" /></p>\n<p>在响应拦截器中监听 Token 过期的情况</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 响应拦截器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>instance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 隐藏 loading 提示效果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Toast<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> response</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Toast<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 1. 从 vuex 中获取 tokenInfo 对象，格式为： &#123;token, refresh_token&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">const</span> tokenInfo <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>tokenInfo</pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 2. 判断是否为 token 过期</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>response <span class=\"token operator\">&amp;&amp;</span> error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">401</span> <span class=\"token operator\">&amp;&amp;</span> tokenInfo<span class=\"token punctuation\">.</span>refresh_token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token comment\">//token 过期</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token过期啦'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token comment\">// 3.1 TODO: 发起请求，根据 refresh_token 重新请求一个有效的新 token</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p>在请求新 Token 时，不要基于  <code>/src/utils/request.js</code>  模块中的 instance 发起请求，</p>\n<p>因为 instance 发起请求时，默认携带的 Authorization 值为 tokenInfo.token 属性！！！</p>\n</blockquote>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 换取 Token 的 API（形参中的 refreshToken 用来换取新 token）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">exchangeTokenAPI</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">refreshToken</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    method<span class=\"token operator\">:</span> <span class=\"token string\">'PUT'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 这里必须填写完整的请求 URL 地址</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">'http://www.liulongbin.top:8000/v1_0/authorizations'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token comment\">// 在请求头中携带 Authorization 身份认证字段</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      Authorization<span class=\"token operator\">:</span> <span class=\"token string\">'Bearer '</span> <span class=\"token operator\">+</span> refreshToken</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>重新调用刚才请求未遂的接口，处理 refresh_token 失效的情况</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 响应拦截器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>instance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 隐藏 loading 提示效果</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Toast<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> response</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">async</span> <span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    Toast<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 1. 从 vuex 中获取 tokenInfo 对象，格式为： &#123;token, refresh_token&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">const</span> tokenInfo <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>tokenInfo</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 2. 判断是否为 token 过期</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>response <span class=\"token operator\">&amp;&amp;</span> error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">401</span> <span class=\"token operator\">&amp;&amp;</span> tokenInfo<span class=\"token punctuation\">.</span>refresh_token<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token comment\">//token 过期</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'token过期啦'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 3.1 TODO: 发起请求，根据 refresh_token 重新请求一个有效的新 token</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span> data<span class=\"token operator\">:</span> res <span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">exchangeTokenAPI</span><span class=\"token punctuation\">(</span>tokenInfo<span class=\"token punctuation\">.</span>refresh_token<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 3.2 TODO: 更新 Store 中的 Token</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'updateTokenInfo'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span> token<span class=\"token operator\">:</span> res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">,</span> refresh_token<span class=\"token operator\">:</span> tokenInfo<span class=\"token punctuation\">.</span>refresh_token <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 3.3 重新调用刚才 “请求未遂” 的接口</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 3.3.1 如果在响应拦截器中 return 一个新的 Promise 异步请求，则会把这次请求的结果，当作上次请求的返回值</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">instance</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">//  token 和 refresh_token 都失效了</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 4.1 清空 vuex 和 localStorage</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cleanState'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token comment\">// 4.2 强制跳转到登录页</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        router<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/login?pre='</span> <span class=\"token operator\">+</span> router<span class=\"token punctuation\">.</span>currentRoute<span class=\"token punctuation\">.</span>fullPath<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>error.config</code>  就是上一次的请求信息</p>\n<h4 id=\"28实现-main-组件的状态保持\"><a class=\"anchor\" href=\"#28实现-main-组件的状态保持\">#</a> 28. 实现 Main 组件的状态保持</h4>\n<p>详情页也被缓存了，导致了文章数据不会动态刷新的问题。定义  <code>watch</code>  侦听器来监视  <code>props</code>  中  <code>id</code>  值的变化，从而动态请求文章的详情数据：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>watch<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 只要 id 值发生了变化，就清空旧的文章信息</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>article <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 并重新获取文章的详情数据</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initArticleInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h4 id=\"29实现-home-组件的状态保持\"><a class=\"anchor\" href=\"#29实现-home-组件的状态保持\">#</a> 29. 实现 Home 组件的状态保持</h4>\n<p><code>User.vue</code>  组件也被缓存了，导致修改用户头像后，头像不刷新的问题。可以在被缓存的  <code>User.vue</code>  组件中，声明  <code>activated</code>  和  <code>deactivated</code>  声明周期函数，来监听组件<strong>被激活</strong>和<strong>被缓存</strong>的状态变化：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">created</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 把下面这一行注释掉，因为 activated 在组件首次加载时也会调用一次</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// this.initUserInfo()</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 被激活了</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">activated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 只要组件被激活了，就重新初始化用户的信息</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initUserInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h4 id=\"30实现-searchresult-组件的状态保持\"><a class=\"anchor\" href=\"#30实现-searchresult-组件的状态保持\">#</a> 30. 实现 SearchResult 组件的状态保持</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>watch<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">kw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 1. 重置关键数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>page <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>artList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>loading <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>finished <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 2. 请求数据</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">initSearchResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><h4 id=\"31记录首页文章列表的滚动位-无效\"><a class=\"anchor\" href=\"#31记录首页文章列表的滚动位-无效\">#</a> 31. 记录首页文章列表的滚动位 无效</h4>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  path<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  component<span class=\"token operator\">:</span> Home<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  name<span class=\"token operator\">:</span> <span class=\"token string\">'home'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  meta<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> isRecord<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> top<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在  <code>Home.vue</code>  组件中，声明  <code>beforeRouteLeave</code>  这个<strong>组件内的守卫</strong>，用来记录当前组件在纵向上滚动的距离：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">beforeRouteLeave</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  from<span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>top <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>scrollY</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 全局后置钩子</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> <span class=\"token keyword\">from</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 如果当前的路由的元信息中，isRecord 的值为 true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>isRecord<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token comment\">// 则把元信息中的 top 值设为滚动条纵向滚动的位置</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      window<span class=\"token punctuation\">.</span><span class=\"token function\">scrollTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>top<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol>\n<li>新建 API</li>\n<li>导入</li>\n<li>声明数据</li>\n<li>定义方法</li>\n<li>在 created 中调用方法</li>\n</ol>\n",
            "tags": [
                "前端",
                "Vue",
                "前端",
                "Vue"
            ]
        },
        {
            "id": "https://1234cas.github.io/1234cas.github.io/Front-end/Vue/vue%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "url": "https://1234cas.github.io/1234cas.github.io/Front-end/Vue/vue%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "title": "Vue面试题",
            "date_published": "2023-05-15T02:40:05.209Z",
            "content_html": "<h3 id=\"1-说说你对-spa-单页面的理解它的优缺点分别是什么\"><a class=\"anchor\" href=\"#1-说说你对-spa-单页面的理解它的优缺点分别是什么\">#</a> 1. 说说你对 SPA 单页面的理解，它的优缺点分别是什么？</h3>\n<hr />\n<p>SPA（single-page application）仅在 Web 页面初始化时加载相应的 HTML，CSS 和 JS。一旦页面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转，取而代之的是利用路由机制实现 HTML 内容的切换，UI 和用户的交互，避免页面的重新加载</p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染</li>\n<li>基于上面一点，SPA 相对对服务器压力小</li>\n<li>前后端职责分离，架构清晰，前端进行逻辑交互，后端负责数据处理</li>\n</ul>\n<p><strong>缺点：</strong></p>\n<ul>\n<li>初次加载耗时多：需要在加载页面的时候将 JS、CSS 统一加载，部分页面按需加载</li>\n<li>前进后退路由管理：由于单页应用在一个页面中显示所有内容，所以不能使用浏览器的前进后退功能，所有的页面切换都需要自己建立堆栈管理</li>\n<li>SEO 难度较大：因为所有内容都在一个页面中动态替换显示，所以在 SEO 上有着天然的劣势</li>\n</ul>\n<h3 id=\"2-v-show-和-v-if-有什么区别\"><a class=\"anchor\" href=\"#2-v-show-和-v-if-有什么区别\">#</a> 2. v-show 和 v-if 有什么区别？</h3>\n<hr />\n<p><strong>v-if</strong> 是真正的条件渲染，因为它会在切换过程中将条件块内的事件监听器和子组件适当的销毁和重建；同时也是 ** 惰性的：** 初始条件为假，则什么也不做，直到条件为真，才进行渲染</p>\n<p><strong>v-show</strong> 无论条件为何，元素总是会被渲染，只是基于 CSS 的 display 属性进行显示切换</p>\n<p>所以，v-if 适合用于不需要频繁切换条件的场景；v-show 则反之</p>\n<h3 id=\"3-class-与-style-如何动态绑定\"><a class=\"anchor\" href=\"#3-class-与-style-如何动态绑定\">#</a> 3. Class 与 Style 如何动态绑定？</h3>\n<hr />\n<p>Class 可以通过对象语法和数组语法进行动态绑定：</p>\n<ul>\n<li>对象语法：</li>\n</ul>\n<pre><code>&lt;div :class=&quot;&#123; active: isActive, 'text-danger': hasError &#125;&quot;&gt;&lt;/div&gt;\n\ndata: &#123;\n  isActive: true,\n  hasError: false\n&#125;\n</code></pre>\n<p>带连字符的要加引号，通过 true/false 控制类名</p>\n<ul>\n<li>数组语法：</li>\n</ul>\n<pre><code>&lt;div :class=&quot;[isActive ? activeClass : '', errorClass]&quot;&gt;&lt;/div&gt;\n\ndata: &#123;\n  activeClass: 'active',\n  errorClass: 'text-danger'\n&#125;\n</code></pre>\n<p>通过属性名来渲染为类名的属性值</p>\n<p>Style 也可以通过对象语法和数组语法进行动态绑定：</p>\n<ul>\n<li>对象语法：</li>\n</ul>\n<pre><code>&lt;div :style=&quot;&#123; color: activeColor, fontSize: fontSize + 'px' &#125;&quot;&gt;&lt;/div&gt;\n\ndata: &#123;\n  activeColor: 'red',\n  fontSize: 30\n&#125;\n</code></pre>\n<p>可以在里面拼接字符串，也可以进行一些简单的运算</p>\n<ul>\n<li>数组语法：</li>\n</ul>\n<pre><code>&lt;div :style=&quot;[styleColor, styleSize]&quot;&gt;&lt;/div&gt;\n\ndata: &#123;\n  styleColor: &#123;\n     color: 'red'\n   &#125;,\n  styleSize:&#123;\n     fontSize:'23px'\n  &#125;\n&#125;\n</code></pre>\n<h3 id=\"4-vue-的单向数据流\"><a class=\"anchor\" href=\"#4-vue-的单向数据流\">#</a> 4. Vue 的单向数据流</h3>\n<hr />\n<p>所有的 porp 都会使其父子 prop 之间形成一个<strong>单向下行绑定</strong>：父级 prop 的更新会影响子组件的值，但是反之不行。这样可以防止子组件意外改变父组件的值，从而导致你的引应用数据流向难以理解</p>\n<p>还有，每次父组件发生更新，子组件中所有的 prop 都会刷新为最新的值。</p>\n<p>无法在子组件直接修改 prop，vue 会报错，想在子组件中修改 prop 只能通过 $emit 派发一个自定义事件，父组件接收到后，由父组件修改</p>\n<p>有两种常见的试图改变一个 prop 的情形 :</p>\n<ul>\n<li>** 这个 prop 传递一个初始值，并且这个子组件接下来下午将其作为一个本地的 prop 数据来使用。** 就把 prop 转存到 data 中</li>\n</ul>\n<pre><code>props: ['initialCounter'],\ndata: function () &#123;\n  return &#123;\n    counter: this.initialCounter\n  &#125;\n&#125;\n</code></pre>\n<ul>\n<li><strong>这个 prop 以一种原始的值传入且需要进行转换</strong>。使用这个 prop 来定义一个计算属性</li>\n</ul>\n<pre><code>props: ['size'],\ncomputed: &#123;\n  normalizedSize: function () &#123;\n    return this.size.trim().toLowerCase()\n  &#125;\n&#125;\n</code></pre>\n<h3 id=\"5-computed-和-watch-的区别和应用场景\"><a class=\"anchor\" href=\"#5-computed-和-watch-的区别和应用场景\">#</a> 5. computed 和 watch 的区别和应用场景？</h3>\n<hr />\n<p>**computed：** 是计算属性，依赖其他属性值，并且 computed 的值有缓存，只要依赖项发生改变，computed 就会重新计算</p>\n<p>**watch：** 当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。</p>\n<p><strong>运用场景：</strong></p>\n<ul>\n<li>当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；</li>\n<li>当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</li>\n</ul>\n<h3 id=\"6-直接给一个数组项赋值vue-能检测到变化吗\"><a class=\"anchor\" href=\"#6-直接给一个数组项赋值vue-能检测到变化吗\">#</a> 6. 直接给一个数组项赋值，Vue 能检测到变化吗？</h3>\n<hr />\n<p>由于 JavaScript 的限制，Vue 不能检测到以下数组的变动：</p>\n<ul>\n<li>当你利用索引直接设置一个数组项时，例如： <code>vm.items[indexOfItem] = newValue</code></li>\n<li>当你修改数组的长度时，例如： <code>vm.items.length = newLength</code></li>\n</ul>\n<p>为了解决第一个问题，Vue 提供了以下操作方法：</p>\n<pre><code>// Vue.set\nVue.set(vm.items, indexOfItem, newValue)\n// vm.$set，Vue.set的一个别名\nvm.$set(vm.items, indexOfItem, newValue)\n// Array.prototype.splice\nvm.items.splice(indexOfItem, 1, newValue)\n复制代码\n</code></pre>\n<p>为了解决第二个问题，Vue 提供了以下操作方法：</p>\n<pre><code>// Array.prototype.splice\nvm.items.splice(newLength)\n</code></pre>\n<h3 id=\"7-对-vue-生命周期的理解\"><a class=\"anchor\" href=\"#7-对-vue-生命周期的理解\">#</a> 7. 对 Vue 生命周期的理解？</h3>\n<hr />\n<p><strong>（1）生命周期是什么？</strong></p>\n<p>Vue 实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模版、挂载 Dom -&gt; 渲染、更新 -&gt; 渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。</p>\n<p><strong>（2）各个生命周期的作用</strong></p>\n<table>\n<thead>\n<tr>\n<th>生命周期</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>beforeCreate</td>\n<td>组件实例被创建之初，组件的属性生效之前</td>\n</tr>\n<tr>\n<td>created</td>\n<td>组件实例已经完全创建，属性也绑定，但真实 dom 还没有生成，$el 还不可用</td>\n</tr>\n<tr>\n<td>beforeMount</td>\n<td>在挂载开始之前被调用：相关的 render 函数首次被调用</td>\n</tr>\n<tr>\n<td>mounted</td>\n<td>el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子</td>\n</tr>\n<tr>\n<td>beforeUpdate</td>\n<td>组件数据更新之前调用，发生在虚拟 DOM 打补丁之前</td>\n</tr>\n<tr>\n<td>update</td>\n<td>组件数据更新之后</td>\n</tr>\n<tr>\n<td>activited</td>\n<td>keep-alive 专属，组件被激活时调用</td>\n</tr>\n<tr>\n<td>deactivated</td>\n<td>keep-alive 专属，组件被销毁时调用</td>\n</tr>\n<tr>\n<td>beforeDestory</td>\n<td>组件销毁前调用</td>\n</tr>\n<tr>\n<td>destoryed</td>\n<td>组件销毁后调用</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"8-vue-的父组件和子组件生命周期钩子函数执行顺序\"><a class=\"anchor\" href=\"#8-vue-的父组件和子组件生命周期钩子函数执行顺序\">#</a> 8. Vue 的父组件和子组件生命周期钩子函数执行顺序？</h3>\n<hr />\n<p>Vue 的父组件和子组件生命周期钩子函数执行顺序可以归类为以下 4 部分：</p>\n<ul>\n<li>\n<p>加载渲染过程</p>\n<p>父 beforeCreate -&gt; 父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&gt; 子 beforeMount -&gt; 子 mounted -&gt; 父 mounted</p>\n</li>\n<li>\n<p>子组件更新过程</p>\n<p>父 beforeUpdate -&gt; 子 beforeUpdate -&gt; 子 updated -&gt; 父 updated</p>\n</li>\n<li>\n<p>父组件更新过程</p>\n<p>父 beforeUpdate -&gt; 父 updated</p>\n</li>\n<li>\n<p>销毁过程</p>\n<p>父 beforeDestroy -&gt; 子 beforeDestroy -&gt; 子 destroyed -&gt; 父 destroyed</p>\n</li>\n</ul>\n<h3 id=\"9-在哪个生命周期内调用异步请求\"><a class=\"anchor\" href=\"#9-在哪个生命周期内调用异步请求\">#</a> 9. 在哪个生命周期内调用异步请求？</h3>\n<hr />\n<p>可以在钩子函数 created、beforeMount、mounted 中进行调用，因为在这三个钩子函数中，data 已经创建，可以将服务端端返回的数据进行赋值。但是推荐在 created 钩子函数中调用异步请求，因为：</p>\n<ul>\n<li>能更快获取到服务端数据，减少页面 loading 时间；</li>\n<li>ssr 不支持 beforeMount 、mounted 钩子函数，所以放在 created 中有助于一致性；</li>\n</ul>\n<h3 id=\"10-在什么阶段才能访问操作-dom\"><a class=\"anchor\" href=\"#10-在什么阶段才能访问操作-dom\">#</a> 10. 在什么阶段才能访问操作 DOM？</h3>\n<p>在钩子函数 mounted 被调用前，Vue 已经将编译好的模板挂载到页面上，所以在 mounted 中可以访问操作 DOM。</p>\n",
            "tags": [
                "前端",
                "Vue",
                "前端",
                "Vue"
            ]
        },
        {
            "id": "https://1234cas.github.io/1234cas.github.io/Coding-diary/2022-4-1/",
            "url": "https://1234cas.github.io/1234cas.github.io/Coding-diary/2022-4-1/",
            "title": "2022-4-1",
            "date_published": "2023-05-15T02:40:05.193Z",
            "content_html": "<ol>\n<li>\n<p>vue 中在 script 里面 export 外面可能会导致有些插件获取不到 DOM 比如 gsap</p>\n</li>\n<li>\n<p><span class=\"label warning\">vue 中使用 router 切换组件 但是页面内容得刷新才有</span> 是因为我把函数写在 mounted 里面<br />\n <code>解决方法 使用keep-alive包裹router-view 然后把mounted改成activited</code></p>\n<p>(mounted 只有页面第一次渲染时才执行，路由跳转不会重新执行 https://blog.csdn.net/m18633778874/article/details/90347113)</p>\n</li>\n<li>\n<p>上述操作完后<span class=\"label warning\">在产品里面切什么都是第一个的 Prodcut 组件</span>是因为在子路由的父级组件就是该组件 所以每个子路由都有该组件 解决方法 把该组件独立为子组件 再建一个组件其中放 router-view</p>\n</li>\n</ol>\n<p><strong>4-1 总结 太久没写 vue 了 (<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3d1emhlMTI4NTIwL2FydGljbGUvZGV0YWlscy84OTc4ODUxMg==\">https://blog.csdn.net/wuzhe128520/article/details/89788512</span>)</strong></p>\n<ol>\n<li>\n<p>上午解决 about 页面的问题后 product 又有问题，<span class=\"label warning\">是因为我把 gsap 示例的代码直接复制粘贴到 activated 里面 会导致运行不了</span> 然后我就把他们整体放到一个函数里面再在 activated 里面调用 <strong>（突出一个生搬硬套 以后再别这么蠢）</strong></p>\n</li>\n<li>\n<p>然后又发现<span class=\"label warning\"> gsap 创建的 pin-spacer 太大</span>是因为是首页的大小 (pin 大小是因为 end 设置 这里说的是会影响到其他页面) 可能是因为单页面应用利用理由跳转造成的 因为刷新一下就好<br />\n又然后搜了几十分钟搜不到 随手一改 pin 就解决 (瞎猫碰上死耗子) 我搜了英文文档看了也不太明白 改之前我觉得可能是但是文档中没有说明<br />\n<span class=\"label warning\">但是把 pin 改了首页的显示就有问题 没固定了就</span></p>\n</li>\n<li>\n<p>画布就是 pin-spacer 有问题 在 gsap 的 issue 和论坛搜了一上午 最后还是用笨办法解决</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">deactivated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    location<span class=\"token punctuation\">.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>每次在组件切换时进行刷新页面 就能把pin<span class=\"token operator\">-</span>spacer刷新</pre></td></tr></table></figure><p><span class=\"label warning\">但是还有问题就是窗口大小变化时会出现问题</span><br />\n没错窗口变化导致页面样式异常也是 pin 的问题</p>\n<ol start=\"4\">\n<li>在把问题发到论坛后</li>\n</ol>\n<p><img data-src=\"/images/2022-4-1.assets/image-20220404100237187.png\" alt=\"image-20220404100237187\" /></p>\n<p>在.home-container 外面再套个壳就行了</p>\n<p><strong>4-4 总结 论坛有大哥真好 抄也要带脑子</strong></p>\n",
            "tags": [
                "编程笔记",
                "编程笔记"
            ]
        },
        {
            "id": "https://1234cas.github.io/1234cas.github.io/Coding-diary/2022-3-30/",
            "url": "https://1234cas.github.io/1234cas.github.io/Coding-diary/2022-3-30/",
            "title": "2022-3-30",
            "date_published": "2023-05-15T02:40:05.193Z",
            "content_html": "<ol>\n<li>一开始是为使用 <code>scrollmagic</code>  通过 npm 下载<br />\n然后不行 因为 srollmagic 官方示例的用法是过时的 直接套用不行<br />\n我就去 <code>gsap</code>  的文档里面把语法改成新的</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span> TimelineMax<span class=\"token punctuation\">,</span> TweenMax<span class=\"token punctuation\">,</span> Linear <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'gsap'</span> 改成 <span class=\"token keyword\">import</span> gsap <span class=\"token keyword\">from</span> <span class=\"token string\">'gsap'</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>然后 banner 会动了 但是不受控制会直接上升</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console报</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token constant\">ERROR</span> calling <span class=\"token function\">setTween</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> due to missing Plugin <span class=\"token string\">'animation.gsap'</span><span class=\"token punctuation\">.</span> Please make sure to include plugins<span class=\"token operator\">/</span>animation<span class=\"token punctuation\">.</span>gsap<span class=\"token punctuation\">.</span>js</pre></td></tr></table></figure><p>查看官方文档需要 <code>animation.gsap</code>  这个插件 我搜这个报错搜不到什么<br />\n然后检查发现是 <code>addIndicators('')</code>  里面我放空了 后面有官方注释是 <code>add indicators (requires plugin)</code>  <strong>(我眼瞎 得认真看官方注释)</strong></p>\n<ol start=\"3\">\n<li>填了之后还是报错上面那个错 我就怀疑是没有这个文件 我就去搜怎么导入</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'imports-loader?define=>false!scrollmagic/scrollmagic/uncompressed/plugins/animation.gsap'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>就报Syntax Error<span class=\"token operator\">:</span> TypeError<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getOptions is not a <span class=\"token keyword\">function</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token parameter\">这种应该可以通过修改webpack的配置来搞定https<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>stackoverflow<span class=\"token punctuation\">.</span>com<span class=\"token operator\">/</span>questions<span class=\"token operator\">/</span><span class=\"token number\">35531126</span><span class=\"token operator\">/</span>how<span class=\"token operator\">-</span>to<span class=\"token operator\">-</span>use<span class=\"token operator\">-</span>scrollmagic<span class=\"token operator\">-</span><span class=\"token keyword\">with</span><span class=\"token operator\">-</span>gsap<span class=\"token operator\">-</span>and<span class=\"token operator\">-</span>webpack</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>但是我搞不明白怎么在vue里面配置webpack</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">'scrollmagic/scrollmagic/uncompressed/plugins/animation.gsap'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>就报This dependency was not found<span class=\"token operator\">:</span></pre></td></tr></table></figure><p>试了两种导入方法也都不行我就去试着修改 animation.gsap 这个文件 也发现行不通<br />\n中途搜到 <code>https://icecat.cc/?p=172</code>  试了了试 <code>scrollmagic plugin gsap</code>  不行就放弃了<br />\n发现在 node—modules 里面就有 <strong>(如果我认真看报错信息和英语好些就不会浪费这些时间)</strong></p>\n<ol start=\"4\">\n<li>不是文件不存在的问题就应该是导入过程出问题 然后我就接着搜搜到</li>\n</ol>\n<p><code>https://stackoverflow.com/questions/35531126/how-to-use-scrollmagic-with-gsap-and-webpack</code> <br />\n 然后其中一个回答给了一个链接 <code>https://github.com/janpaepke/ScrollMagic/issues/665</code> <br />\n#665 的 issues 有人说 scrollmagic plugin gsap 行 我就再搜了搜<br />\n最终是在 <code>scrollmagic plugin gsap的issues</code>  里面找到解决的方法 <code>https://github.com/epranka/scrollmagic-plugin-gsap/issues/5</code></p>\n<p><strong>半天时间的经验</strong></p>\n<ol start=\"5\">\n<li>反思</li>\n</ol>\n<ul>\n<li>学英语</li>\n<li>认真看注释和报错</li>\n<li>出问题可以先去该项目官方文档或者 issues 里面找</li>\n<li>多用用 stack overflow</li>\n</ul>\n<p><code>次日后记:scrollmagic用不明白，两个页面一起用会报错，所以换gsap的scrolltrigger试试</code></p>\n",
            "tags": [
                "编程笔记",
                "编程笔记"
            ]
        },
        {
            "id": "https://1234cas.github.io/1234cas.github.io/Diary/2021-11-14/",
            "url": "https://1234cas.github.io/1234cas.github.io/Diary/2021-11-14/",
            "title": "2022-11-14.",
            "date_published": "2023-05-15T02:40:05.193Z",
            "content_html": "<p>反思，同时制定计划</p>\n<p>从去年学前端到现在，断断续续有了一年，虽然一直有在学，但是大大小小的问题不间断，自己的学习方式感觉问题不小。<br />\n最近因为手骑车摔伤，连摸了一个月，实在有点不成样子，胡适是打牌隔天反思隔天接着打牌，我是爆玩一天，晚上 lzt 啊 lzt 啊，你不能这样了，你明天得好好学习，次日接着狂玩，不知道这是因为我间歇性学习还是因为我的手伤，但！现在！伤差不多痊愈，游戏也打够了，该振作起来了。<br />\n程冠希的纪录片，寻人记中的白痴妹妹，rap 歌手和他们歌，亦或者那个贼卷的群友，虽说是源源不断的压力，但也是我前进的动力，这些都让我感慨良多。<br />\n原本之前是有计划的，但是因为自己和疫情搁置了，这可能也是我疏于学习的一个原因，所以今天从新制定计划</p>\n",
            "tags": [
                "日记",
                "日记"
            ]
        },
        {
            "id": "https://1234cas.github.io/1234cas.github.io/Computer-Basics/TCP%E5%8D%8F%E8%AE%AE/",
            "url": "https://1234cas.github.io/1234cas.github.io/Computer-Basics/TCP%E5%8D%8F%E8%AE%AE/",
            "title": "TCP协议",
            "date_published": "2023-05-15T02:40:05.193Z",
            "content_html": "<p><img data-src=\"/images/TCP%E5%8D%8F%E8%AE%AE.assets/cc9bc77b97b06659f29baec794f80ef2.png\" alt=\"cc9bc77b97b06659f29baec794f80ef2\" /></p>\n<h3 id=\"01tcp-和-udp-的区别\"><a class=\"anchor\" href=\"#01tcp-和-udp-的区别\">#</a> 01.TCP 和 UDP 的区别？</h3>\n<p><strong>TCP 是一个面向连接的，可靠的，基于字节流的传输层协议</strong></p>\n<p><strong>UDP 是一个面向无连接的传输层协议</strong></p>\n<p>和 UDP 相比，TCP 有三大核心特征：</p>\n<p>1.<strong> 面向连接</strong>。在客户端和服务端互相通信之前，TCP 需要三次握手建立连接，而 UDP 没有相应建立连接的过程</p>\n<p>2.<strong> 可靠性</strong>。可靠性体现在两方面，一是<strong>有状态</strong>，二是<strong>可控制</strong></p>\n<p>TCP 会精确记录哪些数据发送了，哪些数据被对面接收了，哪些数据未被对面接收，并且保证数据包按序到达。这是<strong>有状态</strong></p>\n<p>当意识到丢包或者网络环境不佳时，TCP 会根据具体情况调整自己的行为，控制自己的发送速度或者重发。这是<strong>可控制</strong></p>\n<p>3.<strong> 基于字节流</strong>。UDP 的数据传输是基于数据报的，这是因为仅仅只继承了 IP 层的特性，而 TCP 为了维护状态，把一个一个 IP 变成了字节流</p>\n<hr />\n<h3 id=\"02tcp-三次握手的过程-为什么不是两次不是四次\"><a class=\"anchor\" href=\"#02tcp-三次握手的过程-为什么不是两次不是四次\">#</a> 02.TCP 三次握手的过程。为什么不是两次？不是四次</h3>\n<p>TCP 的三次握手是为了确认双方的发送和接收能力</p>\n<h4 id=\"三次握手\"><a class=\"anchor\" href=\"#三次握手\">#</a> 三次握手</h4>\n<p><img data-src=\"/images/TCP%E5%8D%8F%E8%AE%AE.assets/d666610353017ffe36cf8eb3e2c24939.png\" alt=\"d666610353017ffe36cf8eb3e2c24939\" /></p>\n<p>从最开始双方都处于 <code>CLOSED</code>  状态，然后服务端开始监听某个端口，进入了 <code>LISTEN</code>  状态</p>\n<p>然后客户端主动发起连接，发送 <code>SYN</code> ，自己变成了 <code>SYN-SEND</code>  状态</p>\n<p>服务端接收到，并返回 <code>SYN</code>  和 <code>ACK</code> ，自己变成了 <code>SYN-RCVD</code>  状态</p>\n<p>之后客户端再发送 <code>ACK</code>  给服务端，自己变成了 <code>ESTABLISHED</code>  状态；服务端收到 <code>ACK</code>  之后，也变成了 <code>ESTABLISHED</code>  状态</p>\n<p>SYN 是需要消耗一个序列号的，下次发送对应的 ACK 序列号要加 1</p>\n<blockquote>\n<p>凡是需要对端确认的，一定会消耗 TCP 报文的序列号</p>\n</blockquote>\n<p>SYN 需要对端确认，而 ACK 不需要，因此 SYN 消耗一个序列号而 ACK 不需要</p>\n<h4 id=\"为什么不是两次\"><a class=\"anchor\" href=\"#为什么不是两次\">#</a> 为什么不是两次？</h4>\n<p>根本原因：无法确认客户端的接收能力</p>\n<p>如果是两次，客户端发送了 SYN 报文想握手，但是这个包<strong>滞留</strong>在了网络中，TCP 以为是丢包，于是重传，然后两次握手就建立了连接。</p>\n<p>看似没有问题，但是连接关闭后，如果这个<strong>滞留</strong>在网络中的包到达了服务端，由于是两次握手，服务端接收到<strong>滞留</strong>的包同时发送相应的数据包就建立了连接，可是这时客户端是不会响应的，但是服务端会一直等待客户端发送数据，导致了服务端连接资源的浪费</p>\n<h4 id=\"为什么不是四次\"><a class=\"anchor\" href=\"#为什么不是四次\">#</a> 为什么不是四次？</h4>\n<p>TCP 的三次握手是为了确认双方的发送和接收能力，四次自然也是可以，但是三次就足够了</p>\n<h4 id=\"三次握手过程中可以携带数据么\"><a class=\"anchor\" href=\"#三次握手过程中可以携带数据么\">#</a> 三次握手过程中可以携带数据么？</h4>\n<p>第三次握手时可以携带，前两次握手不能携带数据</p>\n<p>如果前两次握手能够携带数据，那么一旦有人想攻击服务器，那么他只需要在第一次握手中的 SYN 报文中放入大量的数据，那么服务器就势必会消耗更多的时间和内存空间去处理这些数据，增加了服务器被攻击的风险</p>\n<p>第三次握手的时候，客户端已经处于 <code>ESTABLISHED</code>  状态，并且已经确认了服务器的接收发送能力，这时相对安全，可以携带数据</p>\n<h4 id=\"同时发起握手会怎样\"><a class=\"anchor\" href=\"#同时发起握手会怎样\">#</a> 同时发起握手会怎样</h4>\n<p><img data-src=\"/images/TCP%E5%8D%8F%E8%AE%AE.assets/57f1cc50167613e9ce02641095b56dbe.png\" alt=\"57f1cc50167613e9ce02641095b56dbe\" /></p>\n<p>客户端和服务端同时给对面发送 <code>SYN</code> ，发完两者的状态皆变为 <code>SYN-SENT</code></p>\n<p>在各自收到对方的 <code>SYN</code>  之后，两者的状态都变成 <code>SYN-RCVD</code></p>\n<p>接着会回复对应的 <code>SYN+ACK</code> ，这个报文在对方接收之后会一起变成 <code>ESTABLISHED</code></p>\n<hr />\n<h3 id=\"03四次挥手的过程\"><a class=\"anchor\" href=\"#03四次挥手的过程\">#</a> 03. 四次挥手的过程</h3>\n<h4 id=\"四次挥手\"><a class=\"anchor\" href=\"#四次挥手\">#</a> 四次挥手</h4>\n<p><img data-src=\"/images/TCP%E5%8D%8F%E8%AE%AE.assets/982a7c427e18571f51b529e70c2a961b.png\" alt=\"982a7c427e18571f51b529e70c2a961b\" /></p>\n<p>刚开始双方都处于 <code>ESTABLISHED</code></p>\n<p>客户端要断开，向服务端发送 <code>FIN</code>  报文，然后客户端变成了 <code>FIN-WAIT-1</code>  状态，注意，客户端同时也变成 <code>half-close(半关闭)</code>  状态，即无法向服务端发送报文，只能接收</p>\n<p>服务端接收后向客户端发送 <code>ACK</code>  确认，变成了 <code>CLOSE-WAIT</code>  状态</p>\n<p>客户端接收到了客户端的确认，变成了 <code>FIN-WAIT2</code>  状态</p>\n<p>随后服务端向客户端发送 <code>FIN</code> ，自己进入 <code>LAST-ACK</code>  状态</p>\n<p>客户端收到服务端的 <code>FIN</code>  后，自己变成 <code>TIME-WAIT</code>  状态，然后向服务端发送 <code>ACK</code></p>\n<p>此时客户端需要等待足够长的时间，具体来说，还是 2 个 <code>MSL(Maximum Segment Lifetime,报文最大生存时间)</code> ，在这段时间如果客户端没有收到服务端的重发请求，那么就表示 <code>ACK</code>  成功送达，挥手介绍，否则客户端重发 <code>ACK</code></p>\n<h4 id=\"等待-2msl-的意义\"><a class=\"anchor\" href=\"#等待-2msl-的意义\">#</a> 等待 2MSL 的意义</h4>\n<p>如果不等待会怎样？</p>\n<p>如果不等待，客户端直接断开连接，当服务端还有很多数据包要发给客户端，且还在路上的时候，若客户端的端口此时刚好被新的应用，那么就接收到了无用数据包，导致数据包混乱，所以，最保险的做法是等服务端发完的数据包再启动新的应用</p>\n<ul>\n<li>1 个 MSL 确保四次挥手中主动关闭方最后的 ACK 报文能最终送达对端</li>\n<li>1 个 MSL 确保对端没有收到 ACK 而重传的 FIN 报文可以到达</li>\n</ul>\n<h4 id=\"为什么是四次挥手而不是三次\"><a class=\"anchor\" href=\"#为什么是四次挥手而不是三次\">#</a> 为什么是四次挥手而不是三次？</h4>\n<p>因为服务端在收到 <code>FIN</code>  时，往往不会立即反回 <code>FIN</code> ，必须等服务端此前所有的报文都发送完毕了，才能发 <code>FIN</code> 。因此先发一个 <code>ACK</code>  表示已经收到客户端的 <code>FIN</code> ，延长一段再发 <code>FIN</code> 。</p>\n<p>如果是三次挥手会有什么问题？</p>\n<p>等于说服务端把 <code>ACK</code>  和 <code>FIN</code>  的发送合并为一次挥手，这会造成长时间的延迟，导致客户端误以为 <code>FIN</code>  没有到达服务端，从而不断重发 <code>FIN</code></p>\n<h4 id=\"同时关闭会怎样\"><a class=\"anchor\" href=\"#同时关闭会怎样\">#</a> 同时关闭会怎样？</h4>\n<p><img data-src=\"/images/TCP%E5%8D%8F%E8%AE%AE.assets/19ebe3ed769f299bd212544892b97a0f.png\" alt=\"19ebe3ed769f299bd212544892b97a0f\" /></p>\n<hr />\n<h3 id=\"04半连接队列和-syn-flood-攻击的关系\"><a class=\"anchor\" href=\"#04半连接队列和-syn-flood-攻击的关系\">#</a> 04. 半连接队列和 SYN Flood 攻击的关系</h3>\n<p>三次握手前，服务端的状态从 <code>CLOSED</code>  变成 <code>LISTEN</code> ，同时在内部创建了两个队列：<strong>半连接队列</strong>和<strong>全连接队列</strong>，即 <code>SYN</code>  队列和 <code>ACCEPT</code>  队列</p>\n<h4 id=\"半连接队列\"><a class=\"anchor\" href=\"#半连接队列\">#</a> 半连接队列</h4>\n<p>当客户端发送 <code>SYN</code>  到服务端，服务端收到后回复 <code>ACK</code>  和 <code>SYN</code> ，状态由 <code>LISTEN</code>  变为 <code>SYN-RCVD</code> ，此时这个连接就会被推入<strong> SYN 队列</strong>，也就是<strong>半连接队列</strong></p>\n<h4 id=\"全连接队列\"><a class=\"anchor\" href=\"#全连接队列\">#</a> 全连接队列</h4>\n<p>当客户端返回 <code>ACK</code> ，服务端接收后，三次握手完成。这个时候连接等待被具体的应用取走，在被取走前，它会被推入另一个 TCP 维护的队列，也就是<strong>全连接队列 (Accept Queue)</strong></p>\n<h4 id=\"syn-flood-攻击原理\"><a class=\"anchor\" href=\"#syn-flood-攻击原理\">#</a> SYN Flood 攻击原理</h4>\n<p>SYN Flood 属于典型的 DoS/DDoS 攻击。其攻击原理就是用客户端再短时间内伪造大量不存在的 IP 地址，并向服务端疯狂发送 <code>SYN</code> 。对于服务端而言，会产生两个威胁的后果：</p>\n<ol>\n<li>处理大量的 <code>SYN</code>  包并返回对应的 <code>ACK</code> ，势必有大量的连接处于 <code>SYN-RCVD</code>  状态，从而占满整个<strong>半连接队列</strong>，无法处理正常的请求</li>\n<li>由于是不存在的 IP，服务端长时间收不到客户端的 <code>ACK</code> ，会导致服务端不断重发数据，直到耗尽服务端的资源</li>\n</ol>\n<h4 id=\"如何应对-syn-flood-攻击\"><a class=\"anchor\" href=\"#如何应对-syn-flood-攻击\">#</a> 如何应对 SYN Flood 攻击？</h4>\n<ol>\n<li>增加 SYN 连接，也就是增加半连接队列的容量</li>\n<li>减少 SYN+ACK 重试次数，避免大量的超时重发</li>\n<li>利用 SYN Cookie 技术，在服务端收到 <code>SYN</code>  后不立即分配连接资源，而是根据这个 <code>SYN</code>  计算出一个 <code>Cookie</code> ，连同第二次握手一起回复给客户端，在客户端回复 <code>ACK</code>  的时候带上这个 <code>Cookie</code>  值，服务端验证 <code>Cookie</code>  的合法性之后才会分配资源</li>\n</ol>\n<hr />\n<h3 id=\"05tcp-报文的头部字段\"><a class=\"anchor\" href=\"#05tcp-报文的头部字段\">#</a> 05.TCP 报文的头部字段</h3>\n<p>报文头部结构如下 (单位为字节)：</p>\n<p><img data-src=\"/images/TCP%E5%8D%8F%E8%AE%AE.assets/9309f3c439fac129c56b298d7ab7f992.png\" alt=\"9309f3c439fac129c56b298d7ab7f992\" /></p>\n<h4 id=\"源端口-目标端口\"><a class=\"anchor\" href=\"#源端口-目标端口\">#</a> 源端口、目标端口</h4>\n<p>如果标识唯一的一个连接？答案是 TCP 连接的 <code>四元组</code>  —— 源 IP、源端口、目标 IP、目标端口</p>\n<p>那 TCP 报文为什么没有源 IP 和目标 IP 呢？这是因为在 IP 层就已经处理了 IP。TCP 只需要记录两者的端口即可</p>\n<h4 id=\"序列号\"><a class=\"anchor\" href=\"#序列号\">#</a> 序列号</h4>\n<p>即 <code>Sequence number</code> ，指的是本报文第一个字节的序列号</p>\n<p>从图中可以看出，序列号是一个长为 4 个字节，也就是 32 位的无符号整数，表示范围为 0 ~ 2^32 - 1。如果到达最大值了后就循环到 0</p>\n<p>序列号在 TCP 通信的过程中有两个作用：</p>\n<ol>\n<li>在 SYN 报文中交换彼此的初始序列号</li>\n<li>保证数据包按正确的顺序组装</li>\n</ol>\n<h4 id=\"isn初始序列号\"><a class=\"anchor\" href=\"#isn初始序列号\">#</a> ISN (初始序列号)</h4>\n<p>即 <code>Initial Sequence Number(初始序列号)</code> ，在三次握手的过程当中，双方会用 <code>SYN</code>  报文来交换彼此的 <code>ISN</code></p>\n<p><code>ISN</code>  并不是一个固定的值，而是每 4ms 加一，溢出则回到 0，这个算法使得猜测 <code>ISN</code>  变得很困难。为什么这么做呢？</p>\n<p>如果 <code>ISN</code>  被攻击者预测到，要知道 IP 和源端口号都是很容易伪造的，当攻击者猜测到 <code>ISN</code>  之后，直接伪造一个 <code>RST</code>  后，就可以强制关闭连接，这是非常危险的</p>\n<p>而动态增长的 <code>ISN</code>  大大提高了猜测 <code>ISN</code>  的难度</p>\n<h4 id=\"确认号\"><a class=\"anchor\" href=\"#确认号\">#</a> 确认号</h4>\n<p>即 <code>ACK(Acknowlegment number)</code> 。用于告诉对方下一个期望接收的序列号，小于<strong> ACK</strong> 的所有字节都已经收到</p>\n<h4 id=\"标记号\"><a class=\"anchor\" href=\"#标记号\">#</a> 标记号</h4>\n<p>常见的标记有 <code>SYN</code> , <code>ACK</code> , <code>FIN</code> , <code>RST</code> , <code>PSH</code></p>\n<p><code>SYN</code>  和 <code>ACK</code>  已经在上文中说过，后三个解释如下:</p>\n<p><code>FIN</code> ： 即 Finish，表示发送方准备断开连接。</p>\n<p><code>RST</code> ：即 Reset，用来强制断开连接。</p>\n<p><code>PSH</code> ： 即 Push，告知对方这些数据包收到后应该马上交给上层的应用，不能缓存。</p>\n<h4 id=\"窗口大小\"><a class=\"anchor\" href=\"#窗口大小\">#</a> 窗口大小</h4>\n<p>占用两个字节，也就是 16 位，但实际上是不够用的。因此 TCP 引入了窗口缩放的选项，作为窗口缩放的比例因子，这个比例因子的范围在 0~14，比例因子可以将窗口的值扩大为原来的 2^n 次方</p>\n<h4 id=\"校验和\"><a class=\"anchor\" href=\"#校验和\">#</a> 校验和</h4>\n<p>占用两个字节，防止传输过程中数据包有损坏，如果遇到校验和有差错的报文，TCP 直接丢弃，等待重传</p>\n<h4 id=\"可选项\"><a class=\"anchor\" href=\"#可选项\">#</a> 可选项</h4>\n<p>可选项格式如下</p>\n<p><img data-src=\"/images/TCP%E5%8D%8F%E8%AE%AE.assets/417e77f83b34540a5b170e5b898b08f8.png\" alt=\"417e77f83b34540a5b170e5b898b08f8\" /></p>\n<p>常用的可选项有以下几个：</p>\n<ul>\n<li>TimeStamp:TCP 时间戳，后文有详细介绍</li>\n<li>MSS: 指的是 TCP 允许对方接收的最大报文段</li>\n<li>SACK: 选择确认选项</li>\n<li>Window Scale: 窗口缩放选项</li>\n</ul>\n<hr />\n<h3 id=\"06tcp-快速打开的原理tfo\"><a class=\"anchor\" href=\"#06tcp-快速打开的原理tfo\">#</a> 06.TCP 快速打开的原理 (TFO)</h3>\n<p>优化后的 TCP 握手流程，也就是 TCP 快速打开 (TCP Fast Open，即 TFO)</p>\n<p>优化是利用 SYN Cookie 来实现的 TFO</p>\n<h4 id=\"tfo-流程\"><a class=\"anchor\" href=\"#tfo-流程\">#</a> TFO 流程</h4>\n<p><strong>首轮三次握手</strong></p>\n<p>首先客户端发送 <code>SYN</code>  给服务端，服务端收到</p>\n<p>此时，服务端不是立即返回 <code>SYN+ACK</code> ，而是通过计算得到一个 <code>SYN Cookie</code> ，将这个 <code>Cookie</code>  放到 TCP 报文的 <code>Fast Open</code>  选项中，然后返回给客户端</p>\n<p>客户端拿到这个 <code>Cookie</code>  的值并缓存下来。后面正常完成三次握手</p>\n<p><strong>后续的三次握手</strong></p>\n<p>在后续的三次握手中，客户端会将之前缓存的 <code>Cookie</code> 、 <code>SYN</code>  和 <code>HTTP请求</code> 发送给服务端，服务端验证了 <code>Cookie</code>  的合法性，如果不合法直接丢弃；如果合法，就正常返回 <code>SYN+ACK</code></p>\n<p>重点来了，现在服务端就可以向客户端发 HTTP 响应了！这是最显著的改变，三次握手还没有建立，仅仅验证了 <code>Cookie</code>  的合法性就可以返回 HTTP 响应</p>\n<p>当然，客户端的 <code>ACK</code>  还得正常传过来，不然怎么叫三次握手</p>\n<p>流程如下：</p>\n<p><img data-src=\"/images/TCP%E5%8D%8F%E8%AE%AE.assets/0ff20d5a9e4295e773c1380a82954afd.png\" alt=\"0ff20d5a9e4295e773c1380a82954afd\" /></p>\n<p><strong>注意</strong>：客户端最后握手的 <code>ACK</code>  不需要等到服务端的 HTTP 响应送达才发送，两者没有任何关系</p>\n<h4 id=\"tfo-的优势\"><a class=\"anchor\" href=\"#tfo-的优势\">#</a> TFO 的优势</h4>\n<p>TFO 的优势并不在首轮三次握手，而在于后面的握手，在拿到客户端的 <code>Cookie</code>  并验证通过以后，可以直接返回 HTTP 响应，充分利用了<strong> 1 个 RTT</strong> (Round-Trip Time，往返时延) 的时间<strong>提前进行数据传输</strong>，积累起来还是一个比较大的优势</p>\n<hr />\n<h3 id=\"07tcp-报文中的时间戳\"><a class=\"anchor\" href=\"#07tcp-报文中的时间戳\">#</a> 07.TCP 报文中的时间戳</h3>\n<p><code>timestamp</code>  是 TCP 报文首部的一个可选项，一共占 10 个字节，格式如下：</p>\n<pre><code class=\"language-HTTP\">kind(1 字节) + length(1 字节) + info(8 个字节)\n</code></pre>\n<p>其中 kind = 8，length = 10，info 有两部分构成：<strong>timestamp</strong> 和<strong> timestamp echo</strong>，各占 4 个字节</p>\n<p>TCP 的时间戳主要解决两大问题：</p>\n<ul>\n<li>计算 往返时延 RTT (Round-Trip Time)</li>\n<li>防止序列号的回绕问题</li>\n</ul>\n<h4 id=\"计算-往返时延-rtt\"><a class=\"anchor\" href=\"#计算-往返时延-rtt\">#</a> 计算 往返时延 RTT</h4>\n<p>在没有时间戳的时候，计算 RTT 会遇到如下图所示的问题</p>\n<p><img data-src=\"/images/TCP%E5%8D%8F%E8%AE%AE.assets/d3d95220996ad83cbafd120a31a84d30.png\" alt=\"d3d95220996ad83cbafd120a31a84d30\" /></p>\n<p>如果以第一次发包为开始时间的话，就会出现左图的问题，RTT 明显偏大</p>\n<p>如果以第二次发包为开始时间的话，就会导致右图的问题，RTT 明显偏小</p>\n<p>实际上无论开始时间以第一次发包还是第二次发包为准，都是不准确的</p>\n<p>这个时候引入时间戳就很好的解决了这个问题</p>\n<p>比如现在 a 向 b 发送一个报文 s1，b 向 a 回复一个含 <code>ACK</code>  的报文 s2，那么：</p>\n<ul>\n<li>\n<p>**step1：**a 向 b 发送的时候， <code>timestamp</code>  中存放的内容就是 a 主机发送时的内核时刻 <code>ta1</code></p>\n</li>\n<li>\n<p>**step2：**b 向 a 回复 s2 报文时， <code>timestamp</code>  中存放的是 b 主机的时刻 <code>tb</code> ， <code>timestamp echo</code>  字段为从 s1 报文中解析出来的 <code>ta1</code></p>\n</li>\n<li>\n<p>**step3：**a 收到 b 的 s2 报文之后，此时 a 主机的内核时刻是 <code>ta2</code> ，而在 s2 报文中的 <code>timestamp echo</code>  选项可以得到 <code>ta1</code> ，也就是 s2 对应的报文最初的发送时刻。然后直接用 <code>ta2</code> - <code>ta1</code>  就得到了 RTT 的值</p>\n</li>\n</ul>\n<h4 id=\"防止序列号的回绕问题\"><a class=\"anchor\" href=\"#防止序列号的回绕问题\">#</a> 防止序列号的回绕问题</h4>\n<p>现在我们来模拟一下这个问题。</p>\n<p>序列号的范围其实是在 0 ~ 2 ^ 32 - 1, 为了方便演示，我们缩小一下这个区间，假设范围是 0 ~ 4，那么到达 4 的时候会回到 0。</p>\n<table>\n<thead>\n<tr>\n<th>第几次发包</th>\n<th>发送字节</th>\n<th>对应序列号</th>\n<th>状态</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>0 ~ 1</td>\n<td>0 ~ 1</td>\n<td>成功接收</td>\n</tr>\n<tr>\n<td>2</td>\n<td>1 ~ 2</td>\n<td>1 ~ 2</td>\n<td>滞留在网络中</td>\n</tr>\n<tr>\n<td>3</td>\n<td>2 ~ 3</td>\n<td>2 ~ 3</td>\n<td>成功接收</td>\n</tr>\n<tr>\n<td>4</td>\n<td>3 ~ 4</td>\n<td>3 ~ 4</td>\n<td>成功接收</td>\n</tr>\n<tr>\n<td>5</td>\n<td>4 ~ 5</td>\n<td>0 ~ 1</td>\n<td>成功接收，序列号从 0 开始</td>\n</tr>\n<tr>\n<td>6</td>\n<td>5 ~ 6</td>\n<td>1 ~ 2</td>\n<td>？？？</td>\n</tr>\n</tbody>\n</table>\n<p>假设在第 6 次的时候，之前滞留在网络中的包送达了，那么就会有两个序列号为 <code>1 ~ 2 </code> 的数据包，无法区分，这时候就产生了序列号的回绕问题</p>\n<p>那么用 <code>timestamp</code>  就能很好的解决这个问题，因为每次发包的时候都会将发包机器当时的内核时间记录在报文中，即使两次发包的序列号相同，时间戳也不可能相同，这样子就可以区分开两个数据包了</p>\n<hr />\n<h3 id=\"08tcp-的超时重连\"><a class=\"anchor\" href=\"#08tcp-的超时重连\">#</a> 08.TCP 的超时重连</h3>\n<p>TCP 具有超时重连的机制，即每个一段时间没有等到数据包的回复时，就重传这个数据包</p>\n<p>这个重传间隔是如何来计算的呢？</p>\n<p>这个重传间隔也叫做<strong>超时重传时间 (Retransmission TimeOut，简称为 RTO)</strong>，它的计算跟上一节的<strong> RTT</strong> 密切相关。这我们将介绍两种重要的方法，一个是经典方法，一个是标准方法</p>\n<h4 id=\"经典方法\"><a class=\"anchor\" href=\"#经典方法\">#</a> 经典方法</h4>\n<p>经典方法引入了一个新的概念 ——<strong>SRTT (Smoothed Round Trip Time，即平滑往返时间)</strong>，每产生一次新的 RTT，就会根据一定的算法对 SRTT 进行更新，具体而言，计算方式如下 (SRTT 的初始值为 0)</p>\n<pre><code class=\"language-HTTP\">SRTT =  (α * SRTT) + ((1 - α) * RTT)\n</code></pre>\n<p>其中，α 是<strong>平滑因子</strong>，建议值是 <code>0.8</code> ，范围是 <code>0.8 ~ 0.9</code></p>\n<p>拿到 SRTT，我们就可以计算 RTO 的值了：</p>\n<pre><code class=\"language-HTTP\">RTO = min(ubound, max(lbound, β * SRTT))\n</code></pre>\n<p>β 是加权因子，一般为 <code>1.3 ~ 2.0</code> ， <strong>lbound</strong> 是下界，<strong>ubound</strong> 是上界。</p>\n<p>这个算法的过程还算是简单，但是也存在着一定的局限，就是在 RTT 稳定的地方表现还可以，而在 RTT 变化较大的地方就不行了，因为平滑因子 α 的范围是 <code>0.8 ~ 0.9</code> ，RTT 对于 RTO 的影响太小</p>\n<h4 id=\"标准方法\"><a class=\"anchor\" href=\"#标准方法\">#</a> 标准方法</h4>\n<p>为了解决经典方法对于 RTT 变化不敏感的问题，后面又引出了标准方法，也叫 <code>Jacobson / Karels 算法</code></p>\n<p>一共三步</p>\n<p>** 第一步：** 计算 <code>SRTT</code> ，公式如下：</p>\n<pre><code class=\"language-HTTP\">SRTT = (1 - α) * SRTT + α * RTT\n</code></pre>\n<p>注意这个时候的 <code>α</code>  就和经典方法中的 <code>α</code>  取值不同了，建议值是 <code>1/8</code> ，也就是 <code>0.125</code></p>\n<p>** 第二步：** 计算 <code>RTTVAR</code> （Round-Trip Time Variation）这个中间变量</p>\n<pre><code class=\"language-HTTP\">RTTVAR = (1 - β) * RTTVAR + β * (|RTT - SRTT|)\n</code></pre>\n<p>β 的建议值为 <code>0.25</code> 。这个值是这个算法中出彩的地方，也就是说，它记录了最新的 RTT 与当前 SRTT 之间的差值，给我们在后续感知到 RTT 的变化提供了抓手</p>\n<p>** 第三步：** 计算最终的 <code>RTO</code></p>\n<pre><code class=\"language-HTTP\">RTO = µ * SRTT + ∂ * RTTVAR\n</code></pre>\n<p><code>µ</code>  建议值取 <code>1</code> ， <code>∂</code> 建议值取 <code>4</code></p>\n<p>这个公式在 SRTT 的基础上加上了最新 RTT 与它的偏移，从而很好的感知了 RTT 的变化，这种算法下，RTO 与 RTT 变化的差值关系更加密切</p>\n<hr />\n<h3 id=\"09tcp-的流量控制\"><a class=\"anchor\" href=\"#09tcp-的流量控制\">#</a> 09.TCP 的流量控制</h3>\n<p>对于发送端和接收端而言，TCP 需要把发送的数据放到<strong>发送缓存区</strong>，将接收的数据放到<strong>接收缓存区</strong></p>\n<p>而流量控制所要做的事情，就是在通过接收缓存区的大小，控制发送端的发送。如果对方的接收缓存区满了，就不能在继续发送了</p>\n<p>要具体理解流量控制，首先需要了解 <code>滑动窗口</code> 的概念</p>\n<h4 id=\"滑动窗口\"><a class=\"anchor\" href=\"#滑动窗口\">#</a> 滑动窗口</h4>\n<p>TCP 滑动窗口分为两种：<strong>发送窗口</strong>和<strong>接收窗口</strong></p>\n<h4 id=\"发送窗口\"><a class=\"anchor\" href=\"#发送窗口\">#</a> 发送窗口</h4>\n<p>发送端的滑动窗口结构如下</p>\n<p><img data-src=\"/images/TCP%E5%8D%8F%E8%AE%AE.assets/4e618cbb8649a1617fc5594f40a23632.png\" alt=\"4e618cbb8649a1617fc5594f40a23632\" /></p>\n<p>其中包含四大部分：</p>\n<ul>\n<li>已发送且已接收</li>\n<li>已发送但未确认</li>\n<li>未发送但可发送</li>\n<li>未发送且不可发送</li>\n</ul>\n<p>其中有一些重要的概念，我标注在图中：</p>\n<p><img data-src=\"/images/TCP%E5%8D%8F%E8%AE%AE.assets/364c7d48f0d1e503a7de1af5879b47e2-16353120181391.png\" alt=\"364c7d48f0d1e503a7de1af5879b47e2\" /></p>\n<p>发送窗口就是图中被框住的范围。SND 即 <code>send</code> ，WND 即 <code>window</code> ，UNA 即 <code>unacknowledged</code> ，表示未被确认，NXT 即 <code>next</code> ，表示下一个发送的位置</p>\n<h4 id=\"接收窗口\"><a class=\"anchor\" href=\"#接收窗口\">#</a> 接收窗口</h4>\n<p>接收端的窗口结构如下：</p>\n<p><img data-src=\"/images/TCP%E5%8D%8F%E8%AE%AE.assets/06c5ca9fe18976392fce8f158bb75249.png\" alt=\"06c5ca9fe18976392fce8f158bb75249\" /></p>\n<p>REV 即 <code>receive</code> ，NXT 表示下一个接收的位置，WND 表示接收窗口大小。</p>\n<h4 id=\"流量控制过程\"><a class=\"anchor\" href=\"#流量控制过程\">#</a> 流量控制过程</h4>\n<p>这里我们不用太复杂的例子，以一个最简单的来回来模拟一下流量控制的过程，方便大家的理解</p>\n<p>首先双方三次握手，初始化各自的窗口大小，均为 200 个字节</p>\n<p>假如当前发送端给接收端发送 100 个字节，那么此时对应发送端而言，SND.NXT 当然要右移 100 个字节，也就是说当前的可用窗口减少了 100 个字节，这很好理解</p>\n<p>现在这 100 个到达了接收端，被放到接收端的缓冲队列中。不过此时由于大量负载的原因，接收端处理不了这么多字节，只能处理 40 个字节即被应用取走 40 个字节，剩下 <code>60</code>  个字节被留在了缓冲队列中</p>\n<p>注意了，此时接收端的情况是处理能力不足，你发送端给我少发点，所以此时接收端的接收窗口应该缩小，具体来说，缩小 60 个字节，由 200 个字节变成 140 个字节，因为缓冲队列还有 60 个字节没被应用拿走 (还差多少就减少多少)</p>\n<p>因此，接收端会在 ACK 的报文头部带上缩小后的滑动窗口 140 字节，发送端对应的调整发送窗口的大小为 140 字节</p>\n<p>此时对应发送端而言，已发送且已接收的部分增加 40 字节，也就是 SND.UNA 右移 40 个字节，同时<strong>发送窗口</strong>缩小为 140 个字节</p>\n<p>这就是<strong>流量控制</strong>的过程。尽管回合再多，整个控制的过程和原理是一样的</p>\n<hr />\n<h3 id=\"10tcp-的拥塞控制\"><a class=\"anchor\" href=\"#10tcp-的拥塞控制\">#</a> 10.TCP 的拥塞控制</h3>\n<p>上一节所说的<strong>流量控制</strong>发送在发送端和接收端之间，并没有考虑到整个网络环境的影响，如果说当前网络特别差，特别容易丢包，那么发送端就应该注意一些了。而这，也正是 <code>拥塞控制</code> 需要处理的问题</p>\n<p>对于拥塞控制来说，TCP 每条连接都需要维护两个核心状态：</p>\n<ul>\n<li>拥塞窗口 (Congestion Window ，cwnd)</li>\n<li>慢启动阈值 (Slow Start Threshold，ssthresh)</li>\n</ul>\n<p>涉及的算法有这几个：</p>\n<ul>\n<li>慢启动</li>\n<li>拥塞避免</li>\n<li>快速重传和快速恢复</li>\n</ul>\n<p>接下来，我们就来一一拆解这些状态和算法。首先，从拥塞窗口说起</p>\n<h4 id=\"拥塞窗口\"><a class=\"anchor\" href=\"#拥塞窗口\">#</a> 拥塞窗口</h4>\n<p>拥塞窗口 (Congestion Window ，cwnd) 是指目前自己还能传输的数据量大小</p>\n<p>那么之前介绍了接收窗口的概念，两者有什么区别呢？</p>\n<ul>\n<li>接收窗口 (rwnd) 是 <code>接收端</code> 给的限制</li>\n<li>拥塞窗口 (cwnd) 是 <code>发送端</code> 的限制</li>\n</ul>\n<p>限制谁呢？</p>\n<p>限制的是 <code>发送窗口</code> 的大小</p>\n<p>有了这两个窗口，如何来计算 <code>发送窗口</code> ？</p>\n<pre><code class=\"language-HTTP\">发送窗口 = min(rwnd, cwnd)\n</code></pre>\n<p>取两者的较小值，而拥塞控制，就是来控制 cwnd 的变化</p>\n<h4 id=\"慢启动\"><a class=\"anchor\" href=\"#慢启动\">#</a> 慢启动</h4>\n<p>刚开始进入传输数据的时候，是不知道现在的网络到底是稳定还是拥堵的，如果做的太激进，发包太急，就会疯狂丢包，造成雪崩式的网络灾难</p>\n<p>因此，拥塞控制首先就是要采用一种保守的算法来慢慢的适应整个网络，这种算法叫 <code>慢启动</code> 。运作过程如下：</p>\n<ul>\n<li>首先，三次握手，双方宣告自己的接收窗口大小</li>\n<li>双方初始化自己的<strong>拥塞窗口</strong> (cwnd) 的大小</li>\n<li>在开始传输的一段时间，发送端每收到一个 ACK，拥塞窗口大小加 1，也就是说，每经过一个 RTT，cwnd 翻倍。如果说初始窗口为 10，那么第一轮 10 个报文传完且发送端收到 ACK 后，cwnd 变为 20，第二轮变为 40，第三轮变为 80，以此类推</li>\n</ul>\n<p>难道就这么无止境的翻倍下去？当然不可能。它的阈值叫做<strong>慢启动阈值</strong>，当 cwnd 到达这个阈值后，就好比踩了刹车</p>\n<p>在到达阈值后，如何控制 cwnd 的大小呢？</p>\n<p>这就是拥塞避免做的事情了</p>\n<h4 id=\"拥塞避免\"><a class=\"anchor\" href=\"#拥塞避免\">#</a> 拥塞避免</h4>\n<p>原来每收到一个 ACK，cwnd 加 1，现在到达阈值了，cwnd 只能加这么一点：<strong>1 / cwnd</strong>。这样一轮 RTT 下来，收到 cwnd 个 ACK，那最后拥塞窗口的大小 cwnd 总共才增加 1</p>\n<p>也就是说，以前一个 RTT 下来， <code>cwnd</code>  翻倍，现在 <code>cwnd</code>  只是增加 1 而已</p>\n<p>当然，<strong>慢启动</strong>和<strong>拥塞避免</strong>是一起作用的，是一体的</p>\n<h4 id=\"快速重传和快速回复\"><a class=\"anchor\" href=\"#快速重传和快速回复\">#</a> 快速重传和快速回复</h4>\n<p><strong>快速重传</strong></p>\n<p>在 TCP 传输过程中，如果发生了丢包，即接收端发现数据段不是按序到达的时候，接收端的处理是重复发送之前的 ACK</p>\n<p>比如第 5 个包丢了，即使第 6、7 个包到达了接收端，接收端也一律返回第 4 个包的 ACK。当发送端收到 3 个重复的 ACK 时，意识到丢包了，于是马上进行重传，不用等到一个 RTO 的时间到了才重传</p>\n<p>这就是<strong>快速重传</strong>，它解决的是<strong>是否需要重传</strong>的问题</p>\n<p><strong>快速恢复</strong>（？）</p>\n<p>当然，发送端收到三次重复 ACK 之后，发现丢包，觉得现在的网络有些拥塞了，自己会进入<strong>快速恢复</strong>阶段</p>\n<p>在这个阶段，发送端如下改变：</p>\n<ul>\n<li>拥塞阈值降低为 cwnd 的一半</li>\n<li>cwnd 的大小变为拥塞阈值</li>\n<li>cwnd 线性增加</li>\n</ul>\n<p>以上就是 TCP 拥塞控制的经典算法：<strong>慢启动、拥塞避免、快速重传和快速恢复</strong></p>\n<hr />\n<h3 id=\"11nagle-算法和延迟确认\"><a class=\"anchor\" href=\"#11nagle-算法和延迟确认\">#</a> 11.Nagle 算法和延迟确认</h3>\n<h4 id=\"nagle-算法\"><a class=\"anchor\" href=\"#nagle-算法\">#</a> Nagle 算法</h4>\n<p>试想一个场景，发送端不停的给接收端发很小的包，一次只发 1 个字节，那么发 1 千个字节需要发 1000 次。这种频繁的发送是存在问题的，不光是传输的时延消耗，发送和确认本身也是需要耗时的，频繁的发送接收带来了巨大的时延</p>\n<p>而避免小包的频繁发送，这就是<strong> Nagle 算法</strong>要做的事</p>\n<p>具体来说，Nagle 算法的规则如下：</p>\n<ul>\n<li>当第一次发送数据时不用等待，就算是 1byte 的小包也立即发送</li>\n<li>后面发送满足下面条件之一就可以发送：\n<ul>\n<li>数据包大小达到最大段大小 (Max Segment Size，即 MSS)</li>\n<li>之前所有包的 ACK 都已接收到</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"延迟确认\"><a class=\"anchor\" href=\"#延迟确认\">#</a> 延迟确认</h4>\n<p>试想一个场景，当我收到了发送端的一个包，然后在极短的时间内又接收到了第二个包，那是要一个个回复，还是稍等一下，把两个包的 ACK 合并后一起回复呢？</p>\n<p><strong>延迟确认</strong> (delayed ack) 所做的事情就是后者，稍稍延迟，然后合并 ACK，最后才回复给发送端。TCP 要求这个延迟的时延必须小于 500ms，一般操作系统实现都不会超过 200ms</p>\n<p>不过主要的是，有一些场景是不能延迟确认的，收到了就要马上回复：</p>\n<ul>\n<li>接收到了大于一个 frame 的报文，且需要调整窗口大小</li>\n<li>TCP 处于 quickack 模式 (通过 <code>tcp_in_quickack_mode</code>  设置)</li>\n<li>发现了乱序包</li>\n</ul>\n<h4 id=\"两者一起使用会怎样\"><a class=\"anchor\" href=\"#两者一起使用会怎样\">#</a> 两者一起使用会怎样？</h4>\n<p>前者意味着延迟发送，后者意味着延迟接收，会造成更大的延迟，产生性能问题。</p>\n<hr />\n<h3 id=\"12tcp-的-keep-alive\"><a class=\"anchor\" href=\"#12tcp-的-keep-alive\">#</a> 12.TCP 的 keep-alive</h3>\n<p>大家都听说过 HTTP 的 <code>keep-alive</code> ，不过 TCP 层面也是有 <code>keep-alive</code>  机制，而且跟应用层不太一样</p>\n<p>试想一个场景，当有一方因为网络故障或者宕机导致连接失效，由于 TCP 并不是一个轮询的协议，在下一个数据包到达之前，对端对连接失效的情况是一无所知的</p>\n<p>这个时候就出现了 <code>keep-alive</code> ，它的作用就是探测对端的连接有没有失效</p>\n<p>在 Linux 下，可以这样查看相关的配置</p>\n<pre><code>sudo sysctl -a | grep keepalive\n\n// 每隔 7200 s 检测一次\nnet.ipv4.tcp_keepalive_time = 7200\n// 一次最多重传 9 个包\nnet.ipv4.tcp_keepalive_probes = 9\n// 每个包的间隔重传间隔 75 s\nnet.ipv4.tcp_keepalive_intvl = 75\n</code></pre>\n<p>不过，现状是大部分的应用并没有默认开启 TCP 的 <code>keep-alive</code>  选项，为什么？</p>\n<p>站在应用的角度:</p>\n<ul>\n<li>7200s 也就是两个小时检测一次，时间太长</li>\n<li>时间再短一些，也难以体现其设计的初衷，即检测长时间的死连接</li>\n</ul>\n<p>因此是一个比较尴尬的设计。</p>\n",
            "tags": [
                "计算机基础",
                "计算机基础"
            ]
        },
        {
            "id": "https://1234cas.github.io/1234cas.github.io/Diary/2022-4-29%20%E9%9D%A2%E8%AF%95%E6%97%A5%E8%AE%B0/",
            "url": "https://1234cas.github.io/1234cas.github.io/Diary/2022-4-29%20%E9%9D%A2%E8%AF%95%E6%97%A5%E8%AE%B0/",
            "title": "",
            "date_published": "2023-05-15T02:40:05.193Z",
            "content_html": "<p>事情的起因是我昨天登了 boss 直聘，看到有一个 hr 给我打招呼，然后我和明磊说了，抱着随便试试的心态在明磊的指导下聊了聊，她要我发一份简历，我发之前我把之前做的简历给明磊看，他直言不行，然后按照他说的改 (奇怪的经验丰富)，改的非常棒，虽然内容不多，hr 感觉也行 (毕竟小公司)，就约面试。</p>\n<p>今天中午，五一前的两天，股票大红，100 股通策医疗 11800 我在 9.15% 的时候卖出直接挣了 1100 米，虽然这是得益于明磊重仓通策医疗被套牢了，然后前天跌停，我前天开户昨天入了 100 股今天挣爽，虽然通策医疗大概率还会上涨，但是第一次就不要太贪，如果到时候下跌我就买回，上涨我就替明磊高兴。</p>\n<p>下午就去面试。从理工到软三还挺远的，6-7 公里，好多上下坡，到了之后先填了访客登记，个人信息，然后就在一个小房间面试。问了几个问题：自我介绍，Vue 的优势、ES6、其他不记得了，给了一些基础题笔试，但我还是有四题没做出来：foreach、map 和 reduce 各有什么区别、数组去重 (set)、Ajax 的同步和异步请求、v-if 和 v-show 有什么区别，之后聊了一下，感觉是过了但可惜只要全职，大三还有课没办法。</p>\n<p>就第一次面试还是失败了，毕竟也是尝试，难能可贵。</p>\n<p>准备的自我介绍：</p>\n<p>面试官下午好，我叫林志泰，今天来应聘 web 前端这个职位。我学习前端有一年多了，在 Gighub、b 站、掘金等平台自学。并且搭建了个人博客网站来记录自己的学习经验。我性格比较外向，做事能坚持，在工作中我会持续不断的学习来弥补我的经验，以上是我的自我介绍，谢谢。</p>\n",
            "tags": []
        }
    ]
}